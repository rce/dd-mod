#pragma once

// Dungeon Defenders (9.22) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.Engine
// 0x0580 (0x05C0 - 0x0040)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                                 // 0x0040(0x0004)
	struct FString                                     TinyFontName;                                             // 0x0044(0x000C)
	class UFont*                                       SmallFont;                                                // 0x0050(0x0004)
	struct FString                                     SmallFontName;                                            // 0x0054(0x000C)
	class UFont*                                       MediumFont;                                               // 0x0060(0x0004)
	struct FString                                     MediumFontName;                                           // 0x0064(0x000C)
	class UFont*                                       LargeFont;                                                // 0x0070(0x0004)
	struct FString                                     LargeFontName;                                            // 0x0074(0x000C)
	class UFont*                                       SubtitleFont;                                             // 0x0080(0x0004)
	struct FString                                     SubtitleFontName;                                         // 0x0084(0x000C)
	TArray<class UFont*>                               AdditionalFonts;                                          // 0x0090(0x000C)
	TArray<struct FString>                             AdditionalFontNames;                                      // 0x009C(0x000C)
	class UClass*                                      ConsoleClass;                                             // 0x00A8(0x0004)
	struct FString                                     ConsoleClassName;                                         // 0x00AC(0x000C)
	class UClass*                                      GameViewportClientClass;                                  // 0x00B8(0x0004)
	struct FString                                     GameViewportClientClassName;                              // 0x00BC(0x000C)
	class UClass*                                      DataStoreClientClass;                                     // 0x00C8(0x0004)
	struct FString                                     DataStoreClientClassName;                                 // 0x00CC(0x000C)
	class UClass*                                      LocalPlayerClass;                                         // 0x00D8(0x0004)
	struct FString                                     LocalPlayerClassName;                                     // 0x00DC(0x000C)
	class UMaterial*                                   DefaultMaterial;                                          // 0x00E8(0x0004)
	struct FString                                     DefaultMaterialName;                                      // 0x00EC(0x000C)
	class UMaterial*                                   DefaultDecalMaterial;                                     // 0x00F8(0x0004)
	struct FString                                     DefaultDecalMaterialName;                                 // 0x00FC(0x000C)
	class UTexture*                                    DefaultTexture;                                           // 0x0108(0x0004)
	struct FString                                     DefaultTextureName;                                       // 0x010C(0x000C)
	class UMaterial*                                   WireframeMaterial;                                        // 0x0118(0x0004)
	struct FString                                     WireframeMaterialName;                                    // 0x011C(0x000C)
	class UMaterial*                                   EmissiveTexturedMaterial;                                 // 0x0128(0x0004)
	struct FString                                     EmissiveTexturedMaterialName;                             // 0x012C(0x000C)
	class UMaterial*                                   GeomMaterial;                                             // 0x0138(0x0004)
	struct FString                                     GeomMaterialName;                                         // 0x013C(0x000C)
	class UMaterial*                                   DefaultFogVolumeMaterial;                                 // 0x0148(0x0004)
	struct FString                                     DefaultFogVolumeMaterialName;                             // 0x014C(0x000C)
	class UMaterial*                                   TickMaterial;                                             // 0x0158(0x0004)
	struct FString                                     TickMaterialName;                                         // 0x015C(0x000C)
	class UMaterial*                                   CrossMaterial;                                            // 0x0168(0x0004)
	struct FString                                     CrossMaterialName;                                        // 0x016C(0x000C)
	class UMaterial*                                   LevelColorationLitMaterial;                               // 0x0178(0x0004)
	struct FString                                     LevelColorationLitMaterialName;                           // 0x017C(0x000C)
	class UMaterial*                                   LevelColorationUnlitMaterial;                             // 0x0188(0x0004)
	struct FString                                     LevelColorationUnlitMaterialName;                         // 0x018C(0x000C)
	class UMaterial*                                   LightingTexelDensityMaterial;                             // 0x0198(0x0004)
	struct FString                                     LightingTexelDensityName;                                 // 0x019C(0x000C)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                         // 0x01A8(0x0004)
	struct FString                                     ShadedLevelColorationLitMaterialName;                     // 0x01AC(0x000C)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                       // 0x01B8(0x0004)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                   // 0x01BC(0x000C)
	class UMaterial*                                   RemoveSurfaceMaterial;                                    // 0x01C8(0x0004)
	struct FString                                     RemoveSurfaceMaterialName;                                // 0x01CC(0x000C)
	class UMaterial*                                   VertexColorMaterial;                                      // 0x01D8(0x0004)
	struct FString                                     VertexColorMaterialName;                                  // 0x01DC(0x000C)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                    // 0x01E8(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                // 0x01EC(0x000C)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                 // 0x01F8(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;             // 0x01FC(0x000C)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                      // 0x0208(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                  // 0x020C(0x000C)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                    // 0x0218(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                // 0x021C(0x000C)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                     // 0x0228(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                 // 0x022C(0x000C)
	class UMaterial*                                   HeatmapMaterial;                                          // 0x0238(0x0004)
	struct FString                                     HeatmapMaterialName;                                      // 0x023C(0x000C)
	class UMaterial*                                   BoneWeightMaterial;                                       // 0x0248(0x0004)
	struct FString                                     BoneWeightMaterialName;                                   // 0x024C(0x000C)
	class UMaterial*                                   TangentColorMaterial;                                     // 0x0258(0x0004)
	struct FString                                     TangentColorMaterialName;                                 // 0x025C(0x000C)
	class UMaterial*                                   ProcBuildingSimpleMaterial;                               // 0x0268(0x0004)
	struct FString                                     ProcBuildingSimpleMaterialName;                           // 0x026C(0x000C)
	class UStaticMesh*                                 BuildingQuadStaticMesh;                                   // 0x0278(0x0004)
	struct FString                                     BuildingQuadStaticMeshName;                               // 0x027C(0x000C)
	float                                              ProcBuildingLODColorTexelsPerWorldUnit;                   // 0x0288(0x0004)
	float                                              ProcBuildingLODLightingTexelsPerWorldUnit;                // 0x028C(0x0004)
	int                                                MaxProcBuildingLODColorTextureSize;                       // 0x0290(0x0004)
	int                                                MaxProcBuildingLODLightingTextureSize;                    // 0x0294(0x0004)
	unsigned long                                      UseProcBuildingLODTextureCropping : 1;                    // 0x0298(0x0004)
	unsigned long                                      ForcePowerOfTwoProcBuildingLODTextures : 1;               // 0x0298(0x0004)
	unsigned long                                      bRenderLightMapDensityGrayscale : 1;                      // 0x0298(0x0004)
	unsigned long                                      bUseSound : 1;                                            // 0x0298(0x0004)
	unsigned long                                      bUseTextureStreaming : 1;                                 // 0x0298(0x0004)
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                         // 0x0298(0x0004)
	unsigned long                                      bSubtitlesEnabled : 1;                                    // 0x0298(0x0004)
	unsigned long                                      bSubtitlesForcedOff : 1;                                  // 0x0298(0x0004)
	unsigned long                                      bSmoothFrameRate : 1;                                     // 0x0298(0x0004)
	unsigned long                                      HACK_UseTickFrequency : 1;                                // 0x0298(0x0004)
	unsigned long                                      bShouldGenerateSimpleLightmaps : 1;                       // 0x0298(0x0004)
	unsigned long                                      bForceStaticTerrain : 1;                                  // 0x0298(0x0004)
	unsigned long                                      bForceCPUSkinning : 1;                                    // 0x0298(0x0004)
	unsigned long                                      bUsePostProcessEffects : 1;                               // 0x0298(0x0004)
	unsigned long                                      bOnScreenKismetWarnings : 1;                              // 0x0298(0x0004)
	unsigned long                                      bEnableKismetLogging : 1;                                 // 0x0298(0x0004)
	unsigned long                                      bAllowMatureLanguage : 1;                                 // 0x0298(0x0004)
	unsigned long                                      bRenderTerrainCollisionAsOverlay : 1;                     // 0x0298(0x0004)
	unsigned long                                      bDisablePhysXHardwareSupport : 1;                         // 0x0298(0x0004)
	unsigned long                                      bPauseOnLossOfFocus : 1;                                  // 0x0298(0x0004)
	unsigned long                                      bCheckParticleRenderSize : 1;                             // 0x0298(0x0004)
	unsigned long                                      bEnableColorClear : 1;                                    // 0x0298(0x0004)
	unsigned long                                      bAreConstraintsDirty : 1;                                 // 0x0298(0x0004)
	unsigned long                                      bHasPendingGlobalReattach : 1;                            // 0x0298(0x0004)
	unsigned long                                      bUseMobileEmulation : 1;                                  // 0x0298(0x0004)
	unsigned long                                      bEnableOnScreenDebugMessages : 1;                         // 0x0298(0x0004)
	unsigned long                                      bEnableOnScreenDebugMessagesDisplay : 1;                  // 0x0298(0x0004)
	unsigned long                                      bSuppressMapWarnings : 1;                                 // 0x0298(0x0004)
	unsigned long                                      bCookSeparateSharedMPGameContent : 1;                     // 0x0298(0x0004)
	struct FLinearColor                                LightingOnlyBrightness;                                   // 0x029C(0x0010)
	TArray<struct FColor>                              LightComplexityColors;                                    // 0x02AC(0x000C)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                   // 0x02B8(0x000C)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x02C4(0x0004)
	float                                              MinTextureDensity;                                        // 0x02C8(0x0004)
	float                                              IdealTextureDensity;                                      // 0x02CC(0x0004)
	float                                              MaxTextureDensity;                                        // 0x02D0(0x0004)
	float                                              MinLightMapDensity;                                       // 0x02D4(0x0004)
	float                                              IdealLightMapDensity;                                     // 0x02D8(0x0004)
	float                                              MaxLightMapDensity;                                       // 0x02DC(0x0004)
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x02E0(0x0004)
	float                                              RenderLightMapDensityColorScale;                          // 0x02E4(0x0004)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                         // 0x02E8(0x0010)
	struct FLinearColor                                LightMapDensitySelectedColor;                             // 0x02F8(0x0010)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                        // 0x0308(0x000C)
	class UMaterial*                                   EditorBrushMaterial;                                      // 0x0314(0x0004)
	struct FString                                     EditorBrushMaterialName;                                  // 0x0318(0x000C)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x0324(0x0004)
	struct FString                                     DefaultPhysMaterialName;                                  // 0x0328(0x000C)
	class UMaterial*                                   TerrainErrorMaterial;                                     // 0x0334(0x0004)
	struct FString                                     TerrainErrorMaterialName;                                 // 0x0338(0x000C)
	int                                                TerrainMaterialMaxTextureCount;                           // 0x0344(0x0004)
	int                                                TerrainTessellationCheckCount;                            // 0x0348(0x0004)
	float                                              TerrainTessellationCheckDistance;                         // 0x034C(0x0004)
	class UClass*                                      OnlineSubsystemClass;                                     // 0x0350(0x0004)
	struct FString                                     DefaultOnlineSubsystemName;                               // 0x0354(0x000C)
	class UPostProcessChain*                           DefaultPostProcess;                                       // 0x0360(0x0004)
	struct FString                                     DefaultPostProcessName;                                   // 0x0364(0x000C)
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                         // 0x0370(0x0004)
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;                     // 0x0374(0x000C)
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;                       // 0x0380(0x0004)
	struct FString                                     ThumbnailParticleSystemPostProcessName;                   // 0x0384(0x000C)
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                             // 0x0390(0x0004)
	struct FString                                     ThumbnailMaterialPostProcessName;                         // 0x0394(0x000C)
	class UPostProcessChain*                           DefaultUIScenePostProcess;                                // 0x03A0(0x0004)
	struct FString                                     DefaultUIScenePostProcessName;                            // 0x03A4(0x000C)
	class UMaterial*                                   DefaultUICaretMaterial;                                   // 0x03B0(0x0004)
	struct FString                                     DefaultUICaretMaterialName;                               // 0x03B4(0x000C)
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                         // 0x03C0(0x0004)
	struct FString                                     SceneCaptureReflectActorMaterialName;                     // 0x03C4(0x000C)
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                            // 0x03D0(0x0004)
	struct FString                                     SceneCaptureCubeActorMaterialName;                        // 0x03D4(0x000C)
	class UTexture2D*                                  ScreenDoorNoiseTexture;                                   // 0x03E0(0x0004)
	struct FString                                     ScreenDoorNoiseTextureName;                               // 0x03E4(0x000C)
	class UTexture2D*                                  RandomAngleTexture;                                       // 0x03F0(0x0004)
	struct FString                                     RandomAngleTextureName;                                   // 0x03F4(0x000C)
	class UTexture2D*                                  RandomNormalTexture;                                      // 0x0400(0x0004)
	struct FString                                     RandomNormalTextureName;                                  // 0x0404(0x000C)
	class UTexture2D*                                  RandomMirrorDiscTexture;                                  // 0x0410(0x0004)
	struct FString                                     RandomMirrorDiscTextureName;                              // 0x0414(0x000C)
	class UTexture2D*                                  RandomNormalTexture2;                                     // 0x0420(0x0004)
	struct FString                                     RandomNormalTextureName2;                                 // 0x0424(0x000C)
	class UTexture*                                    WeightMapPlaceholderTexture;                              // 0x0430(0x0004)
	struct FString                                     WeightMapPlaceholderTextureName;                          // 0x0434(0x000C)
	class UTexture2D*                                  LightMapDensityTexture;                                   // 0x0440(0x0004)
	struct FString                                     LightMapDensityTextureName;                               // 0x0444(0x000C)
	class UTexture2D*                                  LightMapDensityNormal;                                    // 0x0450(0x0004)
	struct FString                                     LightMapDensityNormalName;                                // 0x0454(0x000C)
	class USoundNodeWave*                              DefaultSound;                                             // 0x0460(0x0004)
	struct FString                                     DefaultSoundName;                                         // 0x0464(0x000C)
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x0470(0x0004)
	class UClient*                                     Client;                                                   // 0x0474(0x0004)
	TArray<class ULocalPlayer*>                        GamePlayers;                                              // 0x0478(0x000C)
	class UGameViewportClient*                         GameViewport;                                             // 0x0484(0x0004)
	TArray<struct FString>                             DeferredCommands;                                         // 0x0488(0x000C)
	int                                                TickCycles;                                               // 0x0494(0x0004)
	int                                                GameCycles;                                               // 0x0498(0x0004)
	int                                                ClientCycles;                                             // 0x049C(0x0004)
	int                                                GraphicsQualityMode;                                      // 0x04A0(0x0004)
	float                                              MaxSmoothedFrameRate;                                     // 0x04A4(0x0004)
	float                                              MinSmoothedFrameRate;                                     // 0x04A8(0x0004)
	class UDebugManager*                               DebugManager;                                             // 0x04AC(0x0004)
	struct FPointer                                    RemoteControlExec;                                        // 0x04B0(0x0004)
	struct FPointer                                    MobileMaterialEmulator;                                   // 0x04B4(0x0004)
	struct FColor                                      C_WorldBox;                                               // 0x04B8(0x0004)
	struct FColor                                      C_BrushWire;                                              // 0x04BC(0x0004)
	struct FColor                                      C_AddWire;                                                // 0x04C0(0x0004)
	struct FColor                                      C_SubtractWire;                                           // 0x04C4(0x0004)
	struct FColor                                      C_SemiSolidWire;                                          // 0x04C8(0x0004)
	struct FColor                                      C_NonSolidWire;                                           // 0x04CC(0x0004)
	struct FColor                                      C_WireBackground;                                         // 0x04D0(0x0004)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x04D4(0x0004)
	struct FColor                                      C_VolumeCollision;                                        // 0x04D8(0x0004)
	struct FColor                                      C_BSPCollision;                                           // 0x04DC(0x0004)
	struct FColor                                      C_OrthoBackground;                                        // 0x04E0(0x0004)
	struct FColor                                      C_Volume;                                                 // 0x04E4(0x0004)
	struct FColor                                      C_BrushShape;                                             // 0x04E8(0x0004)
	float                                              StreamingDistanceFactor;                                  // 0x04EC(0x0004)
	struct FString                                     ScoutClassName;                                           // 0x04F0(0x000C)
	TEnumAsByte<ETransitionType>                       TransitionType;                                           // 0x04FC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04FD(0x0003) MISSED OFFSET
	struct FString                                     TransitionDescription;                                    // 0x0500(0x000C)
	struct FString                                     TransitionGameType;                                       // 0x050C(0x000C)
	float                                              MeshLODRange;                                             // 0x0518(0x0004)
	float                                              CameraRotationThreshold;                                  // 0x051C(0x0004)
	float                                              CameraTranslationThreshold;                               // 0x0520(0x0004)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x0524(0x0004)
	float                                              PercentUnoccludedRequeries;                               // 0x0528(0x0004)
	float                                              MaxOcclusionPixelsFraction;                               // 0x052C(0x0004)
	int                                                MaxFluidNumVerts;                                         // 0x0530(0x0004)
	float                                              FluidSimulationTimeLimit;                                 // 0x0534(0x0004)
	int                                                MaxParticleResize;                                        // 0x0538(0x0004)
	int                                                MaxParticleResizeWarn;                                    // 0x053C(0x0004)
	int                                                MaxParticleVertexMemory;                                  // 0x0540(0x0004)
	int                                                MaxParticleSpriteCount;                                   // 0x0544(0x0004)
	int                                                MaxParticleSubUVCount;                                    // 0x0548(0x0004)
	int                                                BeginUPTryCount;                                          // 0x054C(0x0004)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                      // 0x0550(0x000C)
	struct FString                                     DynamicCoverMeshComponentName;                            // 0x055C(0x000C)
	float                                              NetClientTicksPerSecond;                                  // 0x0568(0x0004)
	float                                              MaxTrackedOcclusionIncrement;                             // 0x056C(0x0004)
	float                                              TrackedOcclusionStepSize;                                 // 0x0570(0x0004)
	struct FLinearColor                                DefaultSelectedMaterialColor;                             // 0x0574(0x0010)
	struct FLinearColor                                SelectedMaterialColor;                                    // 0x0584(0x0010)
	struct FLinearColor                                UnselectedMaterialColor;                                  // 0x0594(0x0010)
	TArray<struct FName>                               IgnoreSimulatedFuncWarnings;                              // 0x05A4(0x000C)
	struct FString                                     InviteGameSearchClassName;                                // 0x05B0(0x000C)
	class UClass*                                      InviteGameSearchClass;                                    // 0x05BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}


	void STATIC_AllowFloatingPointRenderTargets();
	void STATIC_AddOverlayWrapped();
	void STATIC_AddOverlay();
	void STATIC_RemoveAllOverlays();
	void STATIC_StopMovie();
	void STATIC_PlayLoadMapMovie();
	void STATIC_GetLastMovieName();
	void STATIC_GetAudioDevice();
	void STATIC_IsSplitScreen();
	void STATIC_GetAdditionalFont();
	void STATIC_GetSubtitleFont();
	void STATIC_GetLargeFont();
	void STATIC_GetMediumFont();
	void STATIC_GetSmallFont();
	void STATIC_GetTinyFont();
	void STATIC_GetBuildDate();
	void STATIC_UsePS3CircleToAccept();
	void STATIC_HideSoftKeyboard();
	void STATIC_ShowSoftKeyboard();
	void STATIC_IsNavConnected();
	void STATIC_IsEyeConnected();
	void STATIC_ClearMoveCalibration();
	void STATIC_IsMoveCalibrated();
	void STATIC_IsMoveConnected();
	void STATIC_IsStereoScopic3D();
	void STATIC_GetCurrentWorldInfo();
	void STATIC_IsGame();
	void STATIC_IsEditor();
};


// Class Engine.GameEngine
// 0x0114 (0x06D4 - 0x05C0)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                            // 0x05C0(0x0004)
	struct FString                                     PendingLevelPlayerControllerClassName;                    // 0x05C4(0x000C)
	struct FURL                                        LastURL;                                                  // 0x05D0(0x0044)
	struct FURL                                        LastRemoteURL;                                            // 0x0614(0x0044)
	TArray<struct FString>                             ServerActors;                                             // 0x0658(0x000C)
	struct FString                                     TravelURL;                                                // 0x0664(0x000C)
	unsigned char                                      TravelType;                                               // 0x0670(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0671(0x0003) MISSED OFFSET
	unsigned long                                      bWorldWasLoadedThisTick : 1;                              // 0x0674(0x0004)
	unsigned long                                      bShouldCommitPendingMapChange : 1;                        // 0x0674(0x0004)
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;                   // 0x0674(0x0004)
	class UOnlineSubsystem*                            OnlineSubsystem;                                          // 0x0678(0x0004)
	TArray<struct FName>                               LevelsToLoadForPendingMapChange;                          // 0x067C(0x000C)
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                          // 0x0688(0x000C)
	struct FString                                     PendingMapChangeFailureDescription;                       // 0x0694(0x000C)
	float                                              MaxDeltaTime;                                             // 0x06A0(0x0004)
	TArray<struct FLevelStreamingStatus>               PendingLevelStreamingStatusUpdates;                       // 0x06A4(0x000C)
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                        // 0x06B0(0x000C)
	TArray<struct FFullyLoadedPackagesInfo>            PackagesToFullyLoad;                                      // 0x06BC(0x000C)
	TArray<struct FNamedNetDriver>                     NamedNetDrivers;                                          // 0x06C8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}


	void STATIC_GetOnlineSubsystem();
	void DestroyNamedNetDriver();
	void CreateNamedNetDriver();
};


// Class Engine.Actor
// 0x01E0 (0x021C - 0x003C)
class AActor : public UObject
{
public:
	TArray<class UActorComponent*>                     Components;                                               // 0x003C(0x000C)
	TArray<class UActorComponent*>                     AllComponents;                                            // 0x0048(0x000C)
	struct FVector                                     Location;                                                 // 0x0054(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0060(0x000C)
	float                                              DrawScale;                                                // 0x006C(0x0004) (Const)
	struct FVector                                     DrawScale3D;                                              // 0x0070(0x000C) (Const)
	struct FVector                                     PrePivot;                                                 // 0x007C(0x000C)
	struct FRenderCommandFence                         DetachFence;                                              // 0x0088(0x0004)
	float                                              CustomTimeDilation;                                       // 0x008C(0x0004)
	float                                              NetFrequencyMultiplier;                                   // 0x0090(0x0004)
	TEnumAsByte<EPhysics>                              Physics;                                                  // 0x0094(0x0001)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x0095(0x0001)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x0096(0x0001)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x0097(0x0001)
	TEnumAsByte<ECollisionType>                        ReplicatedCollisionType;                                  // 0x0098(0x0001)
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                // 0x0099(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	class AActor*                                      Owner;                                                    // 0x009C(0x0004)
	class AActor*                                      Base;                                                     // 0x00A0(0x0004)
	TArray<struct FTimerData>                          Timers;                                                   // 0x00A4(0x000C)
	unsigned long                                      bUsesInlineRPCReplication : 1;                            // 0x00B0(0x0004)
	unsigned long                                      bStatic : 1;                                              // 0x00B0(0x0004)
	unsigned long                                      bHidden : 1;                                              // 0x00B0(0x0004)
	unsigned long                                      bNoDelete : 1;                                            // 0x00B0(0x0004)
	unsigned long                                      bDeleteMe : 1;                                            // 0x00B0(0x0004)
	unsigned long                                      bTicked : 1;                                              // 0x00B0(0x0004)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x00B0(0x0004)
	unsigned long                                      bDestroyOnTravel : 1;                                     // 0x00B0(0x0004)
	unsigned long                                      bTickIsDisabled : 1;                                      // 0x00B0(0x0004)
	unsigned long                                      bWorldGeometry : 1;                                       // 0x00B0(0x0004)
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                                // 0x00B0(0x0004)
	unsigned long                                      bOrientOnSlope : 1;                                       // 0x00B0(0x0004)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x00B0(0x0004)
	unsigned long                                      bPushedByEncroachers : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bDestroyedByInterpActor : 1;                              // 0x00B0(0x0004)
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                          // 0x00B0(0x0004)
	unsigned long                                      bIsMoving : 1;                                            // 0x00B0(0x0004)
	unsigned long                                      bAlwaysEncroachCheck : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bHasAlternateTargetLocation : 1;                          // 0x00B0(0x0004)
	unsigned long                                      bCanStepUpOn : 1;                                         // 0x00B0(0x0004)
	unsigned long                                      bIgnoreNetLocation : 1;                                   // 0x00B0(0x0004)
	unsigned long                                      bIgnoreNetRotation : 1;                                   // 0x00B0(0x0004)
	unsigned long                                      bIgnoreNetVelocity : 1;                                   // 0x00B0(0x0004)
	unsigned long                                      bIgnoreSmallNetDelta : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bDoNotCookActor : 1;                                      // 0x00B0(0x0004)
	unsigned long                                      bAllowPawnstoBaseOn : 1;                                  // 0x00B0(0x0004)
	unsigned long                                      bReplicationCritical : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bNetTemporary : 1;                                        // 0x00B0(0x0004)
	unsigned long                                      bOnlyRelevantToOwner : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bNetDirty : 1;                                            // 0x00B0(0x0004)
	unsigned long                                      bAlwaysRelevant : 1;                                      // 0x00B0(0x0004)
	unsigned long                                      bReplicateInstigator : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bReplicateAcceleration : 1;                               // 0x00B4(0x0004)
	unsigned long                                      bReplicateMovement : 1;                                   // 0x00B4(0x0004)
	unsigned long                                      bSkipActorPropertyReplication : 1;                        // 0x00B4(0x0004)
	unsigned long                                      bUpdateSimulatedPosition : 1;                             // 0x00B4(0x0004)
	unsigned long                                      bTearOff : 1;                                             // 0x00B4(0x0004)
	unsigned long                                      bOnlyDirtyReplication : 1;                                // 0x00B4(0x0004)
	unsigned long                                      bReplicateDrawScale : 1;                                  // 0x00B4(0x0004)
	unsigned long                                      bAllowFluidSurfaceInteraction : 1;                        // 0x00B4(0x0004)
	unsigned long                                      bDemoRecording : 1;                                       // 0x00B4(0x0004)
	unsigned long                                      bDemoOwner : 1;                                           // 0x00B4(0x0004)
	unsigned long                                      bForceDemoRelevant : 1;                                   // 0x00B4(0x0004)
	unsigned long                                      bNetInitialRotation : 1;                                  // 0x00B4(0x0004)
	unsigned long                                      bReplicateRigidBodyLocation : 1;                          // 0x00B4(0x0004)
	unsigned long                                      bKillDuringLevelTransition : 1;                           // 0x00B4(0x0004)
	unsigned long                                      bExchangedRoles : 1;                                      // 0x00B4(0x0004)
	unsigned long                                      bConsiderAllStaticMeshComponentsForStreaming : 1;         // 0x00B4(0x0004)
	unsigned long                                      bDebug : 1;                                               // 0x00B4(0x0004)
	unsigned long                                      bPostRenderIfNotVisible : 1;                              // 0x00B4(0x0004)
	unsigned long                                      bDoEventTick : 1;                                         // 0x00B4(0x0004)
	unsigned long                                      bForceNetUpdate : 1;                                      // 0x00B4(0x0004)
	unsigned long                                      bPendingNetUpdate : 1;                                    // 0x00B4(0x0004)
	unsigned long                                      bHardAttach : 1;                                          // 0x00B4(0x0004)
	unsigned long                                      bIgnoreBaseRotation : 1;                                  // 0x00B4(0x0004)
	unsigned long                                      bShadowParented : 1;                                      // 0x00B4(0x0004)
	unsigned long                                      bCanBeAdheredTo : 1;                                      // 0x00B4(0x0004)
	unsigned long                                      bCanBeFrictionedTo : 1;                                   // 0x00B4(0x0004)
	unsigned long                                      bHurtEntry : 1;                                           // 0x00B4(0x0004)
	unsigned long                                      bGameRelevant : 1;                                        // 0x00B4(0x0004)
	unsigned long                                      bMovable : 1;                                             // 0x00B4(0x0004)
	unsigned long                                      bDestroyInPainVolume : 1;                                 // 0x00B4(0x0004)
	unsigned long                                      bCanBeDamaged : 1;                                        // 0x00B4(0x0004)
	unsigned long                                      bShouldBaseAtStartup : 1;                                 // 0x00B4(0x0004)
	unsigned long                                      bPendingDelete : 1;                                       // 0x00B8(0x0004)
	unsigned long                                      bCanTeleport : 1;                                         // 0x00B8(0x0004)
	unsigned long                                      bAlwaysTick : 1;                                          // 0x00B8(0x0004)
	unsigned long                                      bBlocksNavigation : 1;                                    // 0x00B8(0x0004)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x00B8(0x0004)
	unsigned long                                      bCollideWhenPlacing : 1;                                  // 0x00B8(0x0004)
	unsigned long                                      bCollideActors : 1;                                       // 0x00B8(0x0004)
	unsigned long                                      bCollideWorld : 1;                                        // 0x00B8(0x0004)
	unsigned long                                      bCollideComplex : 1;                                      // 0x00B8(0x0004)
	unsigned long                                      bBlockActors : 1;                                         // 0x00B8(0x0004)
	unsigned long                                      bProjTarget : 1;                                          // 0x00B8(0x0004)
	unsigned long                                      bBlocksTeleport : 1;                                      // 0x00B8(0x0004)
	unsigned long                                      bNoEncroachCheck : 1;                                     // 0x00B8(0x0004)
	unsigned long                                      bCollideAsEncroacher : 1;                                 // 0x00B8(0x0004)
	unsigned long                                      bPhysRigidBodyOutOfWorldCheck : 1;                        // 0x00B8(0x0004)
	unsigned long                                      bComponentOutsideWorld : 1;                               // 0x00B8(0x0004)
	unsigned long                                      bRigidBodyWasAwake : 1;                                   // 0x00B8(0x0004)
	unsigned long                                      bCallRigidBodyWakeEvents : 1;                             // 0x00B8(0x0004)
	unsigned long                                      bForceNoPathBlocking : 1;                                 // 0x00B8(0x0004)
	unsigned long                                      bBounce : 1;                                              // 0x00B8(0x0004)
	unsigned long                                      bJustTeleported : 1;                                      // 0x00B8(0x0004)
	unsigned long                                      bNetInitial : 1;                                          // 0x00B8(0x0004)
	unsigned long                                      bNetOwner : 1;                                            // 0x00B8(0x0004)
	unsigned long                                      bHiddenEd : 1;                                            // 0x00B8(0x0004)
	unsigned long                                      bHiddenEdGroup : 1;                                       // 0x00B8(0x0004)
	unsigned long                                      bHiddenEdCustom : 1;                                      // 0x00B8(0x0004)
	unsigned long                                      bHiddenEdTemporary : 1;                                   // 0x00B8(0x0004) (ExportObject)
	unsigned long                                      bHiddenEdLevel : 1;                                       // 0x00B8(0x0004) (ExportObject)
	unsigned long                                      bEdShouldSnap : 1;                                        // 0x00B8(0x0004)
	unsigned long                                      bTempEditor : 1;                                          // 0x00B8(0x0004)
	unsigned long                                      bPathColliding : 1;                                       // 0x00B8(0x0004)
	unsigned long                                      bPathTemp : 1;                                            // 0x00B8(0x0004)
	unsigned long                                      bScriptInitialized : 1;                                   // 0x00BC(0x0004)
	unsigned long                                      bLockLocation : 1;                                        // 0x00BC(0x0004)
	unsigned long                                      bForceAllowKismetModification : 1;                        // 0x00BC(0x0004)
	unsigned long                                      bForceRenderIn3DMode : 1;                                 // 0x00BC(0x0004)
	unsigned long                                      bDoUseAdditionalComponentAttachments : 1;                 // 0x00BC(0x0004)
	unsigned long                                      bDoAttachAnyComponentsToSkeletalMesh : 1;                 // 0x00BC(0x0004)
	int                                                MulticastQueueMessageTypeLimitDefault;                    // 0x00C0(0x0004)
	int                                                IgnoreCollisionGroups;                                    // 0x00C4(0x0004)
	int                                                MyCollisionGroups;                                        // 0x00C8(0x0004)
	float                                              SmallNetDeltaSize;                                        // 0x00CC(0x0004)
	float                                              GravityZMultiplier;                                       // 0x00D0(0x0004)
	int                                                NetTag;                                                   // 0x00D4(0x0004)
	float                                              NetUpdateTime;                                            // 0x00D8(0x0004)
	float                                              NetUpdateFrequency;                                       // 0x00DC(0x0004)
	float                                              NetPriority;                                              // 0x00E0(0x0004)
	float                                              LastNetUpdateTime;                                        // 0x00E4(0x0004)
	float                                              TimeSinceLastTick;                                        // 0x00E8(0x0004)
	float                                              TickFrequency;                                            // 0x00EC(0x0004)
	float                                              TickFrequencyAtEndDistance;                               // 0x00F0(0x0004)
	float                                              TickFrequencyDecreaseDistanceStart;                       // 0x00F4(0x0004)
	float                                              TickFrequencyDecreaseDistanceEnd;                         // 0x00F8(0x0004)
	float                                              TickFrequencyLastSeenTimeBeforeForcingMaxTickFrequency;   // 0x00FC(0x0004)
	struct FVector                                     InterpolatedVelocity;                                     // 0x0100(0x000C)
	class APawn*                                       Instigator;                                               // 0x010C(0x0004) (Edit)
	class AWorldInfo*                                  WorldInfo;                                                // 0x0110(0x0004)
	float                                              LifeSpan;                                                 // 0x0114(0x0004)
	float                                              CreationTime;                                             // 0x0118(0x0004)
	float                                              LastRenderTime;                                           // 0x011C(0x0004)
	struct FName                                       Tag;                                                      // 0x0120(0x0008)
	struct FName                                       InitialState;                                             // 0x0128(0x0008)
	struct FName                                       Group;                                                    // 0x0130(0x0008)
	struct FQWord                                      HiddenEditorViews;                                        // 0x0138(0x0008)
	TArray<class AActor*>                              Touching;                                                 // 0x0140(0x000C)
	TArray<class AActor*>                              Children;                                                 // 0x014C(0x000C)
	float                                              LatentFloat;                                              // 0x0158(0x0004)
	class UAnimNodeSequence*                           LatentSeqNode;                                            // 0x015C(0x0004)
	class APhysicsVolume*                              PhysicsVolume;                                            // 0x0160(0x0004)
	struct FVector                                     Velocity;                                                 // 0x0164(0x000C)
	struct FVector                                     Acceleration;                                             // 0x0170(0x000C)
	float                                              FlatAcceleration;                                         // 0x017C(0x0004)
	struct FVector                                     AngularVelocity;                                          // 0x0180(0x000C)
	class USkeletalMeshComponent*                      BaseSkelComponent;                                        // 0x018C(0x0004)
	struct FName                                       BaseBoneName;                                             // 0x0190(0x0008)
	TArray<class AActor*>                              Attached;                                                 // 0x0198(0x000C)
	struct FVector                                     RelativeLocation;                                         // 0x01A4(0x000C)
	struct FRotator                                    RelativeRotation;                                         // 0x01B0(0x000C)
	class UPrimitiveComponent*                         CollisionComponent;                                       // 0x01BC(0x0004)
	int                                                OverlapTag;                                               // 0x01C0(0x0004)
	struct FRotator                                    RotationRate;                                             // 0x01C4(0x000C)
	class AActor*                                      PendingTouch;                                             // 0x01D0(0x0004)
	class UClass*                                      MessageClass;                                             // 0x01D4(0x0004)
	TArray<class UClass*>                              SupportedEvents;                                          // 0x01D8(0x000C)
	TArray<class USequenceEvent*>                      GeneratedEvents;                                          // 0x01E4(0x000C)
	TArray<class USeqAct_Latent*>                      LatentActions;                                            // 0x01F0(0x000C)
	int                                                maxVisiblePlayers;                                        // 0x01FC(0x0004)
	TArray<struct FAdditionalComponentInfo>            MyAdditionalComponentInfos;                               // 0x0200(0x000C)
	int                                                OctreeCollectionGroup;                                    // 0x020C(0x0004)
	TArray<class UObject*>                             BuffingObjects;                                           // 0x0210(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}


	void ReplicationInlineRPCTrigger();
	void STATIC_ActorDirectMulticastFunction();
	void ActorInlineQueueMulticastFunction();
	void ShouldBlockPlayerAim();
	void STATIC_AllowSpawn();
	void IsPlayingSound();
	void StopSound();
	void LeadTarget();
	void InitializeDD();
	void GetTickDisabled();
	void ExecReplicatedFunction();
	void WillOverlap();
	void GetAvoidanceVector();
	void IsClient();
	void IsServer();
	void IsOwningClient();
	void ReplicationEnded();
	void PostDemoRewind();
	void AnimTreeUpdated();
	void SupportsKismetModification();
	void TrailsNotifyEnd();
	void TrailsNotifyTick();
	void TrailsNotify();
	void PlayParticleEffect();
	void GetAimAdhesionExtent();
	void GetAimFrictionExtent();
	void IsInPersistentLevel();
	void OnRigidBodySpringOverextension();
	void STATIC_GetPackageGuid();
	void PostInitAnimTree();
	void RootMotionExtracted();
	void RootMotionModeChanged();
	void PostRenderFor();
	void NativePostRenderFor();
	void SetHUDLocation();
	void OnRanOver();
	void RigidBodyCollision();
	void InterpolationChanged();
	void InterpolationFinished();
	void InterpolationStarted();
	void PickedUpBy();
	void SpawnedByKismet();
	void GetTargetLocation();
	void FindGoodEndView();
	void NotifyLocalPlayerTeamReceived();
	void GetLocationStringFor();
	void ScriptGetTeamNum();
	void GetTeamNum();
	void PawnBaseDied();
	void IsPlayerOwned();
	void GetActorEyesViewPoint();
	void IsStationary();
	void GetActorFaceFXAsset();
	void CanActorPlayFaceFXAnim();
	void IsActorPlayingFaceFXAnim();
	void SetSkelControlScale();
	void SetMorphWeight();
	void StopActorFaceFXAnim();
	void PlayActorFaceFXAnim();
	void FinishAnimControl();
	void SetAnimPosition();
	void BeginAnimControl();
	void OnAnimPlay();
	void OnAnimEnd();
	void DoKismetAttachment();
	void OnAttachToActor();
	void OnToggleHidden();
	void OnChangeCollision();
	void OnSetPhysics();
	void OnSetBlockRigidBody();
	void OnSetVelocity();
	void OnTeleport();
	void OnModifyHealth();
	void PrestreamTextures();
	void ShutDown();
	void SetNetUpdateTime();
	void ForceNetRelevant();
	void OnDestroy();
	void UnbaseAttachments();
	void ClearLatentAction();
	void FindEventsOfClass();
	void ActivateEventClass();
	void TriggerGlobalEventClass();
	void ReceivedNewEvent();
	void TriggerEventClass();
	void EffectIsRelevant();
	void CheckMaxEffectDistance();
	void ApplyFluidSurfaceImpact();
	void CanSplash();
	void PlayTeleportEffect();
	void IsInPain();
	void IsInVolume();
	void Reset();
	void GetFaceFXAudioComponent();
	void ModifyHearSoundComponent();
	void GetPhysicsName();
	void DisplayDebug();
	void GetDebugName();
	void MatchStarting();
	void STATIC_GetLocalString();
	void STATIC_ReplaceText();
	void GetHumanReadableName();
	void GetItemName();
	void CalcCamera();
	void EndViewTarget();
	void BecomeViewTarget();
	void CheckForErrors();
	void DebugFreezeGame();
	void GetGravityZ();
	void CheckHitInfo();
	void ClientTakeRadiusDamage();
	void ClientTakeDamage();
	void TakeRadiusDamage();
	void HealDamage();
	void TakeDamage();
	void KilledBy();
	void HurtRadius();
	void StopsProjectile();
	void NotifySkelControlBeyondLimit();
	void ConstraintBrokenNotify();
	void SetInitialState();
	void AttachAdditionalComponents();
	void PostBeginPlay();
	void BroadcastLocalizedTeamMessage();
	void BroadcastLocalizedMessage();
	void PreBeginPlay();
	void FindActorsOfClass();
	void GetALocalPlayerController();
	void LocalPlayerControllers();
	void AllOwnedComponents();
	void ComponentList();
	void OverlappingActorArrayDotCheck();
	void OverlappingActorArray();
	void OverlappingActors();
	void CollidingActors();
	void VisibleCollidingActors();
	void VisibleActors();
	void TraceActors();
	void TouchingActors();
	void BasedActors();
	void ChildActors();
	void DynamicActors();
	void AllActors();
	void GetURLMap();
	void PostTeleport();
	void PreTeleport();
	void GetDestination();
	void SuggestTossVelocity();
	void PlayerCanSeeMe();
	void MakeNoise();
	void PlaySound();
	void CreateAudioComponent();
	void ResetTimerTimeDilation();
	void ModifyTimerTimeDilation();
	void GetRemainingTimeForTimer();
	void GetTimerRate();
	void GetTimerCount();
	void IsTimerActive();
	void PauseTimer();
	void ClearAllTimers();
	void ClearTimer();
	void SetTimer();
	void TornOff();
	void Destroy();
	void Spawn();
	void GetCollisionRadius();
	void GetBoundingCylinder();
	void GetComponentsBoundingBox();
	void IsOverlapping();
	void ContainsPoint();
	void FindSpot();
	void TraceAllPhysicsAssetInteractions();
	void FastTrace();
	void PointCheckComponent();
	void TraceComponent();
	void Trace();
	void VolumeBasedDestroy();
	void OutsideWorldBounds();
	void FellOutOfWorld();
	void UsedBy();
	void OverRotated();
	void ClampRotation();
	void OnSleepRBPhysics();
	void OnWakeRBPhysics();
	void RanInto();
	void EncroachedBy();
	void EncroachingOn();
	void CollisionChanged();
	void SpecialHandling();
	void Detach();
	void Attach();
	void BaseChange();
	void Bump();
	void UnTouch();
	void PostTouch();
	void Touch();
	void PhysicsVolumeChange();
	void Landed();
	void Falling();
	void HitWall();
	void Timer();
	void Tick();
	void LostChild();
	void GainedChild();
	void Destroyed();
	void SetTickIsDisabled();
	void SetTickGroup();
	void ReattachComponent();
	void DetachComponent();
	void AttachComponent();
	void UnClock();
	void Clock();
	void SetPhysics();
	void SetOnlyOwnerSee();
	void SetHidden();
	void ChartData();
	void STATIC_FlushDebugStrings();
	void STATIC_DrawDebugString();
	void STATIC_DrawDebugCone();
	void STATIC_DrawDebugCylinder();
	void STATIC_DrawDebugSphere();
	void STATIC_DrawDebugCoordinateSystem();
	void STATIC_DrawDebugStar();
	void STATIC_DrawDebugBox();
	void STATIC_DrawDebugPoint();
	void STATIC_DrawDebugLine();
	void STATIC_FlushPersistentDebugLines();
	void STATIC_GetBasedPosition();
	void STATIC_SetBasedPosition();
	void STATIC_BP2Vect();
	void STATIC_Vect2BP();
	void GetEnemyTargetingDesirability();
	void GetTopOwner();
	void IsOwnedByAnySplitPlayer();
	void SetForcedInitialReplicatedProperty();
	void ReplicatedDataBinding();
	void ReplicatedEvent();
	void IsOwnedBy();
	void GetBaseMost();
	void IsBasedOn();
	void FindBase();
	void SetOwner();
	void SetBase();
	void GetTerminalVelocity();
	void AutonomousPhysics();
	void MoveSmooth();
	void fixedTurn();
	void SetHardAttach();
	void SetRelativeLocation();
	void SetRelativeRotation();
	void SetZone();
	void MovingWhichWay();
	void SetRotation();
	void SetLocation();
	void Move();
	void SetDrawScale3D();
	void SetDrawScale();
	void SetCollisionType();
	void SetCollisionSize();
	void SetCollision();
	void FinishAnim();
	void Sleep();
	void ConsoleCommand();
	void ForceUpdateComponents();
};


// Class Engine.Brush
// 0x0024 (0x0240 - 0x021C)
class ABrush : public AActor
{
public:
	TEnumAsByte<ECsgOper>                              CsgOper;                                                  // 0x021C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x021D(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                               // 0x0220(0x0004)
	int                                                PolyFlags;                                                // 0x0224(0x0004)
	unsigned long                                      bColored : 1;                                             // 0x0228(0x0004)
	unsigned long                                      bSolidWhenSelected : 1;                                   // 0x0228(0x0004)
	unsigned long                                      bPlaceableFromClassBrowser : 1;                           // 0x0228(0x0004)
	class UModel*                                      Brush;                                                    // 0x022C(0x0004)
	class UBrushComponent*                             BrushComponent;                                           // 0x0230(0x0004)
	TArray<struct FGeomSelection>                      SavedSelections;                                          // 0x0234(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}

};


// Class Engine.BrushShape
// 0x0000 (0x0240 - 0x0240)
class ABrushShape : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushShape");
		return ptr;
	}

};


// Class Engine.Volume
// 0x0018 (0x0258 - 0x0240)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                          // 0x0240(0x0004)
	int                                                LocationPriority;                                         // 0x0244(0x0004)
	struct FString                                     LocationName;                                             // 0x0248(0x000C)
	unsigned long                                      bForcePawnWalk : 1;                                       // 0x0254(0x0004)
	unsigned long                                      bProcessAllActors : 1;                                    // 0x0254(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}


	void ProcessActorSetVolume();
	void CollisionChanged();
	void OnToggle();
	void DisplayDebug();
	void GetLocationStringFor();
	void PostBeginPlay();
	void EncompassesPoint();
	void Encompasses();
};


// Class Engine.BlockingVolume
// 0x0004 (0x025C - 0x0258)
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bBlockCamera : 1;                                         // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}


	void OnToggle();
};


// Class Engine.DynamicBlockingVolume
// 0x0000 (0x025C - 0x025C)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicBlockingVolume");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
};


// Class Engine.CullDistanceVolume
// 0x0010 (0x0268 - 0x0258)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                            // 0x0258(0x000C)
	unsigned long                                      bEnabled : 1;                                             // 0x0264(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}

};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x0270 - 0x0258)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x0258(0x000C)
	unsigned long                                      bEditorPreVisOnly : 1;                                    // 0x0264(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x0264(0x0004)
	unsigned long                                      bTestDistanceToVolume : 1;                                // 0x0264(0x0004)
	TEnumAsByte<EStreamingVolumeUsage>                 Usage;                                                    // 0x0268(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	float                                              TestVolumeDistance;                                       // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void OnToggle();
};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x0258 - 0x0258)
class ALightmassImportanceVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		return ptr;
	}

};


// Class Engine.NavMeshWeightVolume
// 0x0004 (0x025C - 0x0258)
class ANavMeshWeightVolume : public AVolume
{
public:
	int                                                Weight;                                                   // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshWeightVolume");
		return ptr;
	}

};


// Class Engine.PathBlockingVolume
// 0x0000 (0x0258 - 0x0258)
class APathBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathBlockingVolume");
		return ptr;
	}

};


// Class Engine.PhysicsVolume
// 0x0040 (0x0298 - 0x0258)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                             // 0x0258(0x000C) (Const)
	unsigned long                                      bVelocityAffectsWalking : 1;                              // 0x0264(0x0004)
	unsigned long                                      bPainCausing : 1;                                         // 0x0264(0x0004)
	unsigned long                                      bAIShouldIgnorePain : 1;                                  // 0x0264(0x0004)
	unsigned long                                      bEntryPain : 1;                                           // 0x0264(0x0004)
	unsigned long                                      BACKUP_bPainCausing : 1;                                  // 0x0264(0x0004)
	unsigned long                                      bDestructive : 1;                                         // 0x0264(0x0004)
	unsigned long                                      bNoInventory : 1;                                         // 0x0264(0x0004)
	unsigned long                                      bMoveProjectiles : 1;                                     // 0x0264(0x0004)
	unsigned long                                      bBounceVelocity : 1;                                      // 0x0264(0x0004)
	unsigned long                                      bNeutralZone : 1;                                         // 0x0264(0x0004)
	unsigned long                                      bCrowdAgentsPlayDeathAnim : 1;                            // 0x0264(0x0004)
	unsigned long                                      bPhysicsOnContact : 1;                                    // 0x0264(0x0004)
	unsigned long                                      bWaterVolume : 1;                                         // 0x0264(0x0004)
	float                                              GroundFriction;                                           // 0x0268(0x0004)
	float                                              TerminalVelocity;                                         // 0x026C(0x0004)
	float                                              DamagePerSec;                                             // 0x0270(0x0004)
	class UClass*                                      DamageType;                                               // 0x0274(0x0004)
	int                                                Priority;                                                 // 0x0278(0x0004)
	float                                              FluidFriction;                                            // 0x027C(0x0004)
	float                                              PainInterval;                                             // 0x0280(0x0004)
	float                                              RigidBodyDamping;                                         // 0x0284(0x0004)
	float                                              MaxDampingForce;                                          // 0x0288(0x0004)
	class AInfo*                                       PainTimer;                                                // 0x028C(0x0004)
	class AController*                                 DamageInstigator;                                         // 0x0290(0x0004)
	class APhysicsVolume*                              NextPhysicsVolume;                                        // 0x0294(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
	void OnSetDamageInstigator();
	void NotifyPawnBecameViewTarget();
	void ModifyPlayer();
	void CausePainTo();
	void Touch();
	void TimerPop();
	void CollisionChanged();
	void OnToggle();
	void PawnLeavingVolume();
	void PawnEnteredVolume();
	void ActorLeavingVolume();
	void ActorEnteredVolume();
	void PhysicsChangedFor();
	void Reset();
	void PostBeginPlay();
	void GetZoneVelocityForActor();
	void GetGravityZ();
};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0298 - 0x0298)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}


	void Destroyed();
};


// Class Engine.GravityVolume
// 0x0004 (0x029C - 0x0298)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                                 // 0x0298(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GravityVolume");
		return ptr;
	}

};


// Class Engine.LadderVolume
// 0x0034 (0x02CC - 0x0298)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                                  // 0x0298(0x000C)
	struct FVector                                     LookDir;                                                  // 0x02A4(0x000C)
	struct FVector                                     ClimbDir;                                                 // 0x02B0(0x000C)
	class ALadder*                                     LadderList;                                               // 0x02BC(0x0004)
	unsigned long                                      bNoPhysicalLadder : 1;                                    // 0x02C0(0x0004)
	unsigned long                                      bAutoPath : 1;                                            // 0x02C0(0x0004)
	unsigned long                                      bAllowLadderStrafing : 1;                                 // 0x02C0(0x0004)
	class APawn*                                       PendingClimber;                                           // 0x02C4(0x0004)
	class UArrowComponent*                             WallDirArrow;                                             // 0x02C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderVolume");
		return ptr;
	}


	void PhysicsChangedFor();
	void PawnLeavingVolume();
	void PawnEnteredVolume();
	void InUse();
	void PostBeginPlay();
};


// Class Engine.PortalVolume
// 0x000C (0x0264 - 0x0258)
class APortalVolume : public AVolume
{
public:
	TArray<class APortalTeleporter*>                   Portals;                                                  // 0x0258(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalVolume");
		return ptr;
	}

};


// Class Engine.PostProcessVolume
// 0x00AC (0x0304 - 0x0258)
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0258(0x0004)
	struct FPostProcessSettings                        Settings;                                                 // 0x025C(0x00A0)
	class APostProcessVolume*                          NextLowerPriorityVolume;                                  // 0x02FC(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0300(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}


	void OnToggle();
};


// Class Engine.ReverbVolume
// 0x003C (0x0294 - 0x0258)
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0258(0x0004)
	struct FReverbSettings                             Settings;                                                 // 0x025C(0x0010)
	struct FInteriorSettings                           AmbientZoneSettings;                                      // 0x026C(0x0024)
	class AReverbVolume*                               NextLowerPriorityVolume;                                  // 0x0290(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReverbVolume");
		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x0258 - 0x0258)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}


	void StopsProjectile();
	void PostBeginPlay();
};


// Class Engine.DroppedPickup
// 0x0010 (0x022C - 0x021C)
class ADroppedPickup : public AActor
{
public:
	class AInventory*                                  Inventory;                                                // 0x021C(0x0004)
	class UClass*                                      InventoryClass;                                           // 0x0220(0x0004) (Edit)
	class ANavigationPoint*                            PickupCache;                                              // 0x0224(0x0004)
	unsigned long                                      bFadeOut : 1;                                             // 0x0228(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DroppedPickup");
		return ptr;
	}


	void RecheckValidTouch();
	void PickedUpBy();
	void GiveTo();
	void Landed();
	void DetourWeight();
	void EncroachedBy();
	void SetPickupParticles();
	void SetPickupMesh();
	void Reset();
	void ReplicatedEvent();
	void Destroyed();
	void RemoveFromNavigation();
	void AddToNavigation();
};


// Class Engine.DynamicSMActor
// 0x0038 (0x0254 - 0x021C)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x021C(0x0004)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0220(0x0004)
	class UStaticMesh*                                 ReplicatedMesh;                                           // 0x0224(0x0004) (Edit)
	class UMaterialInterface*                          ReplicatedMaterial;                                       // 0x0228(0x0004) (Edit)
	unsigned long                                      bForceStaticDecals : 1;                                   // 0x022C(0x0004) (Edit)
	unsigned long                                      bPawnCanBaseOn : 1;                                       // 0x022C(0x0004)
	unsigned long                                      bSafeBaseIfAsleep : 1;                                    // 0x022C(0x0004)
	struct FVector                                     ReplicatedMeshTranslation;                                // 0x0230(0x000C) (Edit)
	struct FRotator                                    ReplicatedMeshRotation;                                   // 0x023C(0x000C) (Edit)
	struct FVector                                     ReplicatedMeshScale3D;                                    // 0x0248(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicSMActor");
		return ptr;
	}


	void SetLightEnvironmentToNotBeDynamic();
	void Detach();
	void Attach();
	void CanBasePawn();
	void SetStaticMesh();
	void OnSetMaterial();
	void OnSetMesh();
	void ReplicatedEvent();
	void PostBeginPlay();
};


// Class Engine.InterpActor
// 0x002C (0x0280 - 0x0254)
class AInterpActor : public ADynamicSMActor
{
public:
	unsigned long                                      bShouldSaveForCheckpoint : 1;                             // 0x0254(0x0004)
	unsigned long                                      bMonitorMover : 1;                                        // 0x0254(0x0004)
	unsigned long                                      bMonitorZVelocity : 1;                                    // 0x0254(0x0004)
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                        // 0x0254(0x0004)
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;                     // 0x0254(0x0004)
	unsigned long                                      bStopOnEncroach : 1;                                      // 0x0254(0x0004)
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;                 // 0x0254(0x0004)
	unsigned long                                      bIsLift : 1;                                              // 0x0254(0x0004)
	class ANavigationPoint*                            MyMarker;                                                 // 0x0258(0x0004)
	float                                              MaxZVelocity;                                             // 0x025C(0x0004)
	float                                              StayOpenTime;                                             // 0x0260(0x0004)
	class USoundCue*                                   OpenSound;                                                // 0x0264(0x0004)
	class USoundCue*                                   OpeningAmbientSound;                                      // 0x0268(0x0004)
	class USoundCue*                                   OpenedSound;                                              // 0x026C(0x0004)
	class USoundCue*                                   CloseSound;                                               // 0x0270(0x0004)
	class USoundCue*                                   ClosingAmbientSound;                                      // 0x0274(0x0004)
	class USoundCue*                                   ClosedSound;                                              // 0x0278(0x0004)
	class UAudioComponent*                             AmbientSoundComponent;                                    // 0x027C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpActor");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
	void ShutDown();
	void InterpolationChanged();
	void InterpolationFinished();
	void InterpolationStarted();
	void PlayMovingSound();
	void FinishedOpen();
	void Restart();
	void Detach();
	void Attach();
	void RanInto();
	void EncroachingOn();
	void SetShadowParentOnAllAttachedComponents();
	void PostBeginPlay();
};


// Class Engine.Emitter
// 0x000C (0x0228 - 0x021C)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x021C(0x0004)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0220(0x0004)
	unsigned long                                      bDestroyOnSystemFinish : 1;                               // 0x0224(0x0004)
	unsigned long                                      bPostUpdateTickGroup : 1;                                 // 0x0224(0x0004)
	unsigned long                                      bCurrentlyActive : 1;                                     // 0x0224(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}


	void HideSelf();
	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
	void OnSetParticleSysParam();
	void SetActorParameter();
	void SetExtColorParameter();
	void SetColorParameter();
	void SetVectorParameter();
	void SetFloatParameter();
	void ShutDown();
	void OnParticleEventGenerator();
	void OnToggle();
	void OnParticleSystemFinished();
	void ReplicatedEvent();
	void PostBeginPlay();
	void SetTemplate();
};


// Class Engine.EmitterPool
// 0x0058 (0x0274 - 0x021C)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                              // 0x021C(0x0004)
	TArray<class UParticleSystemComponent*>            PoolComponents;                                           // 0x0220(0x000C)
	TArray<class UParticleSystemComponent*>            ActiveComponents;                                         // 0x022C(0x000C)
	int                                                MaxActiveEffects;                                         // 0x0238(0x0004)
	unsigned long                                      bLogPoolOverflow : 1;                                     // 0x023C(0x0004)
	unsigned long                                      bLogPoolOverflowList : 1;                                 // 0x023C(0x0004)
	TArray<struct FEmitterBaseInfo>                    RelativePSCs;                                             // 0x0240(0x000C)
	float                                              SMC_MIC_ReductionTime;                                    // 0x024C(0x0004)
	float                                              SMC_MIC_CurrentReductionTime;                             // 0x0250(0x0004)
	int                                                IdealStaticMeshComponents;                                // 0x0254(0x0004)
	int                                                IdealMaterialInstanceConstants;                           // 0x0258(0x0004)
	TArray<class UStaticMeshComponent*>                FreeSMComponents;                                         // 0x025C(0x000C)
	TArray<class UMaterialInstanceConstant*>           FreeMatInstConsts;                                        // 0x0268(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterPool");
		return ptr;
	}


	void SpawnEmitterCustomLifetime();
	void SpawnEmitterMeshAttachment();
	void SpawnEmitter();
	void GetPooledComponent();
	void GetFreeMatInstConsts();
	void FreeMaterialInstanceConstants();
	void GetFreeStaticMeshComponent();
	void FreeStaticMeshComponents();
	void ReturnToPool();
	void ClearPoolComponents();
	void OnParticleSystemFinished();
};


// Class Engine.Canvas
// 0x0068 (0x00A4 - 0x003C)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                                     // 0x003C(0x0004)
	float                                              OrgX;                                                     // 0x0040(0x0004)
	float                                              OrgY;                                                     // 0x0044(0x0004)
	float                                              ClipX;                                                    // 0x0048(0x0004)
	float                                              ClipY;                                                    // 0x004C(0x0004)
	float                                              CurX;                                                     // 0x0050(0x0004)
	float                                              CurY;                                                     // 0x0054(0x0004)
	float                                              CurYL;                                                    // 0x0058(0x0004)
	struct FColor                                      DrawColor;                                                // 0x005C(0x0004)
	unsigned long                                      bCenter : 1;                                              // 0x0060(0x0004)
	unsigned long                                      bNoSmooth : 1;                                            // 0x0060(0x0004)
	int                                                SizeX;                                                    // 0x0064(0x0004)
	int                                                SizeY;                                                    // 0x0068(0x0004)
	struct FLinearColor                                DefaultGradientColor;                                     // 0x006C(0x0010)
	struct FPointer                                    Canvas;                                                   // 0x007C(0x0004)
	struct FPointer                                    SceneView;                                                // 0x0080(0x0004)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0084(0x000C) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                            // 0x0090(0x0010)
	class UTexture2D*                                  DefaultTexture;                                           // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}


	void GetWidescreenScale();
	void SetTextCharacterClipping();
	void SetForceDropShadows();
	void DrawTileBase();
	void STATIC_WrapString();
	void GetSmallestNudgedScale();
	void GetNudgedScaleTo768();
	void GetScaleTo768();
	void DrawDebugGraph();
	void GetCanvasAlpha();
	void DoFlush();
	void DrawTextureDoubleLine();
	void DrawTextureLine();
	void Draw2DLine();
	void DrawRotatedMaterialTile();
	void DrawRotatedTile();
	void SetDrawColor();
	void DrawBox();
	void DrawRect();
	void DrawIconSection();
	void DrawIcon();
	void MakeIcon();
	void DrawTexture();
	void SetClip();
	void SetOrigin();
	void SetPos();
	void Reset();
	void DrawColorizedTile();
	void DrawTileStretched();
	void PopTransform();
	void PushTranslationMatrix();
	void DeProject();
	void ProjectNoClip();
	void Project();
	void DrawTileClipped();
	void DrawTextRA();
	void DrawTextShadowed();
	void DrawTextCenteredShadowed();
	void DrawTextCentered();
	void STATIC_AddColoredText();
	void DrawText();
	void TextSize();
	void StrLen();
	void STATIC_CreateFontRenderInfo();
	void DrawMaterialTileClipped();
	void DrawMaterialTile();
	void DrawTile();
};


// Class Engine.HUD
// 0x072C (0x0948 - 0x021C)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                               // 0x021C(0x0004)
	struct FColor                                      GreenColor;                                               // 0x0220(0x0004)
	struct FColor                                      RedColor;                                                 // 0x0224(0x0004)
	struct FLinearColor                                WhiteLinearColor;                                         // 0x0228(0x0010)
	class APlayerController*                           PlayerOwner;                                              // 0x0238(0x0004)
	class AHUD*                                        HudOwner;                                                 // 0x023C(0x0004)
	class APlayerReplicationInfo*                      ViewedInfo;                                               // 0x0240(0x0004)
	class AScoreBoard*                                 ScoreBoard;                                               // 0x0244(0x0004)
	unsigned long                                      LostFocusPaused : 1;                                      // 0x0248(0x0004)
	unsigned long                                      bShowHUD : 1;                                             // 0x0248(0x0004)
	unsigned long                                      bShowGameHUD : 1;                                         // 0x0248(0x0004)
	unsigned long                                      bShowScores : 1;                                          // 0x0248(0x0004)
	unsigned long                                      bShowDebugInfo : 1;                                       // 0x0248(0x0004)
	unsigned long                                      bShowGameDebug : 1;                                       // 0x0248(0x0004)
	unsigned long                                      bShowBadConnectionAlert : 1;                              // 0x0248(0x0004)
	unsigned long                                      bMessageBeep : 1;                                         // 0x0248(0x0004)
	unsigned long                                      bShowOverlays : 1;                                        // 0x0248(0x0004)
	float                                              HudCanvasScale;                                           // 0x024C(0x0004)
	TArray<class AActor*>                              PostRenderedActors;                                       // 0x0250(0x000C)
	TArray<struct FConsoleMessage>                     ConsoleMessages;                                          // 0x025C(0x000C)
	struct FColor                                      ConsoleColor;                                             // 0x0268(0x0004)
	int                                                ConsoleMessageCount;                                      // 0x026C(0x0004)
	int                                                ConsoleFontSize;                                          // 0x0270(0x0004)
	int                                                MessageFontOffset;                                        // 0x0274(0x0004)
	int                                                MaxHUDAreaMessageCount;                                   // 0x0278(0x0004)
	struct FHudLocalizedMessage                        LocalMessages[0x8];                                       // 0x027C(0x0058)
	struct FHudLocalizedMessage                        ChatMessages[0xB];                                        // 0x053C(0x0058)
	float                                              ConsoleMessagePosX;                                       // 0x0904(0x0004)
	float                                              ConsoleMessagePosY;                                       // 0x0908(0x0004)
	class UCanvas*                                     Canvas;                                                   // 0x090C(0x0004)
	float                                              LastHUDRenderTime;                                        // 0x0910(0x0004)
	float                                              RenderDelta;                                              // 0x0914(0x0004)
	float                                              SizeX;                                                    // 0x0918(0x0004)
	float                                              SizeY;                                                    // 0x091C(0x0004)
	float                                              CenterX;                                                  // 0x0920(0x0004)
	float                                              CenterY;                                                  // 0x0924(0x0004)
	float                                              RatioX;                                                   // 0x0928(0x0004)
	float                                              RatioY;                                                   // 0x092C(0x0004)
	TArray<struct FName>                               DebugDisplay;                                             // 0x0930(0x000C)
	TArray<struct FKismetDrawTextInfo>                 KismetTextInfo;                                           // 0x093C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}


	void OnLostFocusPause();
	void PlayerOwnerDied();
	void STATIC_GetRYGColorRamp();
	void STATIC_GetFontSizeIndex();
	void DisplayKismetMessages();
	void DisplayChatMessages();
	void DisplayLocalMessages();
	void DrawChatMessageText();
	void DrawMessageText();
	void DrawMessageIcon();
	void DrawChatMessage();
	void DrawMessage();
	void GetScreenCoords();
	void GetHUDCanvasScale();
	void AddChatMessage();
	void AddLocalizedMessage();
	void ChatMessage();
	void LocalizedMessage();
	void AddConsoleMessage();
	void DisplayConsoleMessages();
	void IsOnCanvas();
	void Message();
	void ClearMessage();
	void DisplayBadConnectionAlert();
	void DrawEngineHUD();
	void DrawDemoHUD();
	void DrawHUD();
	void DrawMessages();
	void PostRender();
	void PreCalcValues();
	void DrawRoute();
	void FXStop();
	void FXPlay();
	void ShouldDisplayDebug();
	void ShowDebug();
	void ShowGameDebug();
	void SetShowScores();
	void ShowScores();
	void ShowHUD();
	void ToggleHUD();
	void AddPostRenderedActor();
	void RemovePostRenderedActor();
	void DrawActorOverlays();
	void Destroyed();
	void SpawnScoreBoard();
	void PostBeginPlay();
	void Draw2DLine();
	void Draw3DLine();
};


// Class Engine.Info
// 0x0000 (0x021C - 0x021C)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}

};


// Class Engine.AutoTestManager
// 0x0080 (0x029C - 0x021C)
class AAutoTestManager : public AInfo
{
public:
	unsigned long                                      bAutomatedPerfTesting : 1;                                // 0x021C(0x0004)
	unsigned long                                      bAutoContinueToNextRound : 1;                             // 0x021C(0x0004)
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                        // 0x021C(0x0004)
	unsigned long                                      bAutomatedTestingWithOpen : 1;                            // 0x021C(0x0004)
	unsigned long                                      bCheckingForFragmentation : 1;                            // 0x021C(0x0004)
	unsigned long                                      bCheckingForMemLeaks : 1;                                 // 0x021C(0x0004)
	unsigned long                                      bDoingASentinelRun : 1;                                   // 0x021C(0x0004)
	unsigned long                                      bSentinelStreamingLevelStillLoading : 1;                  // 0x021C(0x0004)
	int                                                AutomatedPerfRemainingTime;                               // 0x0220(0x0004)
	int                                                AutomatedTestingMapIndex;                                 // 0x0224(0x0004)
	TArray<struct FString>                             AutomatedMapTestingList;                                  // 0x0228(0x000C)
	int                                                NumAutomatedMapTestingCycles;                             // 0x0234(0x0004)
	int                                                NumberOfMatchesPlayed;                                    // 0x0238(0x0004)
	int                                                NumMapListCyclesDone;                                     // 0x023C(0x0004)
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;             // 0x0240(0x000C)
	struct FString                                     AutomatedMapTestingTransitionMap;                         // 0x024C(0x000C)
	struct FString                                     SentinelTaskDescription;                                  // 0x0258(0x000C)
	struct FString                                     SentinelTaskParameter;                                    // 0x0264(0x000C)
	struct FString                                     SentinelTagDesc;                                          // 0x0270(0x000C)
	class APlayerController*                           SentinelPC;                                               // 0x027C(0x0004)
	TArray<struct FVector>                             SentinelTravelArray;                                      // 0x0280(0x000C)
	int                                                SentinelNavigationIdx;                                    // 0x028C(0x0004)
	int                                                SentinelIdx;                                              // 0x0290(0x0004)
	int                                                NumRotationsIncrement;                                    // 0x0294(0x0004)
	int                                                TravelPointsIncrement;                                    // 0x0298(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoTestManager");
		return ptr;
	}


	void CheckForSentinelRun();
	void StartMatch();
	void GetNextAutomatedTestingMap();
	void IncrementNumberOfMatchesPlayed();
	void IncrementAutomatedTestingMapIndex();
	void CloseAutomatedMapTestTimer();
	void StartAutomatedMapTestTimerWorker();
	void StartAutomatedMapTestTimer();
	void DoTimeBasedSentinelStatGathering();
	void DoSentinel_PerfAtSpecificLocation();
	void DoSentinel_MemoryAtSpecificLocation();
	void GetTravelLocations();
	void HandlePerLoadedMapAudioStats();
	void DoSentinelActionPerLoadedMap();
	void DoTravelTheWorld();
	void EndSentinelRun();
	void AddSentinelPerTimePeriodStats();
	void BeginSentinelRun();
	void InitializeOptions();
	void Timer();
	void PostBeginPlay();
};


// Class Engine.CoverGroup
// 0x0014 (0x0230 - 0x021C)
class ACoverGroup : public AInfo
{
public:
	TArray<struct FActorReference>                     CoverLinkRefs;                                            // 0x021C(0x000C)
	float                                              AutoSelectRadius;                                         // 0x0228(0x0004)
	float                                              AutoSelectHeight;                                         // 0x022C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverGroup");
		return ptr;
	}


	void OnToggle();
	void ToggleGroup();
	void DisableGroup();
	void EnableGroup();
};


// Class Engine.FileWriter
// 0x0018 (0x0234 - 0x021C)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                               // 0x021C(0x0004)
	struct FString                                     Filename;                                                 // 0x0220(0x000C)
	TEnumAsByte<EFWFileType>                           FileType;                                                 // 0x022C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x022D(0x0003) MISSED OFFSET
	unsigned long                                      bFlushEachWrite : 1;                                      // 0x0230(0x0004)
	unsigned long                                      bWantsAsyncWrites : 1;                                    // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileWriter");
		return ptr;
	}


	void Destroyed();
	void Logf();
	void CloseFile();
	void OpenFile();
};


// Class Engine.FileLog
// 0x0000 (0x0234 - 0x0234)
class AFileLog : public AFileWriter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileLog");
		return ptr;
	}


	void CloseLog();
	void OpenLog();
};


// Class Engine.OnlineSubsystem
// 0x00A0 (0x00DC - 0x003C)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x003C(0x0004)
	TScriptInterface<class UOnlineAccountInterface>    AccountInterface;                                         // 0x0040(0x0008)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x0048(0x0008)
	TScriptInterface<class UOnlinePlayerInterfaceEx>   PlayerInterfaceEx;                                        // 0x0050(0x0008)
	TScriptInterface<class UOnlineSystemInterface>     SystemInterface;                                          // 0x0058(0x0008)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x0060(0x0008)
	TScriptInterface<class UOnlineContentInterface>    ContentInterface;                                         // 0x0068(0x0008)
	TScriptInterface<class UOnlineVoiceInterface>      VoiceInterface;                                           // 0x0070(0x0008)
	TScriptInterface<class UOnlineStatsInterface>      StatsInterface;                                           // 0x0078(0x0008)
	TScriptInterface<class UOnlineNewsInterface>       NewsInterface;                                            // 0x0080(0x0008)
	TScriptInterface<class UOnlinePartyChatInterface>  PartyChatInterface;                                       // 0x0088(0x0008)
	struct FString                                     filterString;                                             // 0x0090(0x000C)
	unsigned long                                      canProcessBootInvite : 1;                                 // 0x009C(0x0004)
	unsigned long                                      bUseBuildIdOverride : 1;                                  // 0x009C(0x0004)
	TArray<struct FNamedInterface>                     NamedInterfaces;                                          // 0x00A0(0x000C)
	TArray<struct FNamedInterfaceDef>                  NamedInterfaceDefs;                                       // 0x00AC(0x000C)
	TArray<struct FNamedSession>                       Sessions;                                                 // 0x00B8(0x000C)
	int                                                BuildIdOverride;                                          // 0x00C4(0x0004)
	struct FString                                     IniLocPatcherClassName;                                   // 0x00C8(0x000C)
	class UIniLocPatcher*                              Patcher;                                                  // 0x00D4(0x0004)
	float                                              AsyncMinCompletionTime;                                   // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSubsystem");
		return ptr;
	}


	void SetDebugSpewLevel();
	void DumpVoiceRegistration();
	void DumpSessionState();
	void GetPrimarySessionName();
	void STATIC_DumpGameSettings();
	void STATIC_GetNumSupportedLogins();
	void GetBuildUniqueId();
	void STATIC_AreUniqueNetIdsEqual();
	void STATIC_StringToUniqueNetId();
	void STATIC_UniqueNetIdToString();
	void GetNamedInterface();
	void SetNamedInterface();
	void SetPartyChatInterface();
	void SetNewsInterface();
	void SetStatsInterface();
	void SetVoiceInterface();
	void SetContentInterface();
	void SetGameInterface();
	void SetSystemInterface();
	void SetPlayerInterfaceEx();
	void SetPlayerInterface();
	void SetAccountInterface();
	void Exit();
	void PostInit();
	void Init();
};


// Class Engine.GameInfo
// 0x0174 (0x0390 - 0x021C)
class AGameInfo : public AInfo
{
public:
	unsigned long                                      bRestartLevel : 1;                                        // 0x021C(0x0004)
	unsigned long                                      bPauseable : 1;                                           // 0x021C(0x0004)
	unsigned long                                      bTeamGame : 1;                                            // 0x021C(0x0004)
	unsigned long                                      bGameEnded : 1;                                           // 0x021C(0x0004)
	unsigned long                                      bOverTime : 1;                                            // 0x021C(0x0004)
	unsigned long                                      bDelayedStart : 1;                                        // 0x021C(0x0004)
	unsigned long                                      bWaitingToStartMatch : 1;                                 // 0x021C(0x0004)
	unsigned long                                      bChangeLevels : 1;                                        // 0x021C(0x0004)
	unsigned long                                      bAlreadyChanged : 1;                                      // 0x021C(0x0004)
	unsigned long                                      bAdminCanPause : 1;                                       // 0x021C(0x0004)
	unsigned long                                      bGameRestarted : 1;                                       // 0x021C(0x0004)
	unsigned long                                      bLevelChange : 1;                                         // 0x021C(0x0004)
	unsigned long                                      bKickLiveIdlers : 1;                                      // 0x021C(0x0004)
	unsigned long                                      bUsingArbitration : 1;                                    // 0x021C(0x0004)
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                         // 0x021C(0x0004)
	unsigned long                                      bNeedsEndGameHandshake : 1;                               // 0x021C(0x0004)
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                          // 0x021C(0x0004)
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                            // 0x021C(0x0004)
	unsigned long                                      bFixedPlayerStart : 1;                                    // 0x021C(0x0004)
	unsigned long                                      bDoFearCostFallOff : 1;                                   // 0x021C(0x0004)
	unsigned long                                      bUseSeamlessTravel : 1;                                   // 0x021C(0x0004)
	unsigned long                                      bHasNetworkError : 1;                                     // 0x021C(0x0004)
	unsigned long                                      bRequiresPushToTalk : 1;                                  // 0x021C(0x0004)
	unsigned long                                      bIsStandbyCheckingEnabled : 1;                            // 0x021C(0x0004)
	unsigned long                                      bHasStandbyCheatTriggered : 1;                            // 0x021C(0x0004)
	struct FString                                     CauseEventCommand;                                        // 0x0220(0x000C)
	struct FString                                     BugLocString;                                             // 0x022C(0x000C)
	struct FString                                     BugRotString;                                             // 0x0238(0x000C)
	TArray<class APlayerController*>                   PendingArbitrationPCs;                                    // 0x0244(0x000C)
	TArray<class APlayerController*>                   ArbitrationPCs;                                           // 0x0250(0x000C)
	float                                              ArbitrationHandshakeTimeout;                              // 0x025C(0x0004)
	float                                              GameDifficulty;                                           // 0x0260(0x0004)
	int                                                GoreLevel;                                                // 0x0264(0x0004)
	float                                              GameSpeed;                                                // 0x0268(0x0004)
	class UClass*                                      DefaultPawnClass;                                         // 0x026C(0x0004)
	class UClass*                                      ScoreBoardType;                                           // 0x0270(0x0004)
	class UClass*                                      HUDType;                                                  // 0x0274(0x0004)
	int                                                MaxSpectators;                                            // 0x0278(0x0004)
	int                                                MaxSpectatorsAllowed;                                     // 0x027C(0x0004)
	int                                                NumSpectators;                                            // 0x0280(0x0004)
	int                                                MaxPlayers;                                               // 0x0284(0x0004)
	int                                                MaxPlayersAllowed;                                        // 0x0288(0x0004)
	int                                                NumPlayers;                                               // 0x028C(0x0004)
	int                                                NumBots;                                                  // 0x0290(0x0004)
	int                                                NumTravellingPlayers;                                     // 0x0294(0x0004)
	int                                                CurrentID;                                                // 0x0298(0x0004)
	struct FString                                     DefaultPlayerName;                                        // 0x029C(0x000C)
	struct FString                                     GameName;                                                 // 0x02A8(0x000C)
	float                                              FearCostFallOff;                                          // 0x02B4(0x0004)
	int                                                GoalScore;                                                // 0x02B8(0x0004)
	int                                                MaxLives;                                                 // 0x02BC(0x0004)
	int                                                TimeLimit;                                                // 0x02C0(0x0004)
	class UClass*                                      DeathMessageClass;                                        // 0x02C4(0x0004)
	class UClass*                                      GameMessageClass;                                         // 0x02C8(0x0004)
	class AMutator*                                    BaseMutator;                                              // 0x02CC(0x0004)
	class UClass*                                      AccessControlClass;                                       // 0x02D0(0x0004)
	class AAccessControl*                              AccessControl;                                            // 0x02D4(0x0004)
	class UClass*                                      BroadcastHandlerClass;                                    // 0x02D8(0x0004)
	class ABroadcastHandler*                           BroadcastHandler;                                         // 0x02DC(0x0004)
	class UClass*                                      AutoTestManagerClass;                                     // 0x02E0(0x0004)
	class AAutoTestManager*                            MyAutoTestManager;                                        // 0x02E4(0x0004)
	class UClass*                                      PlayerControllerClass;                                    // 0x02E8(0x0004)
	class UClass*                                      PlayerReplicationInfoClass;                               // 0x02EC(0x0004)
	class UClass*                                      GameReplicationInfoClass;                                 // 0x02F0(0x0004)
	class AGameReplicationInfo*                        GameReplicationInfo;                                      // 0x02F4(0x0004)
	float                                              MaxIdleTime;                                              // 0x02F8(0x0004)
	float                                              MaxTimeMargin;                                            // 0x02FC(0x0004)
	float                                              TimeMarginSlack;                                          // 0x0300(0x0004)
	float                                              MinTimeMargin;                                            // 0x0304(0x0004)
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                         // 0x0308(0x000C)
	TArray<struct FScriptDelegate>                     Pausers;                                                  // 0x0314(0x000C)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0320(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x0324(0x0008)
	class UClass*                                      OnlineStatsWriteClass;                                    // 0x032C(0x0004)
	int                                                LeaderboardId;                                            // 0x0330(0x0004)
	int                                                ArbitratedLeaderboardId;                                  // 0x0334(0x0004)
	class ACoverReplicator*                            CoverReplicatorBase;                                      // 0x0338(0x0004)
	class UClass*                                      OnlineGameSettingsClass;                                  // 0x033C(0x0004)
	struct FString                                     ServerOptions;                                            // 0x0340(0x000C)
	int                                                AdjustedNetSpeed;                                         // 0x034C(0x0004)
	float                                              LastNetSpeedUpdateTime;                                   // 0x0350(0x0004)
	int                                                TotalNetBandwidth;                                        // 0x0354(0x0004)
	int                                                MinDynamicBandwidth;                                      // 0x0358(0x0004)
	int                                                MaxDynamicBandwidth;                                      // 0x035C(0x0004)
	float                                              StandbyRxCheatTime;                                       // 0x0360(0x0004)
	float                                              StandbyTxCheatTime;                                       // 0x0364(0x0004)
	int                                                BadPingThreshold;                                         // 0x0368(0x0004)
	float                                              PercentMissingForRxStandby;                               // 0x036C(0x0004)
	float                                              PercentMissingForTxStandby;                               // 0x0370(0x0004)
	float                                              PercentForBadPing;                                        // 0x0374(0x0004)
	TArray<struct FGameClassShortName>                 GameInfoClassAliases;                                     // 0x0378(0x000C)
	struct FScriptDelegate                             __CanUnpause__Delegate;                                   // 0x0384(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInfo");
		return ptr;
	}


	void StandbyCheatDetected();
	void EnableStandbyCheatDetection();
	void BeginBVT();
	void CheckForSentinelRun();
	void ShouldAutoContinueToNextRound();
	void IsDoingASentinelRun();
	void IsCheckingForMemLeaks();
	void IsCheckingForFragmentation();
	void IsAutomatedPerfTesting();
	void TellClientsToTravelToSession();
	void TellClientsToReturnToPartyHost();
	void OnServerCreateComplete();
	void RegisterServer();
	void OnLoginChange();
	void OnLoginFailed();
	void ClearAutoLoginDelegates();
	void ProcessServerLogin();
	void MatineeCancelled();
	void RecalculateSkillRating();
	void UpdateGameplayMuteList();
	void NotifyArbitratedMatchEnd();
	void MatchIsInProgress();
	void ArbitrationRegistrationComplete();
	void RegisterServerForArbitration();
	void StartArbitratedMatch();
	void StartArbitrationRegistration();
	void ProcessClientRegistrationCompletion();
	void UpdateGameSettingsCounts();
	void SetSeamlessTravelViewTarget();
	void HandleSeamlessTravelPlayer();
	void UpdateGameSettings();
	void PostSeamlessTravel();
	void SwapPlayerControllers();
	void GetSeamlessTravelActorList();
	void OverridePRI();
	void FindInactivePRI();
	void AddInactivePRI();
	void PostCommitMapChange();
	void PreCommitMapChange();
	void AllowPausing();
	void AllowCheats();
	void STATIC_AllowMutator();
	void PlayerCanRestart();
	void PlayerCanRestartGame();
	void KillBots();
	void DriverLeftVehicle();
	void CanLeaveVehicle();
	void DriverEnteredVehicle();
	void ModifyScoreKill();
	void ScoreKill();
	void CheckScore();
	void ScoreObjective();
	void AddObjectiveScore();
	void RatePlayerStart();
	void ChoosePlayerStart();
	void FindPlayerStart();
	void ShouldSpawnAtStartSpot();
	void EndLogging();
	void EndOnlineGame();
	void PerformEndGameHandling();
	void EndGame();
	void WriteOnlinePlayerScores();
	void WriteOnlineStats();
	void CheckEndGame();
	void CheckModifiedEndGame();
	void BroadcastLocalizedTeam();
	void BroadcastLocalized();
	void BroadcastTeam();
	void Broadcast();
	void RestartGame();
	void GetTravelType();
	void GetNextMap();
	void SendPlayer();
	void PickTeam();
	void ChangeTeam();
	void ChangeName();
	void DiscardInventory();
	void PickupQuery();
	void ShouldRespawn();
	void CheckRelevance();
	void ReduceDamage();
	void CanSpectate();
	void KickBan();
	void Kick();
	void STATIC_ParseKillMessage();
	void BroadcastDeathMessage();
	void PreventDeath();
	void Killed();
	void NotifyKilled();
	void SetPlayerDefaults();
	void Mutate();
	void AddDefaultInventory();
	void AcceptInventory();
	void UnregisterPlayer();
	void Logout();
	void PreExit();
	void CalculatedNetSpeed();
	void UpdateNetSpeeds();
	void PostLogin();
	void GenericPlayerInitialization();
	void ReplicateStreamingStatus();
	void GetDefaultPlayerClass();
	void SpawnDefaultPawnFor();
	void RestartPlayer();
	void UsedSpotForPlayer();
	void StartBots();
	void StartHumans();
	void OnStartOnlineGameComplete();
	void StartOnlineGame();
	void StartMatch();
	void Login();
	void SpawnPlayerController();
	void GetNextPlayerID();
	void AtCapacity();
	void PreLogin();
	void RequiresPassword();
	void ProcessClientTravel();
	void ProcessServerTravel();
	void RemoveMutator();
	void AddMutator();
	void NotifyPendingConnectionLost();
	void InitGame();
	void STATIC_SetGameType();
	void STATIC_GetDefaultGameClassPath();
	void STATIC_GetIntOption();
	void STATIC_HasOption();
	void STATIC_ParseOption();
	void STATIC_GetKeyValue();
	void STATIC_GrabOption();
	void SetGameSpeed();
	void DebugPause();
	void ForceClearUnpauseDelegates();
	void ClearPause();
	void SetPause();
	void CanUnpause();
	void GetServerPort();
	void GetNumPlayers();
	void GetNetworkNumber();
	void InitGameReplicationInfo();
	void ForceKickPlayer();
	void KickIdler();
	void GameEnding();
	void NotifyNavigationChanged();
	void DoNavFearCostFallOff();
	void Timer();
	void ResetLevel();
	void ShouldReset();
	void Reset();
	void DisplayDebug();
	void PostBeginPlay();
	void GetCoverReplicator();
	void STATIC_UseLowGore();
	void FindPlayerByID();
	void PreBeginPlay();
};


// Class Engine.MCPTools
// 0x0000 (0x0390 - 0x0390)
class AMCPTools : public AGameInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MCPTools");
		return ptr;
	}


	void DoLoggedIn();
	void InitGame();
	void RegisterServer();
};


// Class Engine.Mutator
// 0x0014 (0x0230 - 0x021C)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                              // 0x021C(0x0004)
	TArray<struct FString>                             GroupNames;                                               // 0x0220(0x000C)
	unsigned long                                      bUserAdded : 1;                                           // 0x022C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Mutator");
		return ptr;
	}


	void NetDamage();
	void ScoreKill();
	void ScoreObjective();
	void PreventDeath();
	void OverridePickupQuery();
	void CheckEndGame();
	void HandleRestartGame();
	void FindPlayerStart();
	void GetSeamlessTravelActorList();
	void InitMutator();
	void DriverLeftVehicle();
	void CanLeaveVehicle();
	void DriverEnteredVehicle();
	void NotifyLogin();
	void NotifyLogout();
	void ParseChatPercVar();
	void GetServerPlayers();
	void GetServerDetails();
	void CheckReplacement();
	void CheckRelevance();
	void IsRelevant();
	void AlwaysKeep();
	void AddMutator();
	void ModifyPlayer();
	void ModifyLogin();
	void Mutate();
	void Destroyed();
	void MutatorIsAllowed();
	void PreBeginPlay();
};


// Class Engine.PotentialClimbWatcher
// 0x0000 (0x021C - 0x021C)
class APotentialClimbWatcher : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PotentialClimbWatcher");
		return ptr;
	}


	void Tick();
};


// Class Engine.Route
// 0x0018 (0x0234 - 0x021C)
class ARoute : public AInfo
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;                    // 0x021C(0x0004)
	TEnumAsByte<ERouteType>                            RouteType;                                                // 0x0220(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	TArray<struct FActorReference>                     RouteList;                                                // 0x0224(0x000C)
	float                                              FudgeFactor;                                              // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Route");
		return ptr;
	}


	void MoveOntoRoutePath();
	void ResolveRouteIndex();
};


// Class Engine.WindPointSource
// 0x0004 (0x0220 - 0x021C)
class AWindPointSource : public AInfo
{
public:
	class UWindPointSourceComponent*                   Component;                                                // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindPointSource");
		return ptr;
	}

};


// Class Engine.ZoneInfo
// 0x0010 (0x022C - 0x021C)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                                    // 0x021C(0x0004)
	float                                              SoftKill;                                                 // 0x0220(0x0004)
	class UClass*                                      KillZDamageType;                                          // 0x0224(0x0004)
	unsigned long                                      bSoftKillZ : 1;                                           // 0x0228(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ZoneInfo");
		return ptr;
	}

};


// Class Engine.MusicTrackDataStructures
// 0x0000 (0x003C - 0x003C)
class UMusicTrackDataStructures : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MusicTrackDataStructures");
		return ptr;
	}

};


// Class Engine.WorldInfo
// 0x050C (0x0738 - 0x022C)
class AWorldInfo : public AZoneInfo
{
public:
	struct FPostProcessSettings                        DefaultPostProcessSettings;                               // 0x022C(0x00A0)
	float                                              SquintModeKernelSize;                                     // 0x02CC(0x0004)
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                         // 0x02D0(0x0004)
	struct FReverbSettings                             DefaultReverbSettings;                                    // 0x02D4(0x0010)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                               // 0x02E4(0x0024)
	class AReverbVolume*                               HighestPriorityReverbVolume;                              // 0x0308(0x0004)
	TArray<class APortalVolume*>                       PortalVolumes;                                            // 0x030C(0x000C)
	TArray<class AEnvironmentVolume*>                  EnvironmentVolumes;                                       // 0x0318(0x000C)
	unsigned long                                      bOldCameraTurningLimits : 1;                              // 0x0324(0x0004)
	unsigned long                                      bTreatNavMeshAsPlane : 1;                                 // 0x0324(0x0004)
	unsigned long                                      bOfficialMap : 1;                                         // 0x0324(0x0004)
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                        // 0x0324(0x0004)
	unsigned long                                      bMapHasDLEsOutsideOfImportanceVolume : 1;                 // 0x0324(0x0004)
	unsigned long                                      bMapHasMultipleDominantLightsAffectingOnePrimitive : 1;   // 0x0324(0x0004)
	unsigned long                                      bMapHasPathingErrors : 1;                                 // 0x0324(0x0004)
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                        // 0x0324(0x0004)
	unsigned long                                      bBegunPlay : 1;                                           // 0x0324(0x0004)
	unsigned long                                      bPlayersOnly : 1;                                         // 0x0324(0x0004)
	unsigned long                                      bPlayersOnlyPending : 1;                                  // 0x0324(0x0004)
	unsigned long                                      bDropDetail : 1;                                          // 0x0324(0x0004)
	unsigned long                                      bAggressiveLOD : 1;                                       // 0x0324(0x0004)
	unsigned long                                      bStartup : 1;                                             // 0x0324(0x0004)
	unsigned long                                      bPathsRebuilt : 1;                                        // 0x0324(0x0004)
	unsigned long                                      bHasPathNodes : 1;                                        // 0x0324(0x0004)
	unsigned long                                      bIsMenuLevel : 1;                                         // 0x0324(0x0004)
	unsigned long                                      bUseConsoleInput : 1;                                     // 0x0324(0x0004)
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                         // 0x0324(0x0004)
	unsigned long                                      bNoPathWarnings : 1;                                      // 0x0324(0x0004)
	unsigned long                                      bHighPriorityLoading : 1;                                 // 0x0324(0x0004)
	unsigned long                                      bHighPriorityLoadingLocal : 1;                            // 0x0324(0x0004)
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                        // 0x0324(0x0004)
	unsigned long                                      bEnableChanceOfPhysicsChunkOverride : 1;                  // 0x0324(0x0004)
	unsigned long                                      bLimitExplosionChunkSize : 1;                             // 0x0324(0x0004)
	unsigned long                                      bLimitDamageChunkSize : 1;                                // 0x0324(0x0004)
	unsigned long                                      bAllowForegroundRendering : 1;                            // 0x0324(0x0004)
	unsigned long                                      bAllowModulateBetterShadows : 1;                          // 0x0324(0x0004)
	unsigned long                                      bAllowLightEnvSphericalHarmonicLights : 1;                // 0x0324(0x0004)
	unsigned long                                      bIncreaseFogNearPrecision : 1;                            // 0x0324(0x0004)
	unsigned long                                      bUseGlobalIllumination : 1;                               // 0x0324(0x0004) (ExportObject)
	unsigned long                                      bBSPCollapseDisregardingBrightness : 1;                   // 0x0324(0x0004)
	unsigned long                                      bSimpleLightmapsStoredInLinearSpace : 1;                  // 0x0328(0x0004)
	unsigned long                                      bUseMonochromaticLightmapScale : 1;                       // 0x0328(0x0004)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x032C(0x000C)
	struct FDouble                                     LastTimeUnbuiltLightingWasEncountered;                    // 0x0338(0x0008)
	class UBookMark*                                   BookMarks[0xA];                                           // 0x0340(0x0004)
	TArray<class UClipPadEntry*>                       ClipPadEntries;                                           // 0x0368(0x000C)
	float                                              TimeDilation;                                             // 0x0374(0x0004)
	float                                              DemoPlayTimeDilation;                                     // 0x0378(0x0004)
	float                                              TimeSeconds;                                              // 0x037C(0x0004)
	float                                              RealTimeSeconds;                                          // 0x0380(0x0004)
	float                                              AudioTimeSeconds;                                         // 0x0384(0x0004)
	float                                              DeltaSeconds;                                             // 0x0388(0x0004)
	float                                              PauseDelay;                                               // 0x038C(0x0004)
	float                                              RealTimeToUnPause;                                        // 0x0390(0x0004)
	class APlayerReplicationInfo*                      Pauser;                                                   // 0x0394(0x0004)
	struct FString                                     VisibleGroups;                                            // 0x0398(0x000C)
	struct FString                                     SelectedGroups;                                           // 0x03A4(0x000C)
	class UTexture2D*                                  DefaultTexture;                                           // 0x03B0(0x0004)
	class UTexture2D*                                  WireframeTexture;                                         // 0x03B4(0x0004)
	class UTexture2D*                                  WhiteSquareTexture;                                       // 0x03B8(0x0004)
	class UTexture2D*                                  LargeVertex;                                              // 0x03BC(0x0004)
	class UTexture2D*                                  BSPVertex;                                                // 0x03C0(0x0004)
	TArray<struct FString>                             DeferredExecs;                                            // 0x03C4(0x000C)
	class AGameReplicationInfo*                        GRI;                                                      // 0x03D0(0x0004)
	TEnumAsByte<ENetMode>                              NetMode;                                                  // 0x03D4(0x0001)
	TEnumAsByte<ETravelType>                           NextTravelType;                                           // 0x03D5(0x0001)
	TEnumAsByte<EMobileFixedLightmapScale>             FixedLightmapScale;                                       // 0x03D6(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03D7(0x0001) MISSED OFFSET
	struct FString                                     ComputerName;                                             // 0x03D8(0x000C)
	struct FString                                     EngineVersion;                                            // 0x03E4(0x000C)
	struct FString                                     MinNetVersion;                                            // 0x03F0(0x000C)
	class AGameInfo*                                   Game;                                                     // 0x03FC(0x0004)
	float                                              StallZ;                                                   // 0x0400(0x0004)
	float                                              WorldGravityZ;                                            // 0x0404(0x0004)
	float                                              DefaultGravityZ;                                          // 0x0408(0x0004)
	float                                              GlobalGravityZ;                                           // 0x040C(0x0004)
	float                                              RBPhysicsGravityScaling;                                  // 0x0410(0x0004)
	class ANavigationPoint*                            NavigationPointList;                                      // 0x0414(0x0004)
	class AController*                                 ControllerList;                                           // 0x0418(0x0004)
	class APawn*                                       PawnList;                                                 // 0x041C(0x0004)
	class ACoverLink*                                  CoverList;                                                // 0x0420(0x0004)
	class APylon*                                      PylonList;                                                // 0x0424(0x0004)
	class AProjectile*                                 ProjectileList;                                           // 0x0428(0x0004)
	TArray<class UAudioComponent*>                     HighPriorityAudioComponents;                              // 0x042C(0x000C)
	float                                              MoveRepSize;                                              // 0x0438(0x0004)
	TArray<struct FNetViewer>                          ReplicationViewers;                                       // 0x043C(0x000C)
	struct FString                                     NextURL;                                                  // 0x0448(0x000C)
	float                                              NextSwitchCountdown;                                      // 0x0454(0x0004)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0458(0x0004)
	struct FVector                                     DefaultColorScale;                                        // 0x045C(0x000C)
	TArray<class UClass*>                              GameTypesSupportedOnThisMap;                              // 0x0468(0x000C)
	class UClass*                                      GameTypeForPIE;                                           // 0x0474(0x0004) (ExportObject)
	TArray<class UObject*>                             ClientDestroyedActorContent;                              // 0x0478(0x000C)
	TArray<struct FName>                               PreparingLevelNames;                                      // 0x0484(0x000C)
	struct FName                                       CommittedPersistentLevelName;                             // 0x0490(0x0008)
	class UAudioComponent*                             MusicComp;                                                // 0x0498(0x0004)
	struct FMusicTrackStruct                           CurrentMusicTrack;                                        // 0x049C(0x0024)
	struct FMusicTrackStruct                           ReplicatedMusicTrack;                                     // 0x04C0(0x0024) (Edit)
	struct FString                                     Title;                                                    // 0x04E4(0x000C)
	struct FString                                     Author;                                                   // 0x04F0(0x000C)
	class UMapInfo*                                    MyMapInfo;                                                // 0x04FC(0x0004)
	struct FString                                     EmitterPoolClassPath;                                     // 0x0500(0x000C)
	class AEmitterPool*                                MyEmitterPool;                                            // 0x050C(0x0004)
	struct FString                                     DecalManagerClassPath;                                    // 0x0510(0x000C)
	class ADecalManager*                               MyDecalManager;                                           // 0x051C(0x0004)
	struct FString                                     FractureManagerClassPath;                                 // 0x0520(0x000C)
	class AFractureManager*                            MyFractureManager;                                        // 0x052C(0x0004)
	struct FString                                     ParticleEventManagerClassPath;                            // 0x0530(0x000C)
	class AParticleEventManager*                       MyParticleEventManager;                                   // 0x053C(0x0004)
	float                                              MaxPhysicsDeltaTime;                                      // 0x0540(0x0004)
	int                                                MaxPhysicsSubsteps;                                       // 0x0544(0x0004)
	struct FPhysXSceneProperties                       PhysicsProperties;                                        // 0x0548(0x003C)
	TArray<struct FCompartmentRunList>                 CompartmentRunFrames;                                     // 0x0584(0x000C)
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                          // 0x0590(0x0004)
	class UPhysicsLODVerticalDestructible*             DestructibleVertical;                                     // 0x0594(0x0004)
	struct FPhysXVerticalProperties                    VerticalProperties;                                       // 0x0598(0x0018)
	float                                              ChanceOfPhysicsChunkOverride;                             // 0x05B0(0x0004)
	float                                              MaxExplosionChunkSize;                                    // 0x05B4(0x0004)
	float                                              MaxDamageChunkSize;                                       // 0x05B8(0x0004)
	float                                              FractureExplosionVelScale;                                // 0x05BC(0x0004)
	int                                                MaxNumFacturedChunksToSpawnInAFrame;                      // 0x05C0(0x0004)
	int                                                NumFacturedChunksSpawnedThisFrame;                        // 0x05C4(0x0004)
	float                                              FracturedMeshWeaponDamage;                                // 0x05C8(0x0004)
	TArray<struct FActorArray>                         SpecialActorsLists;                                       // 0x05CC(0x000C)
	TArray<class AActor*>                              FastOverlapListOne;                                       // 0x05D8(0x000C)
	TArray<class AActor*>                              FastOverlapListTwo;                                       // 0x05E4(0x000C)
	TArray<class AActor*>                              FastOverlapListThree;                                     // 0x05F0(0x000C)
	TArray<class AActor*>                              FastOverlapListFour;                                      // 0x05FC(0x000C)
	TArray<class AActor*>                              FastOverlapListFive;                                      // 0x0608(0x000C)
	TArray<class AActor*>                              FastOverlapListSix;                                       // 0x0614(0x000C)
	TArray<struct FEnemyMaterialMapping>               EnemyMaterialMappings;                                    // 0x0620(0x000C)
	struct FMap_Mirror                                 ScreenMessages;                                           // 0x062C(0x003C)
	TArray<struct FScreenMessageString>                PriorityScreenMessages;                                   // 0x0668(0x000C)
	float                                              BSPCoplanarError;                                         // 0x0674(0x0004)
	float                                              BSPModelGridXY;                                           // 0x0678(0x0004)
	float                                              BSPModelGridZ;                                            // 0x067C(0x0004)
	class ULightmassLevelSettings*                     LMLevelSettings;                                          // 0x0680(0x0004) (ExportObject)
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                        // 0x0684(0x003C) (ExportObject)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x06C0(0x003C) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathConstraintCache
	unsigned char                                      UnknownData02[0x3C];                                      // 0x06FC(0x003C) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathGoalEvaluatorCache

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldInfo");
		return ptr;
	}


	void GetActorWithTag();
	void PlayHighPrioritySound();
	void FindEnvironmentVolume();
	void STATIC_GetWorldInfo();
	void GetWorldFractureSettings();
	void DoMemoryTracking();
	void GetDemoRewindPoints();
	void GetDemoFrameInfo();
	void IsPlayingDemo();
	void IsRecordingDemo();
	void GetDetailMode();
	void GetMapName();
	void SetMapInfo();
	void GetMapInfo();
	void SetSeamlessTravelMidpointPause();
	void IsInSeamlessTravel();
	void SeamlessTravel();
	void CommitMapChange();
	void CancelPendingMapChange();
	void IsMapChangeReady();
	void IsPreparingMapChange();
	void PrepareMapChange();
	void NotifyMatchStarted();
	void AllPawns();
	void AllControllers();
	void NavigationPointCheck();
	void RadiusNavigationPoints();
	void AllNavigationPoints();
	void Reset();
	void PostBeginPlay();
	void PreBeginPlay();
	void ThisIsNeverExecuted();
	void ServerTravel();
	void GetGameClass();
	void GetAddressURL();
	void VerifyNavList();
	void ForceGarbageCollection();
	void STATIC_IsPlayInEditor();
	void STATIC_IsSteamBuild();
	void STATIC_IsConsoleBuild();
	void STATIC_IsDemoBuild();
	void GetLocalURL();
	void SetLevelRBGravity();
	void GetAllRootSequences();
	void GetGameSequence();
	void GetGravityZ();
	void UpdateMusicTrack();
	void STATIC_IsMenuLevel();
	void AddOnScreenDebugMessage();
	void ReplicatedEvent();
	void GetNavMeshPathGoalEvaluatorFromCache();
	void GetNavMeshPathConstraintFromCache();
	void ReleaseCachedConstraintsAndEvaluators();
};


// Class Engine.Inventory
// 0x004C (0x0268 - 0x021C)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                                // 0x021C(0x0004)
	class AInventoryManager*                           InvManager;                                               // 0x0220(0x0004)
	struct FString                                     ItemName;                                                 // 0x0224(0x000C)
	unsigned long                                      bRenderOverlays : 1;                                      // 0x0230(0x0004)
	unsigned long                                      bReceiveOwnerEvents : 1;                                  // 0x0230(0x0004)
	unsigned long                                      bDropOnDeath : 1;                                         // 0x0230(0x0004)
	unsigned long                                      bDelayedSpawn : 1;                                        // 0x0230(0x0004)
	unsigned long                                      bPredictRespawns : 1;                                     // 0x0230(0x0004)
	float                                              RespawnTime;                                              // 0x0234(0x0004)
	float                                              MaxDesireability;                                         // 0x0238(0x0004)
	struct FString                                     PickupMessage;                                            // 0x023C(0x000C)
	class USoundCue*                                   PickupSound;                                              // 0x0248(0x0004)
	struct FString                                     PickupForce;                                              // 0x024C(0x000C)
	class UClass*                                      DroppedPickupClass;                                       // 0x0258(0x0004)
	class UPrimitiveComponent*                         DroppedPickupMesh;                                        // 0x025C(0x0004)
	class UPrimitiveComponent*                         PickupFactoryMesh;                                        // 0x0260(0x0004)
	class UParticleSystemComponent*                    DroppedPickupParticles;                                   // 0x0264(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Inventory");
		return ptr;
	}


	void OwnerEvent();
	void STATIC_GetLocalString();
	void DropFrom();
	void DenyPickupQuery();
	void ItemRemovedFromInvManager();
	void ClientGivenTo();
	void GivenTo();
	void AnnouncePickup();
	void GiveTo();
	void STATIC_DetourWeight();
	void STATIC_BotDesireability();
	void Destroyed();
	void GetHumanReadableName();
	void ActiveRenderOverlays();
	void RenderOverlays();
};


// Class Engine.Weapon
// 0x00A4 (0x030C - 0x0268)
class AWeapon : public AInventory
{
public:
	unsigned char                                      CurrentFireMode;                                          // 0x0268(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	TArray<struct FName>                               FiringStatesArray;                                        // 0x026C(0x000C)
	TArray<TEnumAsByte<EWeaponFireType>>               WeaponFireTypes;                                          // 0x0278(0x000C)
	TArray<class UClass*>                              WeaponProjectiles;                                        // 0x0284(0x000C)
	TArray<float>                                      FireInterval;                                             // 0x0290(0x000C)
	TArray<float>                                      Spread;                                                   // 0x029C(0x000C)
	TArray<float>                                      InstantHitDamage;                                         // 0x02A8(0x000C)
	TArray<float>                                      InstantHitMomentum;                                       // 0x02B4(0x000C)
	TArray<class UClass*>                              InstantHitDamageTypes;                                    // 0x02C0(0x000C)
	float                                              EquipTime;                                                // 0x02CC(0x0004)
	float                                              PutDownTime;                                              // 0x02D0(0x0004)
	struct FVector                                     FireOffset;                                               // 0x02D4(0x000C)
	unsigned long                                      bWeaponPutDown : 1;                                       // 0x02E0(0x0004)
	unsigned long                                      bCanThrow : 1;                                            // 0x02E0(0x0004)
	unsigned long                                      bWasOptionalSet : 1;                                      // 0x02E0(0x0004)
	unsigned long                                      bWasDoNotActivate : 1;                                    // 0x02E0(0x0004)
	unsigned long                                      bInstantHit : 1;                                          // 0x02E0(0x0004)
	unsigned long                                      bMeleeWeapon : 1;                                         // 0x02E0(0x0004)
	float                                              WeaponRange;                                              // 0x02E4(0x0004)
	class UMeshComponent*                              Mesh;                                                     // 0x02E8(0x0004)
	float                                              DefaultAnimSpeed;                                         // 0x02EC(0x0004)
	float                                              Priority;                                                 // 0x02F0(0x0004)
	class AAIController*                               AIController;                                             // 0x02F4(0x0004) (Parm)
	TArray<unsigned char>                              ShouldFireOnRelease;                                      // 0x02F8(0x000C)
	float                                              AIRating;                                                 // 0x0304(0x0004)
	float                                              CachedMaxRange;                                           // 0x0308(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Weapon");
		return ptr;
	}


	void CacheAIController();
	void WeaponIsDown();
	void StillFiring();
	void ShouldRefire();
	void NotifyWeaponFinishedFiring();
	void NotifyWeaponFired();
	void HandleFinishedFiring();
	void TryPutDown();
	void GetPhysicalFireStartLoc();
	void GetMuzzleLoc();
	void CustomFire();
	void ProjectileFire();
	void ProcessInstantHit();
	void InstantFire();
	void STATIC_PassThroughDamage();
	void CalcWeaponFire();
	void GetTraceOwner();
	void GetTraceRange();
	void GetAdjustedAim();
	void FireAmmunition();
	void FireModeUpdated();
	void SetCurrentFireMode();
	void SendToFiringState();
	void ForceEndFire();
	void EndFire();
	void ServerStopFire();
	void StopFire();
	void BeginFire();
	void ServerStartFire();
	void StartFire();
	void WeaponCalcCamera();
	void ClientCheckWeaponSet();
	void ClientWeaponSet();
	void ClientGivenTo();
	void AdjustFOVAngle();
	void GetViewAxes();
	void DetachWeapon();
	void AttachWeaponTo();
	void ClearFlashLocation();
	void SetFlashLocation();
	void ClearFlashCount();
	void IncrementFlashCount();
	void WeaponEmpty();
	void DenyPickupQuery();
	void PutDownWeapon();
	void Activate();
	void TimeWeaponEquipping();
	void TimeWeaponPutDown();
	void RefireCheckTimer();
	void TimeWeaponFiring();
	void GetFireInterval();
	void PlayFiringSound();
	void StopFireEffects();
	void PlayFireEffects();
	void StopWeaponAnimation();
	void PlayWeaponAnimation();
	void WeaponPlaySound();
	void GetWeaponAnimNodeSeq();
	void FireOnRelease();
	void SuggestDefenseStyle();
	void SuggestAttackStyle();
	void CanAttack();
	void RangedAttackTime();
	void RecommendLongRangedAttack();
	void FocusOnLeader();
	void RecommendRangedAttack();
	void GetWeaponRating();
	void RelativeStrengthVersus();
	void GetAIRating();
	void GetDamageRadius();
	void MaxRange();
	void AddSpread();
	void GetProjectileClass();
	void ClearAllPendingFire();
	void ClearPendingFire();
	void SetPendingFire();
	void PendingFire();
	void GetPendingFireLength();
	void HasAnyAmmo();
	void HasAmmo();
	void AddAmmo();
	void ConsumeAmmo();
	void GetWeaponDebug();
	void DisplayDebug();
	void DenyClientWeaponSet();
	void IsFiring();
	void ClientWeaponThrown();
	void CanThrow();
	void DropFrom();
	void DoOverridePrevWeapon();
	void DoOverrideNextWeapon();
	void HolderDied();
	void IsActiveWeapon();
	void ItemRemovedFromInvManager();
	void Destroyed();
};


// Class Engine.InventoryManager
// 0x001C (0x0238 - 0x021C)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                           // 0x021C(0x0004)
	class AWeapon*                                     PendingWeapon;                                            // 0x0220(0x0004)
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                              // 0x0224(0x0004)
	unsigned long                                      bMustHoldWeapon : 1;                                      // 0x0228(0x0004)
	TArray<int>                                        PendingFire;                                              // 0x022C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InventoryManager");
		return ptr;
	}


	void UpdateController();
	void ClientSyncWeapon();
	void ClientWeaponSet();
	void ChangedWeapon();
	void CancelWeaponChange();
	void SetPendingWeapon();
	void InternalSetCurrentWeapon();
	void ServerSetCurrentWeapon();
	void SetCurrentWeapon();
	void NextWeapon();
	void PrevWeapon();
	void SwitchToBestWeapon();
	void GetBestWeapon();
	void GetWeaponRatingFor();
	void IsActiveWeapon();
	void StopFire();
	void StartFire();
	void DrawHUD();
	void OwnerEvent();
	void OwnerDied();
	void ModifyDamage();
	void DiscardInventory();
	void RemoveClassFromInventory();
	void RemoveFromInventory();
	void AddInventory();
	void CreateInventory();
	void FindInventoryType();
	void HandlePickupQuery();
	void Destroyed();
	void SetupFor();
	void InventoryActors();
	void ClearAllPendingFire();
	void IsPendingFire();
	void ClearPendingFire();
	void SetPendingFire();
	void GetPendingFireLength();
	void PostBeginPlay();
};


// Class Engine.Keypoint
// 0x0000 (0x021C - 0x021C)
class AKeypoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Keypoint");
		return ptr;
	}

};


// Class Engine.TargetPoint
// 0x0000 (0x021C - 0x021C)
class ATargetPoint : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0004 (0x0220 - 0x021C)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x0014 (0x0230 - 0x021C)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                             // 0x021C(0x0004)
	unsigned long                                      bIsPlaying : 1;                                           // 0x0220(0x0004)
	unsigned long                                      bReversePlayback : 1;                                     // 0x0220(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x0220(0x0004)
	float                                              PlayRate;                                                 // 0x0224(0x0004)
	float                                              Position;                                                 // 0x0228(0x0004)
	float                                              ClientSidePositionErrorTolerance;                         // 0x022C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}


	void CheckPriorityRefresh();
	void Update();
};


// Class Engine.NavigationPoint
// 0x00D8 (0x02F4 - 0x021C)
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                            // 0x021C(0x0004)
	unsigned long                                      bTransientEndPoint : 1;                                   // 0x021C(0x0004)
	unsigned long                                      bHideEditorPaths : 1;                                     // 0x021C(0x0004)
	unsigned long                                      bCanReach : 1;                                            // 0x021C(0x0004)
	unsigned long                                      bBlocked : 1;                                             // 0x021C(0x0004)
	unsigned long                                      bOneWayPath : 1;                                          // 0x021C(0x0004)
	unsigned long                                      bNeverUseStrafing : 1;                                    // 0x021C(0x0004)
	unsigned long                                      bAlwaysUseStrafing : 1;                                   // 0x021C(0x0004)
	unsigned long                                      bForceNoStrafing : 1;                                     // 0x021C(0x0004)
	unsigned long                                      bAutoBuilt : 1;                                           // 0x021C(0x0004)
	unsigned long                                      bSpecialMove : 1;                                         // 0x021C(0x0004)
	unsigned long                                      bNoAutoConnect : 1;                                       // 0x021C(0x0004)
	unsigned long                                      bNotBased : 1;                                            // 0x021C(0x0004)
	unsigned long                                      bPathsChanged : 1;                                        // 0x021C(0x0004)
	unsigned long                                      bDestinationOnly : 1;                                     // 0x021C(0x0004)
	unsigned long                                      bSourceOnly : 1;                                          // 0x021C(0x0004)
	unsigned long                                      bSpecialForced : 1;                                       // 0x021C(0x0004)
	unsigned long                                      bMustBeReachable : 1;                                     // 0x021C(0x0004)
	unsigned long                                      bBlockable : 1;                                           // 0x021C(0x0004)
	unsigned long                                      bFlyingPreferred : 1;                                     // 0x021C(0x0004)
	unsigned long                                      bMayCausePain : 1;                                        // 0x021C(0x0004)
	unsigned long                                      bAlreadyVisited : 1;                                      // 0x021C(0x0004)
	unsigned long                                      bVehicleDestination : 1;                                  // 0x021C(0x0004)
	unsigned long                                      bMakeSourceOnly : 1;                                      // 0x021C(0x0004)
	unsigned long                                      bMustTouchToReach : 1;                                    // 0x021C(0x0004)
	unsigned long                                      bCanWalkOnToReach : 1;                                    // 0x021C(0x0004)
	unsigned long                                      bBuildLongPaths : 1;                                      // 0x021C(0x0004)
	unsigned long                                      bBlockedForVehicles : 1;                                  // 0x021C(0x0004)
	unsigned long                                      bPreferredVehiclePath : 1;                                // 0x021C(0x0004)
	unsigned long                                      bHasCrossLevelPaths : 1;                                  // 0x021C(0x0004)
	unsigned long                                      bShouldSaveForCheckpoint : 1;                             // 0x021C(0x0004)
	struct FNavigationOctreeObject                     NavOctreeObject;                                          // 0x0220(0x0034)
	TArray<class UReachSpec*>                          PathList;                                                 // 0x0254(0x000C)
	TArray<struct FActorReference>                     EditorProscribedPaths;                                    // 0x0260(0x000C) (ExportObject)
	TArray<struct FActorReference>                     EditorForcedPaths;                                        // 0x026C(0x000C) (ExportObject)
	TArray<struct FActorReference>                     Volumes;                                                  // 0x0278(0x000C)
	int                                                visitedWeight;                                            // 0x0284(0x0004)
	int                                                bestPathWeight;                                           // 0x0288(0x0004)
	class ANavigationPoint*                            nextNavigationPoint;                                      // 0x028C(0x0004)
	class ANavigationPoint*                            nextOrdered;                                              // 0x0290(0x0004)
	class ANavigationPoint*                            prevOrdered;                                              // 0x0294(0x0004)
	class ANavigationPoint*                            previousPath;                                             // 0x0298(0x0004)
	int                                                Cost;                                                     // 0x029C(0x0004)
	int                                                ExtraCost;                                                // 0x02A0(0x0004)
	int                                                TransientCost;                                            // 0x02A4(0x0004)
	int                                                FearCost;                                                 // 0x02A8(0x0004)
	TArray<struct FDebugNavCost>                       CostArray;                                                // 0x02AC(0x000C)
	class ADroppedPickup*                              InventoryCache;                                           // 0x02B8(0x0004)
	float                                              InventoryDist;                                            // 0x02BC(0x0004)
	float                                              LastDetourWeight;                                         // 0x02C0(0x0004)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x02C4(0x0004)
	struct FCylinder                                   MaxPathSize;                                              // 0x02C8(0x0008)
	struct FGuid                                       NavGuid;                                                  // 0x02D0(0x0010)
	class USpriteComponent*                            GoodSprite;                                               // 0x02E0(0x0004)
	class USpriteComponent*                            BadSprite;                                                // 0x02E4(0x0004)
	int                                                NetworkID;                                                // 0x02E8(0x0004)
	class APawn*                                       AnchoredPawn;                                             // 0x02EC(0x0004)
	float                                              LastAnchoredPawnTime;                                     // 0x02F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationPoint");
		return ptr;
	}


	void GetDebugAbbrev();
	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
	void ShutDown();
	void OnToggle();
	void IsOnDifferentNetwork();
	void STATIC_GetAllNavInRadius();
	void STATIC_GetNearestNavToPoint();
	void STATIC_GetNearestNavToActor();
	void ProceedWithMove();
	void SuggestMovePreparation();
	void DetourWeight();
	void Accept();
	void SpecialCost();
	void CanTeleport();
	void IsUsableAnchorFor();
	void GetReachSpecTo();
	void GetBoundingCylinder();
};


// Class Engine.Pylon
// 0x0064 (0x0358 - 0x02F4)
class APylon : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;                    // 0x02F4(0x0004)
	struct FPointer                                    NavMeshPtr;                                               // 0x02F8(0x0004)
	struct FPointer                                    ObstacleMesh;                                             // 0x02FC(0x0004)
	struct FPointer                                    DynamicObstacleMesh;                                      // 0x0300(0x0004)
	struct FPointer                                    WorkingSetPtr;                                            // 0x0304(0x0004)
	struct FPointer                                    PathObjectsThatAffectThisPylon;                           // 0x0308(0x0004)
	TArray<struct FVector>                             NextPassSeedList;                                         // 0x030C(0x000C)
	struct FOctreeElementId                            OctreeId;                                                 // 0x0318(0x0008)
	struct FPointer                                    OctreeIWasAddedTo;                                        // 0x0320(0x0004)
	class APylon*                                      NextPylon;                                                // 0x0324(0x0004)
	TArray<class AVolume*>                             ExpansionVolumes;                                         // 0x0328(0x000C)
	float                                              ExpansionRadius;                                          // 0x0334(0x0004)
	float                                              MaxExpansionRadius;                                       // 0x0338(0x0004)
	class UDrawPylonRadiusComponent*                   PylonRadiusPreview;                                       // 0x033C(0x0004)
	unsigned long                                      bImportedMesh : 1;                                        // 0x0340(0x0004)
	unsigned long                                      bUseExpansionSphereOverride : 1;                          // 0x0340(0x0004)
	unsigned long                                      bNeedsCostCheck : 1;                                      // 0x0340(0x0004)
	unsigned long                                      bDrawEdgePolys : 1;                                       // 0x0340(0x0004)
	unsigned long                                      bDrawPolyBounds : 1;                                      // 0x0340(0x0004)
	unsigned long                                      bRenderInShowPaths : 1;                                   // 0x0340(0x0004)
	unsigned long                                      bDrawWalkableSurface : 1;                                 // 0x0340(0x0004)
	unsigned long                                      bDrawObstacleSurface : 1;                                 // 0x0340(0x0004)
	unsigned long                                      bBuildThisPylon : 1;                                      // 0x0340(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x0340(0x0004)
	unsigned long                                      bForceObstacleMeshCollision : 1;                          // 0x0340(0x0004)
	struct FVector                                     ExpansionSphereCenter;                                    // 0x0344(0x000C)
	class UNavMeshRenderingComponent*                  RenderingComp;                                            // 0x0350(0x0004)
	int                                                DebugEdgeCount;                                           // 0x0354(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pylon");
		return ptr;
	}


	void CanReachPylon();
	void OnToggle();
	void IsEnabled();
	void SetEnabled();
};


// Class Engine.CoverLink
// 0x0085 (0x0379 - 0x02F4)
class ACoverLink : public ANavigationPoint
{
public:
	unsigned long                                      GLOBAL_bUseSlotMarkers : 1;                               // 0x02F4(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x02F4(0x0004)
	unsigned long                                      bClaimAllSlots : 1;                                       // 0x02F4(0x0004)
	unsigned long                                      bAutoSort : 1;                                            // 0x02F4(0x0004)
	unsigned long                                      bAutoAdjust : 1;                                          // 0x02F4(0x0004)
	unsigned long                                      bCircular : 1;                                            // 0x02F4(0x0004)
	unsigned long                                      bLooped : 1;                                              // 0x02F4(0x0004)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x02F4(0x0004)
	unsigned long                                      bDynamicCover : 1;                                        // 0x02F4(0x0004)
	unsigned long                                      bDebug_FireLinks : 1;                                     // 0x02F4(0x0004)
	unsigned long                                      bDebug_ExposedLinks : 1;                                  // 0x02F4(0x0004)
	unsigned long                                      bDebug_DangerLinks : 1;                                   // 0x02F4(0x0004)
	TArray<struct FCoverSlot>                          Slots;                                                    // 0x02F8(0x000C)
	TArray<struct FDynamicLinkInfo>                    DynamicLinkInfos;                                         // 0x0304(0x000C)
	TArray<class APawn*>                               Claims;                                                   // 0x0310(0x000C)
	float                                              InvalidateDistance;                                       // 0x031C(0x0004)
	float                                              MaxFireLinkDist;                                          // 0x0320(0x0004)
	struct FVector                                     CircularOrigin;                                           // 0x0324(0x000C)
	float                                              CircularRadius;                                           // 0x0330(0x0004)
	float                                              AlignDist;                                                // 0x0334(0x0004)
	float                                              AutoCoverSlotInterval;                                    // 0x0338(0x0004)
	float                                              StandHeight;                                              // 0x033C(0x0004)
	float                                              MidHeight;                                                // 0x0340(0x0004)
	struct FVector                                     StandingLeanOffset;                                       // 0x0344(0x000C)
	struct FVector                                     CrouchLeanOffset;                                         // 0x0350(0x000C)
	struct FVector                                     PopupOffset;                                              // 0x035C(0x000C)
	float                                              SlipDist;                                                 // 0x0368(0x0004)
	float                                              TurnDist;                                                 // 0x036C(0x0004)
	float                                              DangerScale;                                              // 0x0370(0x0004)
	class ACoverLink*                                  NextCoverLink;                                            // 0x0374(0x0004)
	TEnumAsByte<ECoverLocationDescription>             LocationDescription;                                      // 0x0378(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverLink");
		return ptr;
	}


	void GetDebugAbbrev();
	void GetLocationDescription();
	void GetDebugString();
	void AddCoverSlot();
	void GetSwatTurnTarget();
	void ShutDown();
	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void OnToggle();
	void IsEnabled();
	void AutoAdjustSlot();
	void OnModifyCover();
	void NotifySlotOwnerCoverDisabled();
	void SetSlotEnabled();
	void SetDisabled();
	void GetSlotActions();
	void HasFireLinkTo();
	void GetFireLinkTo();
	void AllowLeftTransition();
	void AllowRightTransition();
	void GetSlotIdxToRight();
	void GetSlotIdxToLeft();
	void IsRightEdgeSlot();
	void IsLeftEdgeSlot();
	void IsEdgeSlot();
	void FindSlots();
	void IsStationarySlot();
	void IsValidClaim();
	void UnClaim();
	void Claim();
	void SetInvalidUntil();
	void IsExposedTo();
	void GetSlotMarker();
	void GetSlotViewPoint();
	void GetSlotRotation();
	void GetSlotLocation();
};


// Class Engine.CoverSlotMarker
// 0x000C (0x0300 - 0x02F4)
class ACoverSlotMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                               // 0x02F4(0x0008)
	unsigned long                                      bLastChoice : 1;                                          // 0x02FC(0x0004)
	unsigned long                                      bIgnoreSizeLimits : 1;                                    // 0x02FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverSlotMarker");
		return ptr;
	}


	void GetDebugString();
	void GetDebugAbbrev();
	void IsValidClaim();
	void SetSlotEnabled();
	void GetSlotRotation();
	void GetSlotLocation();
};


// Class Engine.DoorMarker
// 0x0010 (0x0304 - 0x02F4)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                                   // 0x02F4(0x0004)
	TEnumAsByte<EDoorType>                             DoorType;                                                 // 0x02F8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F9(0x0003) MISSED OFFSET
	class AActor*                                      DoorTrigger;                                              // 0x02FC(0x0004)
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                           // 0x0300(0x0004)
	unsigned long                                      bInitiallyClosed : 1;                                     // 0x0300(0x0004)
	unsigned long                                      bBlockedWhenClosed : 1;                                   // 0x0300(0x0004)
	unsigned long                                      bDoorOpen : 1;                                            // 0x0300(0x0004)
	unsigned long                                      bTempDisabledCollision : 1;                               // 0x0300(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DoorMarker");
		return ptr;
	}


	void SuggestMovePreparation();
	void ProceedWithMove();
	void SpecialHandling();
	void MoverClosed();
	void MoverOpened();
	void PostBeginPlay();
};


// Class Engine.DynamicAnchor
// 0x0004 (0x02F8 - 0x02F4)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                              // 0x02F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicAnchor");
		return ptr;
	}

};


// Class Engine.Ladder
// 0x0008 (0x02FC - 0x02F4)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                                 // 0x02F4(0x0004)
	class ALadder*                                     LadderList;                                               // 0x02F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Ladder");
		return ptr;
	}


	void SuggestMovePreparation();
};


// Class Engine.AutoLadder
// 0x0000 (0x02FC - 0x02FC)
class AAutoLadder : public ALadder
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoLadder");
		return ptr;
	}

};


// Class Engine.LiftCenter
// 0x0020 (0x0314 - 0x02F4)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                                   // 0x02F4(0x0004)
	float                                              MaxDist2D;                                                // 0x02F8(0x0004)
	struct FVector                                     LiftOffset;                                               // 0x02FC(0x000C)
	unsigned long                                      bJumpLift : 1;                                            // 0x0308(0x0004)
	float                                              CollisionHeight;                                          // 0x030C(0x0004)
	class ATrigger*                                    LiftTrigger;                                              // 0x0310(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftCenter");
		return ptr;
	}


	void ProceedWithMove();
	void SuggestMovePreparation();
	void SpecialHandling();
	void PostBeginPlay();
};


// Class Engine.LiftExit
// 0x0008 (0x02FC - 0x02F4)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                             // 0x02F4(0x0004)
	unsigned long                                      bExitOnly : 1;                                            // 0x02F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftExit");
		return ptr;
	}


	void SuggestMovePreparation();
	void WaitForLift();
	void CanBeReachedFromLiftBy();
};


// Class Engine.MantleMarker
// 0x0008 (0x02FC - 0x02F4)
class AMantleMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                               // 0x02F4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MantleMarker");
		return ptr;
	}

};


// Class Engine.Objective
// 0x0000 (0x02F4 - 0x02F4)
class AObjective : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Objective");
		return ptr;
	}

};


// Class Engine.PathNode
// 0x0004 (0x02F8 - 0x02F4)
class APathNode : public ANavigationPoint
{
public:
	int                                                ConnectionSet;                                            // 0x02F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathNode");
		return ptr;
	}


	void GetDebugAbbrev();
};


// Class Engine.VolumePathNode
// 0x0018 (0x0310 - 0x02F8)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                           // 0x02F8(0x0004)
	float                                              StartingHeight;                                           // 0x02FC(0x0004)
	float                                              MaximumFlightDistance;                                    // 0x0300(0x0004)
	unsigned long                                      bRestoreCollisionCylinder : 1;                            // 0x0304(0x0004)
	unsigned long                                      bFirstStore : 1;                                          // 0x0304(0x0004)
	float                                              StoredRadius;                                             // 0x0308(0x0004)
	float                                              StoredHeight;                                             // 0x030C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumePathNode");
		return ptr;
	}

};


// Class Engine.PickupFactory
// 0x001C (0x0310 - 0x02F4)
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                                 // 0x02F4(0x0004)
	unsigned long                                      bPickupHidden : 1;                                        // 0x02F4(0x0004) (Edit)
	unsigned long                                      bPredictRespawns : 1;                                     // 0x02F4(0x0004)
	unsigned long                                      bIsSuperItem : 1;                                         // 0x02F4(0x0004)
	unsigned long                                      bRespawnPaused : 1;                                       // 0x02F4(0x0004)
	class UClass*                                      InventoryType;                                            // 0x02F8(0x0004) (Edit)
	float                                              RespawnEffectTime;                                        // 0x02FC(0x0004)
	float                                              MaxDesireability;                                         // 0x0300(0x0004)
	class UPrimitiveComponent*                         PickupMesh;                                               // 0x0304(0x0004)
	class APickupFactory*                              ReplacementFactory;                                       // 0x0308(0x0004)
	class APickupFactory*                              OriginalFactory;                                          // 0x030C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PickupFactory");
		return ptr;
	}


	void DelayRespawn();
	void Destroyed();
	void SetPickupVisible();
	void SetPickupHidden();
	void RespawnEffect();
	void GetRespawnTime();
	void RecheckValidTouch();
	void PickedUpBy();
	void GiveTo();
	void ReadyToPickup();
	void SpawnCopyFor();
	void DetourWeight();
	void StartSleeping();
	void SetRespawn();
	void CheckForErrors();
	void Reset();
	void STATIC_StaticPrecache();
	void SetPickupMesh();
	void ShutDown();
	void SetInitialState();
	void InitializePickup();
	void PreBeginPlay();
	void ReplicatedEvent();
};


// Class Engine.PlayerStart
// 0x0008 (0x02FC - 0x02F4)
class APlayerStart : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x02F4(0x0004)
	unsigned long                                      bPrimaryStart : 1;                                        // 0x02F4(0x0004)
	int                                                TeamIndex;                                                // 0x02F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}


	void OnToggle();
};


// Class Engine.PortalMarker
// 0x0004 (0x02F8 - 0x02F4)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                                 // 0x02F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalMarker");
		return ptr;
	}


	void CanTeleport();
};


// Class Engine.AISwitchablePylon
// 0x0004 (0x035C - 0x0358)
class AAISwitchablePylon : public APylon
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x0358(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AISwitchablePylon");
		return ptr;
	}


	void IsEnabled();
	void SetEnabled();
	void PostBeginPlay();
};


// Class Engine.DynamicPylon
// 0x0004 (0x035C - 0x0358)
class ADynamicPylon : public APylon
{
public:
	unsigned long                                      bMoving : 1;                                              // 0x0358(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicPylon");
		return ptr;
	}


	void StoppedMoving();
	void StartedMoving();
	void FlushDynamicEdges();
	void RebuildDynamicEdges();
	void PostBeginPlay();
};


// Class Engine.Teleporter
// 0x0028 (0x031C - 0x02F4)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                                      // 0x02F4(0x000C)
	struct FName                                       ProductRequired;                                          // 0x0300(0x0008)
	unsigned long                                      bChangesVelocity : 1;                                     // 0x0308(0x0004)
	unsigned long                                      bChangesYaw : 1;                                          // 0x0308(0x0004)
	unsigned long                                      bReversesX : 1;                                           // 0x0308(0x0004)
	unsigned long                                      bReversesY : 1;                                           // 0x0308(0x0004)
	unsigned long                                      bReversesZ : 1;                                           // 0x0308(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0308(0x0004)
	unsigned long                                      bCanTeleportVehicles : 1;                                 // 0x0308(0x0004)
	struct FVector                                     TargetVelocity;                                           // 0x030C(0x000C)
	float                                              LastFired;                                                // 0x0318(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Teleporter");
		return ptr;
	}


	void SpecialHandling();
	void PostTouch();
	void Touch();
	void Accept();
	void PostBeginPlay();
	void CanTeleport();
};


// Class Engine.Note
// 0x000C (0x0228 - 0x021C)
class ANote : public AActor
{
public:
	struct FString                                     Text;                                                     // 0x021C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}

};


// Class Engine.Projectile
// 0x0040 (0x025C - 0x021C)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                                    // 0x021C(0x0004)
	float                                              MaxSpeed;                                                 // 0x0220(0x0004)
	unsigned long                                      bSwitchToZeroCollision : 1;                               // 0x0224(0x0004)
	unsigned long                                      bBlockedByInstigator : 1;                                 // 0x0224(0x0004)
	unsigned long                                      bBegunPlay : 1;                                           // 0x0224(0x0004)
	unsigned long                                      bRotationFollowsVelocity : 1;                             // 0x0224(0x0004)
	unsigned long                                      bNotBlockedByShield : 1;                                  // 0x0224(0x0004)
	class AActor*                                      ZeroCollider;                                             // 0x0228(0x0004)
	class UPrimitiveComponent*                         ZeroColliderComponent;                                    // 0x022C(0x0004)
	float                                              Damage;                                                   // 0x0230(0x0004)
	float                                              DamageRadius;                                             // 0x0234(0x0004)
	float                                              MomentumTransfer;                                         // 0x0238(0x0004)
	class UClass*                                      MyDamageType;                                             // 0x023C(0x0004)
	class USoundCue*                                   SpawnSound;                                               // 0x0240(0x0004)
	class USoundCue*                                   ImpactSound;                                              // 0x0244(0x0004)
	class AController*                                 InstigatorController;                                     // 0x0248(0x0004)
	class AActor*                                      ImpactedActor;                                            // 0x024C(0x0004)
	float                                              NetCullDistanceSquared;                                   // 0x0250(0x0004)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0254(0x0004)
	class AProjectile*                                 NextProjectile;                                           // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Projectile");
		return ptr;
	}


	void ApplyFluidSurfaceImpact();
	void STATIC_GetRange();
	void STATIC_StaticGetTimeToLocation();
	void GetTimeToLocation();
	void FellOutOfWorld();
	void IsStationary();
	void RandSpin();
	void Explode();
	void EncroachedBy();
	void HitWall();
	void ProcessTouch();
	void Touch();
	void HurtRadius();
	void Reset();
	void CanSplash();
	void GetTeamNum();
	void Init();
	void Destroyed();
	void PostBeginPlay();
	void PreBeginPlay();
	void EncroachingOn();
};


// Class Engine.RigidBodyBase
// 0x0000 (0x021C - 0x021C)
class ARigidBodyBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RigidBodyBase");
		return ptr;
	}

};


// Class Engine.SceneCaptureActor
// 0x0004 (0x0220 - 0x021C)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                             // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureActor");
		return ptr;
	}


	void OnToggle();
};


// Class Engine.SceneCapture2DActor
// 0x0004 (0x0224 - 0x0220)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DActor");
		return ptr;
	}

};


// Class Engine.SceneCaptureCubeMapActor
// 0x0008 (0x0228 - 0x0220)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x0220(0x0004)
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                         // 0x0224(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCubeMapActor");
		return ptr;
	}

};


// Class Engine.SceneCaptureReflectActor
// 0x0008 (0x0228 - 0x0220)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x0220(0x0004)
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                                      // 0x0224(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureReflectActor");
		return ptr;
	}

};


// Class Engine.SceneCapturePortalActor
// 0x0000 (0x0228 - 0x0228)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapturePortalActor");
		return ptr;
	}

};


// Class Engine.PortalTeleporter
// 0x0014 (0x023C - 0x0228)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                             // 0x0228(0x0004)
	int                                                TextureResolutionX;                                       // 0x022C(0x0004)
	int                                                TextureResolutionY;                                       // 0x0230(0x0004)
	class APortalMarker*                               MyMarker;                                                 // 0x0234(0x0004)
	unsigned long                                      bMovablePortal : 1;                                       // 0x0238(0x0004)
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                              // 0x0238(0x0004)
	unsigned long                                      bCanTeleportVehicles : 1;                                 // 0x0238(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalTeleporter");
		return ptr;
	}


	void StopsProjectile();
	void CreatePortalTexture();
	void TransformHitLocation();
	void TransformVectorDir();
	void TransformActor();
};


// Class Engine.StaticMeshActorBase
// 0x0000 (0x021C - 0x021C)
class AStaticMeshActorBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActorBase");
		return ptr;
	}

};


// Class Engine.StaticMeshActor
// 0x0008 (0x0224 - 0x021C)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x021C(0x0004)
	unsigned long                                      bDisableAutoBaseOnProcBuilding : 1;                       // 0x0220(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}


	void PreBeginPlay();
};


// Class Engine.StaticMeshCollectionActor
// 0x0010 (0x022C - 0x021C)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray<class UStaticMeshComponent*>                StaticMeshComponents;                                     // 0x021C(0x000C)
	int                                                MaxStaticMeshComponents;                                  // 0x0228(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshCollectionActor");
		return ptr;
	}

};


// Class Engine.StaticMeshActorBasedOnExtremeContent
// 0x001C (0x0238 - 0x021C)
class AStaticMeshActorBasedOnExtremeContent : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x021C(0x0004)
	TArray<struct FSMMaterialSetterDatum>              ExtremeContent;                                           // 0x0220(0x000C)
	TArray<struct FSMMaterialSetterDatum>              NonExtremeContent;                                        // 0x022C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActorBasedOnExtremeContent");
		return ptr;
	}


	void SetMaterialBasedOnExtremeContent();
	void PostBeginPlay();
};


// Class Engine.Trigger
// 0x000C (0x0228 - 0x021C)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                        // 0x021C(0x0004)
	unsigned long                                      bRecentlyTriggered : 1;                                   // 0x0220(0x0004)
	float                                              AITriggerDelay;                                           // 0x0224(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
	void StopsProjectile();
	void UnTrigger();
	void NotifyTriggered();
	void Touch();
};


// Class Engine.ActorComponent
// 0x0018 (0x0060 - 0x0048)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                                    // 0x0048(0x0004)
	class AActor*                                      Owner;                                                    // 0x004C(0x0004)
	unsigned long                                      bAttached : 1;                                            // 0x0050(0x0004)
	unsigned long                                      bTickInEditor : 1;                                        // 0x0050(0x0004)
	unsigned long                                      bNeedsReattach : 1;                                       // 0x0050(0x0004)
	unsigned long                                      bNeedsUpdateTransform : 1;                                // 0x0050(0x0004)
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                // 0x0054(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FName                                       CustomTag;                                                // 0x0058(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorComponent");
		return ptr;
	}


	void DetachFromAny();
	void ForceUpdate();
	void SetComponentRBFixed();
	void SetTickGroup();
};


// Class Engine.EngineTypes
// 0x0000 (0x003C - 0x003C)
class UEngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineTypes");
		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x018C (0x01EC - 0x0060)
class UAudioComponent : public UActorComponent
{
public:
	class USoundCue*                                   SoundCue;                                                 // 0x0060(0x0004)
	class USoundNode*                                  CueFirstNode;                                             // 0x0064(0x0004)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                       // 0x0068(0x000C)
	unsigned long                                      bUseOwnerLocation : 1;                                    // 0x0074(0x0004)
	unsigned long                                      bAutoPlay : 1;                                            // 0x0074(0x0004)
	unsigned long                                      bAutoDestroy : 1;                                         // 0x0074(0x0004)
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                              // 0x0074(0x0004)
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                         // 0x0074(0x0004)
	unsigned long                                      bWasOccluded : 1;                                         // 0x0074(0x0004)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x0074(0x0004)
	unsigned long                                      bWasPlaying : 1;                                          // 0x0074(0x0004)
	unsigned long                                      bAllowSpatialization : 1;                                 // 0x0074(0x0004)
	unsigned long                                      bFinished : 1;                                            // 0x0074(0x0004)
	unsigned long                                      bPreviewComponent : 1;                                    // 0x0074(0x0004)
	unsigned long                                      bIgnoreForFlushing : 1;                                   // 0x0074(0x0004)
	float                                              StereoBleed;                                              // 0x0078(0x0004)
	float                                              LFEBleed;                                                 // 0x007C(0x0004)
	unsigned long                                      bEQFilterApplied : 1;                                     // 0x0080(0x0004)
	unsigned long                                      bAlwaysPlay : 1;                                          // 0x0080(0x0004)
	unsigned long                                      bIsUISound : 1;                                           // 0x0080(0x0004)
	unsigned long                                      bIsMusic : 1;                                             // 0x0080(0x0004)
	unsigned long                                      bNoReverb : 1;                                            // 0x0080(0x0004)
	int                                                MobilePriority;                                           // 0x0084(0x0004)
	TArray<struct FPointer>                            WaveInstances;                                            // 0x0088(0x000C)
	TArray<unsigned char>                              SoundNodeData;                                            // 0x0094(0x000C)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00A0(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                                    // 0x00DC(0x003C)
	struct FPointer                                    Listener;                                                 // 0x0118(0x0004)
	float                                              PlaybackTime;                                             // 0x011C(0x0004)
	class APortalVolume*                               PortalVolume;                                             // 0x0120(0x0004)
	struct FVector                                     Location;                                                 // 0x0124(0x000C)
	struct FVector                                     ComponentLocation;                                        // 0x0130(0x000C)
	class AActor*                                      LastOwner;                                                // 0x013C(0x0004)
	float                                              SubtitlePriority;                                         // 0x0140(0x0004)
	float                                              FadeInStartTime;                                          // 0x0144(0x0004)
	float                                              FadeInStopTime;                                           // 0x0148(0x0004)
	float                                              FadeInTargetVolume;                                       // 0x014C(0x0004)
	float                                              FadeOutStartTime;                                         // 0x0150(0x0004)
	float                                              FadeOutStopTime;                                          // 0x0154(0x0004)
	float                                              FadeOutTargetVolume;                                      // 0x0158(0x0004)
	float                                              AdjustVolumeStartTime;                                    // 0x015C(0x0004)
	float                                              AdjustVolumeStopTime;                                     // 0x0160(0x0004)
	float                                              AdjustVolumeTargetVolume;                                 // 0x0164(0x0004)
	float                                              CurrAdjustVolumeTargetVolume;                             // 0x0168(0x0004)
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                          // 0x016C(0x0004)
	struct FVector                                     CurrentLocation;                                          // 0x0170(0x000C)
	float                                              CurrentVolume;                                            // 0x017C(0x0004)
	float                                              CurrentPitch;                                             // 0x0180(0x0004)
	float                                              CurrentHighFrequencyGain;                                 // 0x0184(0x0004)
	int                                                CurrentUseSpatialization;                                 // 0x0188(0x0004)
	int                                                CurrentUseSeamlessLooping;                                // 0x018C(0x0004)
	float                                              CurrentVolumeMultiplier;                                  // 0x0190(0x0004)
	float                                              CurrentPitchMultiplier;                                   // 0x0194(0x0004)
	float                                              CurrentHighFrequencyGainMultiplier;                       // 0x0198(0x0004)
	float                                              CurrentVoiceCenterChannelVolume;                          // 0x019C(0x0004)
	float                                              CurrentVoiceRadioVolume;                                  // 0x01A0(0x0004)
	struct FDouble                                     LastUpdateTime;                                           // 0x01A4(0x0008)
	float                                              SourceInteriorVolume;                                     // 0x01AC(0x0004)
	float                                              SourceInteriorLPF;                                        // 0x01B0(0x0004)
	float                                              CurrentInteriorVolume;                                    // 0x01B4(0x0004)
	float                                              CurrentInteriorLPF;                                       // 0x01B8(0x0004)
	float                                              VolumeMultiplier;                                         // 0x01BC(0x0004)
	float                                              PitchMultiplier;                                          // 0x01C0(0x0004)
	float                                              HighFrequencyGainMultiplier;                              // 0x01C4(0x0004)
	float                                              OcclusionCheckInterval;                                   // 0x01C8(0x0004)
	float                                              LastOcclusionCheckTime;                                   // 0x01CC(0x0004)
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                                       // 0x01D0(0x0004)
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                              // 0x01D4(0x000C)
	struct FScriptDelegate                             __OnQueueSubtitles__Delegate;                             // 0x01E0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}


	void OcclusionChanged();
	void OnQueueSubtitles();
	void OnAudioFinished();
	void ResetToDefaults();
	void SetWaveParameter();
	void SetFloatParameter();
	void AdjustVolume();
	void FadeOut();
	void FadeIn();
	void IsPlaying();
	void Stop();
	void Play();
};


// Class Engine.HeightFogComponent
// 0x001C (0x007C - 0x0060)
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0060(0x0004)
	float                                              Height;                                                   // 0x0064(0x0004)
	float                                              Density;                                                  // 0x0068(0x0004) (Const)
	float                                              LightBrightness;                                          // 0x006C(0x0004) (Const)
	struct FColor                                      LightColor;                                               // 0x0070(0x0004) (Const)
	float                                              ExtinctionDistance;                                       // 0x0074(0x0004) (Const)
	float                                              StartDistance;                                            // 0x0078(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeightFogComponent");
		return ptr;
	}


	void SetEnabled();
};


// Class Engine.LightEnvironmentComponent
// 0x0010 (0x0070 - 0x0060)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0060(0x0004)
	unsigned long                                      bForceNonCompositeDynamicLights : 1;                      // 0x0060(0x0004)
	unsigned long                                      bAllowDominantDirectionalLightInfluence : 1;              // 0x0060(0x0004)
	unsigned long                                      bAllowAnyDominantLightInfluence : 1;                      // 0x0060(0x0004)
	TArray<class UPrimitiveComponent*>                 AffectedComponents;                                       // 0x0064(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightEnvironmentComponent");
		return ptr;
	}


	void IsEnabled();
	void SetEnabled();
};


// Class Engine.LightComponent
// 0x013C (0x019C - 0x0060)
class ULightComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                                // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0064(0x000C) MISSED OFFSET
	struct FMatrix                                     WorldToLight;                                             // 0x0070(0x0040)
	struct FMatrix                                     LightToWorld;                                             // 0x00B0(0x0040)
	struct FGuid                                       LightGuid;                                                // 0x00F0(0x0010)
	struct FGuid                                       LightmapGuid;                                             // 0x0100(0x0010)
	float                                              Brightness;                                               // 0x0110(0x0004) (Const)
	struct FColor                                      LightColor;                                               // 0x0114(0x0004) (Const)
	class ULightFunction*                              Function;                                                 // 0x0118(0x0004)
	float                                              LightEnv_BouncedLightBrightness;                          // 0x011C(0x0004) (Const)
	struct FColor                                      LightEnv_BouncedModulationColor;                          // 0x0120(0x0004) (Const)
	unsigned long                                      bEnabled : 1;                                             // 0x0124(0x0004)
	unsigned long                                      bForceDrawDynamicLight : 1;                               // 0x0124(0x0004)
	unsigned long                                      CastShadows : 1;                                          // 0x0124(0x0004)
	unsigned long                                      CastStaticShadows : 1;                                    // 0x0124(0x0004)
	unsigned long                                      CastDynamicShadows : 1;                                   // 0x0124(0x0004)
	unsigned long                                      bCastCompositeShadow : 1;                                 // 0x0124(0x0004)
	unsigned long                                      bAffectCompositeShadowDirection : 1;                      // 0x0124(0x0004)
	unsigned long                                      bAllowPreShadow : 1;                                      // 0x0124(0x0004)
	unsigned long                                      bForceDynamicLight : 1;                                   // 0x0124(0x0004)
	unsigned long                                      UseDirectLightMap : 1;                                    // 0x0124(0x0004)
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;                   // 0x0124(0x0004)
	unsigned long                                      bOnlyAffectSameAndSpecifiedLevels : 1;                    // 0x0124(0x0004)
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;     // 0x0124(0x0004)
	unsigned long                                      bUseVolumes : 1;                                          // 0x0124(0x0004)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x0124(0x0004)
	unsigned long                                      bPrecomputedLightingIsValid : 1;                          // 0x0124(0x0004)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0128(0x0004)
	TArray<struct FName>                               OtherLevelsToAffect;                                      // 0x012C(0x000C)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x0138(0x0004)
	TArray<class ABrush*>                              InclusionVolumes;                                         // 0x013C(0x000C) (ExportObject)
	TArray<class ABrush*>                              ExclusionVolumes;                                         // 0x0148(0x000C) (ExportObject)
	TArray<struct FPointer>                            InclusionConvexVolumes;                                   // 0x0154(0x000C)
	TArray<struct FPointer>                            ExclusionConvexVolumes;                                   // 0x0160(0x000C)
	TEnumAsByte<ELightAffectsClassification>           LightAffectsClassification;                               // 0x016C(0x0001)
	TEnumAsByte<ELightShadowMode>                      LightShadowMode;                                          // 0x016D(0x0001)
	unsigned char                                      UnknownData01[0x2];                                       // 0x016E(0x0002) MISSED OFFSET
	struct FLinearColor                                ModShadowColor;                                           // 0x0170(0x0010)
	float                                              ModShadowFadeoutTime;                                     // 0x0180(0x0004)
	float                                              ModShadowFadeoutExponent;                                 // 0x0184(0x0004)
	int                                                LightListIndex;                                           // 0x0188(0x0004)
	TEnumAsByte<EShadowProjectionTechnique>            ShadowProjectionTechnique;                                // 0x018C(0x0001)
	TEnumAsByte<EShadowFilterQuality>                  ShadowFilterQuality;                                      // 0x018D(0x0001)
	unsigned char                                      UnknownData02[0x2];                                       // 0x018E(0x0002) MISSED OFFSET
	int                                                MinShadowResolution;                                      // 0x0190(0x0004)
	int                                                MaxShadowResolution;                                      // 0x0194(0x0004)
	int                                                ShadowFadeResolution;                                     // 0x0198(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}


	void UpdateColorAndBrightness();
	void GetDirection();
	void GetOrigin();
	void SetLightProperties();
	void SetEnabled();
};


// Class Engine.DynamicLightEnvironmentComponent
// 0x00B0 (0x0120 - 0x0070)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                                    // 0x0070(0x0004)
	float                                              InvisibleUpdateTime;                                      // 0x0074(0x0004)
	float                                              MinTimeBetweenFullUpdates;                                // 0x0078(0x0004)
	int                                                NumVolumeVisibilitySamples;                               // 0x007C(0x0004)
	struct FLinearColor                                AmbientShadowColor;                                       // 0x0080(0x0010)
	struct FVector                                     AmbientShadowSourceDirection;                             // 0x0090(0x000C)
	struct FLinearColor                                AmbientGlow;                                              // 0x009C(0x0010)
	float                                              LightDesaturation;                                        // 0x00AC(0x0004)
	float                                              LightDistance;                                            // 0x00B0(0x0004)
	float                                              ShadowDistance;                                           // 0x00B4(0x0004)
	unsigned long                                      bCastShadows : 1;                                         // 0x00B8(0x0004)
	unsigned long                                      bCompositeShadowsFromDynamicLights : 1;                   // 0x00B8(0x0004)
	unsigned long                                      bForceCompositeAllLights : 1;                             // 0x00B8(0x0004)
	unsigned long                                      bDynamic : 1;                                             // 0x00B8(0x0004)
	unsigned long                                      bSynthesizeDirectionalLight : 1;                          // 0x00B8(0x0004)
	unsigned long                                      bSynthesizeSHLight : 1;                                   // 0x00B8(0x0004)
	unsigned long                                      bForceAllowLightEnvSphericalHarmonicLights : 1;           // 0x00B8(0x0004)
	unsigned long                                      bRequiresNonLatentUpdates : 1;                            // 0x00B8(0x0004)
	unsigned long                                      bTraceFromClosestBoundsPoint : 1;                         // 0x00B8(0x0004)
	unsigned long                                      bOverrideOwnerLightingChannels : 1;                       // 0x00B8(0x0004)
	float                                              ModShadowFadeoutTime;                                     // 0x00BC(0x0004)
	float                                              ModShadowFadeoutExponent;                                 // 0x00C0(0x0004)
	struct FLinearColor                                MaxModulatedShadowColor;                                  // 0x00C4(0x0010)
	float                                              DominantShadowTransitionStartDistance;                    // 0x00D4(0x0004)
	float                                              DominantShadowTransitionEndDistance;                      // 0x00D8(0x0004)
	int                                                MinShadowResolution;                                      // 0x00DC(0x0004)
	int                                                MaxShadowResolution;                                      // 0x00E0(0x0004)
	int                                                ShadowFadeResolution;                                     // 0x00E4(0x0004)
	TEnumAsByte<EShadowFilterQuality>                  ShadowFilterQuality;                                      // 0x00E8(0x0001)
	TEnumAsByte<ELightShadowMode>                      LightShadowMode;                                          // 0x00E9(0x0001)
	TEnumAsByte<EDynamicLightEnvironmentBoundsMethod>  BoundsMethod;                                             // 0x00EA(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00EB(0x0001) MISSED OFFSET
	float                                              BouncedLightingFactor;                                    // 0x00EC(0x0004)
	float                                              MinShadowAngle;                                           // 0x00F0(0x0004)
	struct FBoxSphereBounds                            OverriddenBounds;                                         // 0x00F4(0x001C)
	struct FLightingChannelContainer                   OverriddenLightingChannels;                               // 0x0110(0x0004)
	TArray<class ULightComponent*>                     OverriddenLightComponents;                                // 0x0114(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicLightEnvironmentComponent");
		return ptr;
	}

};


// Class Engine.ParticleLightEnvironmentComponent
// 0x0008 (0x0128 - 0x0120)
class UParticleLightEnvironmentComponent : public UDynamicLightEnvironmentComponent
{
public:
	int                                                ReferenceCount;                                           // 0x0120(0x0004)
	unsigned long                                      bAllowDLESharing : 1;                                     // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleLightEnvironmentComponent");
		return ptr;
	}

};


// Class Engine.PrimitiveComponent
// 0x0164 (0x01C4 - 0x0060)
class UPrimitiveComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                                // 0x0060(0x0004)
	int                                                DetachFence;                                              // 0x0064(0x0004)
	float                                              LocalToWorldDeterminant;                                  // 0x0068(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                             // 0x0070(0x0040)
	int                                                MotionBlurInfoIndex;                                      // 0x00B0(0x0004)
	TArray<struct FPointer>                            DecalList;                                                // 0x00B4(0x000C)
	TArray<class UDecalComponent*>                     DecalsToReattach;                                         // 0x00C0(0x000C)
	int                                                Tag;                                                      // 0x00CC(0x0004)
	class UPrimitiveComponent*                         ShadowParent;                                             // 0x00D0(0x0004)
	class UPrimitiveComponent*                         ReplacementPrimitive;                                     // 0x00D4(0x0004) (Native)
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                                       // 0x00D8(0x0004)
	struct FBoxSphereBounds                            Bounds;                                                   // 0x00DC(0x001C)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x00F8(0x0004)
	class ULightEnvironmentComponent*                  PreviousLightEnvironment;                                 // 0x00FC(0x0004)
	float                                              MinDrawDistance;                                          // 0x0100(0x0004)
	float                                              MassiveLODDistance;                                       // 0x0104(0x0004)
	float                                              MaxDrawDistance;                                          // 0x0108(0x0004)
	float                                              CachedMaxDrawDistance;                                    // 0x010C(0x0004)
	float                                              CullDistance;                                             // 0x0110(0x0004)
	float                                              CachedCullDistance;                                       // 0x0114(0x0004)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x0118(0x0001)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x0119(0x0001)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x011A(0x0001)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x011B(0x0001)
	unsigned char                                      RBDominanceGroup;                                         // 0x011C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	float                                              MotionBlurScale;                                          // 0x0120(0x0004)
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x0124(0x0004)
	unsigned long                                      bAllowCullDistanceVolume : 1;                             // 0x0124(0x0004)
	unsigned long                                      HiddenGame : 1;                                           // 0x0124(0x0004)
	unsigned long                                      HiddenEditor : 1;                                         // 0x0124(0x0004)
	unsigned long                                      bOwnerNoSee : 1;                                          // 0x0124(0x0004)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x0124(0x0004)
	unsigned long                                      bIgnoreOwnerHidden : 1;                                   // 0x0124(0x0004)
	unsigned long                                      bUseAsOccluder : 1;                                       // 0x0124(0x0004)
	unsigned long                                      bAllowApproximateOcclusion : 1;                           // 0x0124(0x0004)
	unsigned long                                      bFirstFrameOcclusion : 1;                                 // 0x0124(0x0004)
	unsigned long                                      bIgnoreNearPlaneIntersection : 1;                         // 0x0124(0x0004)
	unsigned long                                      bSelectable : 1;                                          // 0x0124(0x0004)
	unsigned long                                      bForceMipStreaming : 1;                                   // 0x0124(0x0004)
	unsigned long                                      bAcceptsDecals : 1;                                       // 0x0124(0x0004)
	unsigned long                                      bAcceptsDecalsDuringGameplay : 1;                         // 0x0124(0x0004)
	unsigned long                                      bAcceptsStaticDecals : 1;                                 // 0x0124(0x0004)
	unsigned long                                      bAcceptsDynamicDecals : 1;                                // 0x0124(0x0004)
	unsigned long                                      bIsRefreshingDecals : 1;                                  // 0x0124(0x0004)
	unsigned long                                      bAllowDecalAutomaticReAttach : 1;                         // 0x0124(0x0004)
	unsigned long                                      bAcceptsFoliage : 1;                                      // 0x0124(0x0004)
	unsigned long                                      CastShadow : 1;                                           // 0x0124(0x0004)
	unsigned long                                      bForceDirectLightMap : 1;                                 // 0x0124(0x0004)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0124(0x0004)
	unsigned long                                      bSelfShadowOnly : 1;                                      // 0x0124(0x0004)
	unsigned long                                      bAcceptsDynamicDominantLightShadows : 1;                  // 0x0124(0x0004)
	unsigned long                                      bCastHiddenShadow : 1;                                    // 0x0124(0x0004)
	unsigned long                                      bAcceptsLights : 1;                                       // 0x0124(0x0004)
	unsigned long                                      bAcceptsDynamicLights : 1;                                // 0x0124(0x0004)
	unsigned long                                      bUsePrecomputedShadows : 1;                               // 0x0124(0x0004)
	unsigned long                                      bHasExplicitShadowParent : 1;                             // 0x0124(0x0004)
	unsigned long                                      bCullModulatedShadowOnBackfaces : 1;                      // 0x0124(0x0004)
	unsigned long                                      bCullModulatedShadowOnEmissive : 1;                       // 0x0124(0x0004)
	unsigned long                                      bAllowAmbientOcclusion : 1;                               // 0x0128(0x0004)
	unsigned long                                      CollideActors : 1;                                        // 0x0128(0x0004)
	unsigned long                                      AlwaysCheckCollision : 1;                                 // 0x0128(0x0004)
	unsigned long                                      BlockActors : 1;                                          // 0x0128(0x0004)
	unsigned long                                      BlockZeroExtent : 1;                                      // 0x0128(0x0004)
	unsigned long                                      BlockNonZeroExtent : 1;                                   // 0x0128(0x0004)
	unsigned long                                      CanBlockCamera : 1;                                       // 0x0128(0x0004)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x0128(0x0004)
	unsigned long                                      bBlockCameraAndHeight : 1;                                // 0x0128(0x0004)
	unsigned long                                      bDisableAllRigidBody : 1;                                 // 0x0128(0x0004)
	unsigned long                                      bSkipRBGeomCreation : 1;                                  // 0x0128(0x0004)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x0128(0x0004)
	unsigned long                                      bFluidDrain : 1;                                          // 0x0128(0x0004)
	unsigned long                                      bFluidTwoWay : 1;                                         // 0x0128(0x0004)
	unsigned long                                      bIgnoreRadialImpulse : 1;                                 // 0x0128(0x0004)
	unsigned long                                      bIgnoreRadialForce : 1;                                   // 0x0128(0x0004)
	unsigned long                                      bIgnoreForceField : 1;                                    // 0x0128(0x0004)
	unsigned long                                      bUseCompartment : 1;                                      // 0x0128(0x0004)
	unsigned long                                      AlwaysLoadOnClient : 1;                                   // 0x0128(0x0004)
	unsigned long                                      AlwaysLoadOnServer : 1;                                   // 0x0128(0x0004)
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                        // 0x0128(0x0004)
	unsigned long                                      AbsoluteTranslation : 1;                                  // 0x0128(0x0004)
	unsigned long                                      AbsoluteRotation : 1;                                     // 0x0128(0x0004)
	unsigned long                                      AbsoluteScale : 1;                                        // 0x0128(0x0004)
	unsigned long                                      bAllowShadowFade : 1;                                     // 0x0128(0x0004)
	unsigned long                                      bWasSNFiltered : 1;                                       // 0x0128(0x0004)
	TArray<int>                                        OctreeNodes;                                              // 0x012C(0x000C)
	int                                                TranslucencySortPriority;                                 // 0x0138(0x0004)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x013C(0x0004)
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                                    // 0x0140(0x0004)
	int                                                MyCollisionGroups;                                        // 0x0144(0x0004)
	class UPhysicalMaterial*                           PhysMaterialOverride;                                     // 0x0148(0x0004)
	class URB_BodyInstance*                            BodyInstance;                                             // 0x014C(0x0004)
	struct FMatrix                                     CachedParentToWorld;                                      // 0x0150(0x0040)
	struct FVector                                     Translation;                                              // 0x0190(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x019C(0x000C)
	float                                              Scale;                                                    // 0x01A8(0x0004)
	struct FVector                                     Scale3D;                                                  // 0x01AC(0x000C)
	float                                              LastSubmitTime;                                           // 0x01B8(0x0004)
	float                                              LastRenderTime;                                           // 0x01BC(0x0004)
	float                                              ScriptRigidBodyCollisionThreshold;                        // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		return ptr;
	}


	void ClosestPointOnComponentToComponent();
	void ClosestPointOnComponentToPoint();
	void GetRotation();
	void GetPosition();
	void SetAbsolute();
	void SetTransform();
	void SetScale3D();
	void SetScale();
	void SetRotation();
	void SetTranslation();
	void SetActorCollision();
	void SetTraceBlocking();
	void SetViewOwnerDepthPriorityGroup();
	void SetDepthPriorityGroup();
	void SetLightingChannels();
	void SetCullDistance();
	void SetLightEnvironment();
	void SetShadowParent();
	void SetIgnoreOwnerHidden();
	void SetOnlyOwnerSee();
	void SetOwnerNoSee();
	void SetHidden();
	void SetRBDominanceGroup();
	void GetRootBodyInstance();
	void SetPhysMaterialOverride();
	void InitRBPhys();
	void SetNotifyRigidBodyCollision();
	void SetRBChannel();
	void SetRBCollisionChannels();
	void SetRBCollidesWithChannel();
	void SetBlockRigidBody();
	void RigidBodyIsAwake();
	void PutRigidBodyToSleep();
	void WakeRigidBody();
	void SetRBRotation();
	void SetRBPosition();
	void RetardRBLinearVelocity();
	void SetRBAngularVelocity();
	void SetRBLinearVelocity();
	void AddTorque();
	void AddRadialForce();
	void AddForce();
	void AddRadialImpulse();
	void AddImpulse();
};


// Class Engine.ArrowComponent
// 0x000C (0x01D0 - 0x01C4)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                               // 0x01C4(0x0004)
	float                                              ArrowSize;                                                // 0x01C8(0x0004)
	unsigned long                                      bTreatAsASprite : 1;                                      // 0x01CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}

};


// Class Engine.KMeshProps
// 0x0048 (0x0084 - 0x003C)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                                 // 0x003C(0x000C)
	struct FKAggregateGeom                             AggGeom;                                                  // 0x0048(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KMeshProps");
		return ptr;
	}

};


// Class Engine.BrushComponent
// 0x0058 (0x021C - 0x01C4)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                    // 0x01C4(0x0004)
	struct FKAggregateGeom                             BrushAggGeom;                                             // 0x01C8(0x003C)
	struct FPointer                                    BrushPhysDesc;                                            // 0x0204(0x0004)
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                                      // 0x0208(0x000C)
	int                                                CachedPhysBrushDataVersion;                               // 0x0214(0x0004)
	unsigned long                                      bBlockComplexCollisionTrace : 1;                          // 0x0218(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}

};


// Class Engine.CameraConeComponent
// 0x0000 (0x01C4 - 0x01C4)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraConeComponent");
		return ptr;
	}

};


// Class Engine.CylinderComponent
// 0x0010 (0x01D4 - 0x01C4)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                          // 0x01C4(0x0004)
	float                                              CollisionRadius;                                          // 0x01C8(0x0004)
	struct FColor                                      CylinderColor;                                            // 0x01CC(0x0004)
	unsigned long                                      bDrawBoundingBox : 1;                                     // 0x01D0(0x0004)
	unsigned long                                      bDrawNonColliding : 1;                                    // 0x01D0(0x0004)
	unsigned long                                      bAlwaysRenderIfSelected : 1;                              // 0x01D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CylinderComponent");
		return ptr;
	}


	void SetCylinderSize();
};


// Class Engine.DrawBoxComponent
// 0x0018 (0x01DC - 0x01C4)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                                 // 0x01C4(0x0004)
	class UMaterial*                                   BoxMaterial;                                              // 0x01C8(0x0004)
	struct FVector                                     BoxExtent;                                                // 0x01CC(0x000C)
	unsigned long                                      bDrawWireBox : 1;                                         // 0x01D8(0x0004)
	unsigned long                                      bDrawLitBox : 1;                                          // 0x01D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawBoxComponent");
		return ptr;
	}

};


// Class Engine.DrawCapsuleComponent
// 0x0014 (0x01D8 - 0x01C4)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                             // 0x01C4(0x0004)
	class UMaterial*                                   CapsuleMaterial;                                          // 0x01C8(0x0004)
	float                                              CapsuleHeight;                                            // 0x01CC(0x0004)
	float                                              CapsuleRadius;                                            // 0x01D0(0x0004)
	unsigned long                                      bDrawWireCapsule : 1;                                     // 0x01D4(0x0004)
	unsigned long                                      bDrawLitCapsule : 1;                                      // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawCapsuleComponent");
		return ptr;
	}

};


// Class Engine.DrawConeComponent
// 0x0010 (0x01D4 - 0x01C4)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                                // 0x01C4(0x0004)
	float                                              ConeRadius;                                               // 0x01C8(0x0004)
	float                                              ConeAngle;                                                // 0x01CC(0x0004)
	int                                                ConeSides;                                                // 0x01D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawConeComponent");
		return ptr;
	}

};


// Class Engine.DrawCylinderComponent
// 0x0020 (0x01E4 - 0x01C4)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                            // 0x01C4(0x0004)
	class UMaterial*                                   CylinderMaterial;                                         // 0x01C8(0x0004)
	float                                              CylinderRadius;                                           // 0x01CC(0x0004)
	float                                              CylinderTopRadius;                                        // 0x01D0(0x0004)
	float                                              CylinderHeight;                                           // 0x01D4(0x0004)
	float                                              CylinderHeightOffset;                                     // 0x01D8(0x0004)
	int                                                CylinderSides;                                            // 0x01DC(0x0004)
	unsigned long                                      bDrawWireCylinder : 1;                                    // 0x01E0(0x0004)
	unsigned long                                      bDrawLitCylinder : 1;                                     // 0x01E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawCylinderComponent");
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0018 (0x01DC - 0x01C4)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                             // 0x01C4(0x0004)
	float                                              FrustumAngle;                                             // 0x01C8(0x0004)
	float                                              FrustumAspectRatio;                                       // 0x01CC(0x0004)
	float                                              FrustumStartDist;                                         // 0x01D0(0x0004)
	float                                              FrustumEndDist;                                           // 0x01D4(0x0004)
	class UTexture*                                    Texture;                                                  // 0x01D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}

};


// Class Engine.DrawQuadComponent
// 0x000C (0x01D0 - 0x01C4)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                                  // 0x01C4(0x0004)
	float                                              Width;                                                    // 0x01C8(0x0004)
	float                                              Height;                                                   // 0x01CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawQuadComponent");
		return ptr;
	}

};


// Class Engine.DrawSphereComponent
// 0x0014 (0x01D8 - 0x01C4)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                              // 0x01C4(0x0004)
	class UMaterial*                                   SphereMaterial;                                           // 0x01C8(0x0004)
	float                                              SphereRadius;                                             // 0x01CC(0x0004)
	int                                                SphereSides;                                              // 0x01D0(0x0004)
	unsigned long                                      bDrawWireSphere : 1;                                      // 0x01D4(0x0004)
	unsigned long                                      bDrawLitSphere : 1;                                       // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}

};


// Class Engine.DrawPylonRadiusComponent
// 0x0000 (0x01D8 - 0x01D8)
class UDrawPylonRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawPylonRadiusComponent");
		return ptr;
	}

};


// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x01D8 - 0x01D8)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSoundRadiusComponent");
		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0024 (0x01E8 - 0x01C4)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                           // 0x01C4(0x0004)
	struct FPointer                                    FPrimitiveDrawInterfaceView;                              // 0x01C8(0x0004)
	TArray<struct FPointer>                            BatchedLines;                                             // 0x01CC(0x000C)
	TArray<struct FPointer>                            BatchedPoints;                                            // 0x01D8(0x000C)
	float                                              DefaultLifeTime;                                          // 0x01E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}

};


// Class Engine.MeshComponent
// 0x000C (0x01D0 - 0x01C4)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x01C4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}


	void CreateAndSetMaterialInstanceTimeVarying();
	void CreateAndSetMaterialInstanceConstant();
	void PrestreamTextures();
	void GetNumElements();
	void SetMaterial();
	void GetMaterial();
};


// Class Engine.StaticMeshComponent
// 0x0060 (0x0230 - 0x01D0)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                           // 0x01D0(0x0004)
	int                                                PreviousLODLevel;                                         // 0x01D4(0x0004)
	class UStaticMesh*                                 StaticMesh;                                               // 0x01D8(0x0004)
	struct FColor                                      WireframeColor;                                           // 0x01DC(0x0004)
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x01E0(0x0004)
	unsigned long                                      bOverrideLightMapResolution : 1;                          // 0x01E0(0x0004)
	unsigned long                                      bOverrideLightMapRes : 1;                                 // 0x01E0(0x0004)
	int                                                OverriddenLightMapResolution;                             // 0x01E4(0x0004)
	int                                                OverriddenLightMapRes;                                    // 0x01E8(0x0004)
	float                                              OverriddenLODMaxRange;                                    // 0x01EC(0x0004)
	int                                                SubDivisionStepSize;                                      // 0x01F0(0x0004)
	unsigned long                                      bUseSubDivisions : 1;                                     // 0x01F4(0x0004)
	unsigned long                                      bForceStaticDecals : 1;                                   // 0x01F4(0x0004)
	unsigned long                                      bForceRenderIn3DMode : 1;                                 // 0x01F4(0x0004)
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x01F8(0x000C)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                  // 0x0204(0x000C)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0210(0x001C)
	int                                                maxVisiblePlayers;                                        // 0x022C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}


	void SetForceStaticDecals();
	void DisableRBCollisionWithSMC();
	void SetStaticMesh();
};


// Class Engine.ModelComponent
// 0x0030 (0x01F4 - 0x01C4)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                                    // 0x01C4(0x0004)
	int                                                ZoneIndex;                                                // 0x01C8(0x0004)
	int                                                ComponentIndex;                                           // 0x01CC(0x0004)
	TArray<struct FPointer>                            Nodes;                                                    // 0x01D0(0x000C)
	TArray<struct FPointer>                            Edges;                                                    // 0x01DC(0x000C)
	TArray<struct FPointer>                            Elements;                                                 // 0x01E8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}

};


// Class Engine.SpriteComponent
// 0x001C (0x01E0 - 0x01C4)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                   // 0x01C4(0x0004)
	unsigned long                                      bIsScreenSizeScaled : 1;                                  // 0x01C8(0x0004)
	float                                              ScreenSize;                                               // 0x01CC(0x0004)
	float                                              U;                                                        // 0x01D0(0x0004)
	float                                              UL;                                                       // 0x01D4(0x0004)
	float                                              V;                                                        // 0x01D8(0x0004)
	float                                              VL;                                                       // 0x01DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpriteComponent");
		return ptr;
	}


	void SetSpriteAndUV();
	void SetUV();
	void SetSprite();
};


// Class Engine.RadialBlurComponent
// 0x0060 (0x00C0 - 0x0060)
class URadialBlurComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0060(0x0004)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x0064(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              BlurScale;                                                // 0x0068(0x0004) (Const)
	float                                              BlurFalloffExponent;                                      // 0x006C(0x0004) (Const)
	float                                              BlurOpacity;                                              // 0x0070(0x0004) (Const)
	float                                              MaxCullDistance;                                          // 0x0074(0x0004)
	float                                              DistanceFalloffExponent;                                  // 0x0078(0x0004)
	unsigned long                                      bRenderAsVelocity : 1;                                    // 0x007C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x007C(0x0004)
	struct FMatrix                                     LocalToWorld;                                             // 0x0080(0x0040)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialBlurComponent");
		return ptr;
	}


	void OnUpdatePropertyBlurOpacity();
	void OnUpdatePropertyBlurFalloffExponent();
	void OnUpdatePropertyBlurScale();
	void SetEnabled();
	void SetBlurOpacity();
	void SetBlurFalloffExponent();
	void SetBlurScale();
	void SetMaterial();
};


// Class Engine.SceneCaptureComponent
// 0x0034 (0x0094 - 0x0060)
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0060(0x0004)
	unsigned long                                      bEnablePostProcess : 1;                                   // 0x0060(0x0004)
	unsigned long                                      bEnableFog : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bUseMainScenePostProcessSettings : 1;                     // 0x0060(0x0004)
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                           // 0x0060(0x0004)
	unsigned long                                      bNeedsSceneUpdate : 1;                                    // 0x0060(0x0004)
	struct FColor                                      ClearColor;                                               // 0x0064(0x0004)
	TEnumAsByte<ESceneCaptureViewMode>                 ViewMode;                                                 // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	int                                                SceneLOD;                                                 // 0x006C(0x0004)
	float                                              FrameRate;                                                // 0x0070(0x0004)
	class UPostProcessChain*                           PostProcess;                                              // 0x0074(0x0004)
	float                                              MaxUpdateDist;                                            // 0x0078(0x0004)
	float                                              MaxStreamingUpdateDist;                                   // 0x007C(0x0004)
	TArray<class AActor*>                              ActorInclusionList;                                       // 0x0080(0x000C)
	struct FPointer                                    CaptureInfo;                                              // 0x008C(0x0004)
	struct FPointer                                    ViewState;                                                // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}


	void SetEnabled();
	void NeedsUpdate();
	void SetFrameRate();
};


// Class Engine.SceneCapture2DComponent
// 0x009C (0x0130 - 0x0094)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0094(0x0004)
	float                                              FieldOfView;                                              // 0x0098(0x0004)
	float                                              NearPlane;                                                // 0x009C(0x0004)
	float                                              FarPlane;                                                 // 0x00A0(0x0004)
	unsigned long                                      bUpdateMatrices : 1;                                      // 0x00A4(0x0004)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                               // 0x00B0(0x0040)
	struct FMatrix                                     ProjMatrix;                                               // 0x00F0(0x0040)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DComponent");
		return ptr;
	}


	void SetView();
	void SetCaptureParameters();
};


// Class Engine.SceneCapture2DHitMaskComponent
// 0x0020 (0x00B4 - 0x0094)
class USceneCapture2DHitMaskComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0094(0x0004)
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                         // 0x0098(0x0004)
	int                                                RenderSection;                                            // 0x009C(0x0004)
	int                                                ForceLOD;                                                 // 0x00A0(0x0004)
	float                                              FadingStartTimeAfterHit;                                  // 0x00A4(0x0004)
	float                                              FadingPercentage;                                         // 0x00A8(0x0004)
	float                                              FadingDurationTime;                                       // 0x00AC(0x0004)
	float                                              FadingIntervalTime;                                       // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DHitMaskComponent");
		return ptr;
	}


	void SetCaptureParameters();
	void SetCaptureTargetTexture();
};


// Class Engine.SceneCaptureCubeMapComponent
// 0x0018 (0x00AC - 0x0094)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                            // 0x0094(0x0004)
	float                                              NearPlane;                                                // 0x0098(0x0004)
	float                                              FarPlane;                                                 // 0x009C(0x0004)
	struct FVector                                     WorldLocation;                                            // 0x00A0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCubeMapComponent");
		return ptr;
	}

};


// Class Engine.SceneCapturePortalComponent
// 0x001C (0x00B0 - 0x0094)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0094(0x0004)
	float                                              ScaleFOV;                                                 // 0x0098(0x0004)
	class AActor*                                      ViewDestination;                                          // 0x009C(0x0004)
	unsigned long                                      bFlipSrcDirection : 1;                                    // 0x00A0(0x0004)
	unsigned long                                      bFlipDstDirection : 1;                                    // 0x00A0(0x0004)
	struct FVector                                     DstOffset;                                                // 0x00A4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapturePortalComponent");
		return ptr;
	}


	void SetCaptureParameters();
};


// Class Engine.SceneCaptureReflectComponent
// 0x0008 (0x009C - 0x0094)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0094(0x0004)
	float                                              ScaleFOV;                                                 // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureReflectComponent");
		return ptr;
	}

};


// Class Engine.WindDirectionalSourceComponent
// 0x0014 (0x0074 - 0x0060)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneProxy;                                               // 0x0060(0x0004)
	float                                              Strength;                                                 // 0x0064(0x0004) (Const)
	float                                              Phase;                                                    // 0x0068(0x0004) (Const)
	float                                              Frequency;                                                // 0x006C(0x0004) (Const)
	float                                              Speed;                                                    // 0x0070(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}

};


// Class Engine.WindPointSourceComponent
// 0x0008 (0x007C - 0x0074)
class UWindPointSourceComponent : public UWindDirectionalSourceComponent
{
public:
	class UDrawSphereComponent*                        PreviewRadiusComponent;                                   // 0x0074(0x0004)
	float                                              Radius;                                                   // 0x0078(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindPointSourceComponent");
		return ptr;
	}

};


// Class Engine.ActorFactory
// 0x0020 (0x005C - 0x003C)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                                       // 0x003C(0x0004)
	struct FString                                     MenuName;                                                 // 0x0040(0x000C)
	int                                                MenuPriority;                                             // 0x004C(0x0004)
	int                                                AlternateMenuPriority;                                    // 0x0050(0x0004)
	class UClass*                                      NewActorClass;                                            // 0x0054(0x0004)
	unsigned long                                      bPlaceable : 1;                                           // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactory");
		return ptr;
	}


	void PostCreateActor();
};


// Class Engine.ActorFactoryActor
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryActor : public UActorFactory
{
public:
	class UClass*                                      ActorClass;                                               // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryActor");
		return ptr;
	}

};


// Class Engine.ActorFactoryAI
// 0x0028 (0x0084 - 0x005C)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                          // 0x005C(0x0004)
	class UClass*                                      PawnClass;                                                // 0x0060(0x0004)
	struct FString                                     PawnName;                                                 // 0x0064(0x000C)
	unsigned long                                      bGiveDefaultInventory : 1;                                // 0x0070(0x0004)
	TArray<class UClass*>                              InventoryList;                                            // 0x0074(0x000C)
	int                                                TeamIndex;                                                // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAI");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSound
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                          // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSound");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundMovable
// 0x0000 (0x0060 - 0x0060)
class UActorFactoryAmbientSoundMovable : public UActorFactoryAmbientSound
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundMovable");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundSimple
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                            // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimple");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundNonLoop
// 0x0000 (0x0060 - 0x0060)
class UActorFactoryAmbientSoundNonLoop : public UActorFactoryAmbientSoundSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundNonLoop");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundSimpleToggleable
// 0x0000 (0x0060 - 0x0060)
class UActorFactoryAmbientSoundSimpleToggleable : public UActorFactoryAmbientSoundSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimpleToggleable");
		return ptr;
	}

};


// Class Engine.ActorFactoryArchetype
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                           // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryArchetype");
		return ptr;
	}

};


// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x005C - 0x005C)
class UActorFactoryCoverLink : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryCoverLink");
		return ptr;
	}

};


// Class Engine.ActorFactoryDominantDirectionalLight
// 0x0000 (0x005C - 0x005C)
class UActorFactoryDominantDirectionalLight : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDominantDirectionalLight");
		return ptr;
	}

};


// Class Engine.ActorFactoryDynamicSM
// 0x0015 (0x0071 - 0x005C)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x005C(0x0004)
	struct FVector                                     DrawScale3D;                                              // 0x0060(0x000C)
	unsigned long                                      bNoEncroachCheck : 1;                                     // 0x006C(0x0004)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x006C(0x0004)
	unsigned long                                      bBlockRigidBody : 1;                                      // 0x006C(0x0004)
	unsigned long                                      bUseCompartment : 1;                                      // 0x006C(0x0004)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x006C(0x0004)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x0070(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDynamicSM");
		return ptr;
	}

};


// Class Engine.ActorFactoryMover
// 0x0003 (0x0074 - 0x0071)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryMover");
		return ptr;
	}

};


// Class Engine.ActorFactoryRigidBody
// 0x0027 (0x0098 - 0x0071)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	unsigned long                                      bStartAwake : 1;                                          // 0x0074(0x0004)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x0074(0x0004)
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                           // 0x0074(0x0004)
	unsigned long                                      bEnableStayUprightSpring : 1;                             // 0x0074(0x0004)
	struct FVector                                     InitialVelocity;                                          // 0x0078(0x000C)
	class UDistributionVector*                         AdditionalVelocity;                                       // 0x0084(0x0004)
	class UDistributionVector*                         InitialAngularVelocity;                                   // 0x0088(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x008C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	float                                              StayUprightTorqueFactor;                                  // 0x0090(0x0004)
	float                                              StayUprightMaxTorque;                                     // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryRigidBody");
		return ptr;
	}

};


// Class Engine.ActorFactoryEmitter
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                           // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryEmitter");
		return ptr;
	}

};


// Class Engine.ActorFactoryFracturedStaticMesh
// 0x0010 (0x006C - 0x005C)
class UActorFactoryFracturedStaticMesh : public UActorFactory
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                                      // 0x005C(0x0004)
	struct FVector                                     DrawScale3D;                                              // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFracturedStaticMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryLensFlare
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                          // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryLensFlare");
		return ptr;
	}

};


// Class Engine.ActorFactoryLight
// 0x0000 (0x005C - 0x005C)
class UActorFactoryLight : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryLight");
		return ptr;
	}

};


// Class Engine.ActorFactoryPathNode
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPathNode : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPathNode");
		return ptr;
	}

};


// Class Engine.ActorFactoryPhysicsAsset
// 0x0024 (0x0080 - 0x005C)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x005C(0x0004)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0060(0x0004)
	unsigned long                                      bStartAwake : 1;                                          // 0x0064(0x0004)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x0064(0x0004)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x0064(0x0004)
	unsigned long                                      bUseCompartment : 1;                                      // 0x0064(0x0004)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0064(0x0004)
	struct FVector                                     InitialVelocity;                                          // 0x0068(0x000C)
	struct FVector                                     DrawScale3D;                                              // 0x0074(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPhysicsAsset");
		return ptr;
	}

};


// Class Engine.ActorFactoryPhysXDestructible
// 0x0010 (0x006C - 0x005C)
class UActorFactoryPhysXDestructible : public UActorFactory
{
public:
	class UPhysXDestructible*                          PhysXDestructible;                                        // 0x005C(0x0004)
	struct FVector                                     DrawScale3D;                                              // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPhysXDestructible");
		return ptr;
	}

};


// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPlayerStart");
		return ptr;
	}

};


// Class Engine.ActorFactoryPylon
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPylon : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPylon");
		return ptr;
	}

};


// Class Engine.ActorFactorySkeletalMesh
// 0x0010 (0x006C - 0x005C)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x005C(0x0004)
	class UAnimSet*                                    AnimSet;                                                  // 0x0060(0x0004)
	struct FName                                       AnimSequenceName;                                         // 0x0064(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactorySkeletalMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryStaticMesh
// 0x0010 (0x006C - 0x005C)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x005C(0x0004)
	struct FVector                                     DrawScale3D;                                              // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryStaticMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryTrigger
// 0x0000 (0x005C - 0x005C)
class UActorFactoryTrigger : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryTrigger");
		return ptr;
	}

};


// Class Engine.ActorFactoryVehicle
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                             // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryVehicle");
		return ptr;
	}

};


// Class Engine.BookMark
// 0x0018 (0x0054 - 0x003C)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                                 // 0x003C(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}

};


// Class Engine.Channel
// 0x002C (0x0068 - 0x003C)
class UChannel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x003C(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x0068 (0x00D0 - 0x0068)
class UActorChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0068(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0010 (0x0078 - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0068(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}

};


// Class Engine.FileChannel
// 0x0210 (0x0278 - 0x0068)
class UFileChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x210];                                     // 0x0068(0x0210) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileChannel");
		return ptr;
	}

};


// Class Engine.VoiceChannel
// 0x000C (0x0074 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0068(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}

};


// Class Engine.Controller
// 0x019C (0x03B8 - 0x021C)
class AController : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;                      // 0x021C(0x0004)
	class APawn*                                       Pawn;                                                     // 0x0220(0x0004) (Edit)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x0224(0x0004) (Edit)
	int                                                PlayerNum;                                                // 0x0228(0x0004)
	class AController*                                 NextController;                                           // 0x022C(0x0004)
	unsigned long                                      bIsPlayer : 1;                                            // 0x0230(0x0004)
	unsigned long                                      bGodMode : 1;                                             // 0x0230(0x0004)
	unsigned long                                      bAffectedByHitEffects : 1;                                // 0x0230(0x0004)
	unsigned long                                      bSoaking : 1;                                             // 0x0230(0x0004)
	unsigned long                                      bSlowerZAcquire : 1;                                      // 0x0230(0x0004)
	unsigned long                                      bNotifyPostLanded : 1;                                    // 0x0230(0x0004)
	unsigned long                                      bNotifyApex : 1;                                          // 0x0230(0x0004)
	unsigned long                                      bAdvancedTactics : 1;                                     // 0x0230(0x0004)
	unsigned long                                      bCanDoSpecial : 1;                                        // 0x0230(0x0004)
	unsigned long                                      bAdjusting : 1;                                           // 0x0230(0x0004)
	unsigned long                                      bPreparingMove : 1;                                       // 0x0230(0x0004)
	unsigned long                                      bForceStrafe : 1;                                         // 0x0230(0x0004)
	unsigned long                                      PossessedAnyPawn : 1;                                     // 0x0230(0x0004)
	unsigned long                                      bLOSflag : 1;                                             // 0x0230(0x0004)
	unsigned long                                      bSkipExtraLOSChecks : 1;                                  // 0x0230(0x0004)
	unsigned long                                      bNotifyFallingHitWall : 1;                                // 0x0230(0x0004)
	unsigned long                                      bPreciseDestination : 1;                                  // 0x0230(0x0004)
	unsigned long                                      bSeeFriendly : 1;                                         // 0x0230(0x0004)
	unsigned long                                      bUsingPathLanes : 1;                                      // 0x0230(0x0004)
	unsigned char                                      bFire;                                                    // 0x0234(0x0001)
	unsigned char                                      bAltFire;                                                 // 0x0235(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0236(0x0002) MISSED OFFSET
	float                                              MinHitWall;                                               // 0x0238(0x0004)
	class UClass*                                      NavigationHandleClass;                                    // 0x023C(0x0004)
	class UNavigationHandle*                           NavigationHandle;                                         // 0x0240(0x0004)
	float                                              MoveTimer;                                                // 0x0244(0x0004)
	class AActor*                                      MoveTarget;                                               // 0x0248(0x0004)
	struct FBasedPosition                              DestinationPosition;                                      // 0x024C(0x0034)
	struct FBasedPosition                              FocalPosition;                                            // 0x0280(0x0034)
	class AActor*                                      Focus;                                                    // 0x02B4(0x0004)
	class AActor*                                      GoalList[0x4];                                            // 0x02B8(0x0004)
	struct FBasedPosition                              AdjustPosition;                                           // 0x02C8(0x0034)
	class ANavigationPoint*                            StartSpot;                                                // 0x02FC(0x0004)
	TArray<class ANavigationPoint*>                    RouteCache;                                               // 0x0300(0x000C)
	class UReachSpec*                                  CurrentPath;                                              // 0x030C(0x0004)
	class UReachSpec*                                  NextRoutePath;                                            // 0x0310(0x0004)
	struct FVector                                     CurrentPathDir;                                           // 0x0314(0x000C)
	class AActor*                                      RouteGoal;                                                // 0x0320(0x0004)
	float                                              RouteDist;                                                // 0x0324(0x0004)
	float                                              LastRouteFind;                                            // 0x0328(0x0004)
	class AInterpActor*                                PendingMover;                                             // 0x032C(0x0004)
	class AActor*                                      FailedMoveTarget;                                         // 0x0330(0x0004)
	int                                                MoveFailureCount;                                         // 0x0334(0x0004)
	float                                              GroundPitchTime;                                          // 0x0338(0x0004)
	struct FVector                                     ViewX;                                                    // 0x033C(0x000C)
	struct FVector                                     ViewY;                                                    // 0x0348(0x000C)
	struct FVector                                     ViewZ;                                                    // 0x0354(0x000C)
	class APawn*                                       ShotTarget;                                               // 0x0360(0x0004)
	class AActor*                                      LastFailedReach;                                          // 0x0364(0x0004)
	float                                              FailedReachTime;                                          // 0x0368(0x0004)
	struct FVector                                     FailedReachLocation;                                      // 0x036C(0x000C)
	float                                              SightCounter;                                             // 0x0378(0x0004)
	float                                              SightCounterInterval;                                     // 0x037C(0x0004)
	float                                              InUseNodeCostMultiplier;                                  // 0x0380(0x0004)
	int                                                HighJumpNodeCostModifier;                                 // 0x0384(0x0004)
	float                                              MaxMoveTowardPawnTargetTime;                              // 0x0388(0x0004)
	class APawn*                                       Enemy;                                                    // 0x038C(0x0004)
	TArray<struct FVisiblePortalInfo>                  VisiblePortals;                                           // 0x0390(0x000C)
	float                                              LaneOffset;                                               // 0x039C(0x0004)
	struct FRotator                                    OldBasedRotation;                                         // 0x03A0(0x000C)
	struct FVector                                     NavMeshPath_SearchExtent_Modifier;                        // 0x03AC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}


	void GetTargetingTeam();
	void GetSpreadValue();
	void InterpolationFinished();
	void InterpolationStarted();
	void GetDestinationOffset();
	void InitNavigationHandle();
	void ReadyForLift();
	void SendMessage();
	void CurrentLevelUnloaded();
	void GetRouteGoalAfter();
	void IsInCombat();
	void IsSpectating();
	void OnToggleHidden();
	void NotifyAddInventory();
	void OnModifyHealth();
	void NotifyCoverClaimViolation();
	void NotifyCoverAdjusted();
	void NotifyCoverDisabled();
	void OnSetVelocity();
	void OnSetPhysics();
	void OnToggleAffectedByHitEffects();
	void OnToggleGodMode();
	void OnTeleport();
	void IsDead();
	void GetHumanReadableName();
	void DisplayDebug();
	void StopLatentExecution();
	void InLatentExecution();
	void ReachedPreciseDestination();
	void NotifyMissedJump();
	void NotifyJumpApex();
	void NotifyBump();
	void NotifyFallingHitWall();
	void NotifyHitWall();
	void NotifyLanded();
	void NotifyHeadVolumeChange();
	void NotifyPhysicsVolumeChange();
	void LandingShake();
	void IsAimingAt();
	void GetActorEyesViewPoint();
	void GetPlayerViewPoint();
	void HandlePathObstruction();
	void UnderLift();
	void MoverFinished();
	void WaitForMover();
	void AllowDetourTo();
	void MayFall();
	void EndClimbLadder();
	void LongFall();
	void WaitForLanding();
	void PickWallAdjust();
	void MoveUnreachable();
	void ActorReachable();
	void PointReachable();
	void FindPathToIntercept();
	void FindRandomDest();
	void FindPathTowardNearest();
	void FindPathToward();
	void FindPathTo();
	void FinishRotation();
	void SetupSpecialPathAbilities();
	void MoveToward();
	void MoveToDirectNonPathPos();
	void MoveTo();
	void EnemyNotVisible();
	void SeeMonster();
	void SeePlayer();
	void HearNoise();
	void PickTarget();
	void CanSeeByPoints();
	void CanSee();
	void LineOfSightTo();
	void NotifyChangedWeapon();
	void ClientSetWeapon();
	void ClientSwitchToBestWeapon();
	void SwitchToBestWeapon();
	void ReceiveProjectileWarning();
	void ReceiveWarning();
	void InstantWarnTarget();
	void GetAdjustedAimFor();
	void HandlePickup();
	void RoundHasEnded();
	void StopFiring();
	void FireWeaponAt();
	void RatePickup();
	void WarnProjExplode();
	void NotifyProjLanded();
	void NotifyKilled();
	void GameHasEnded();
	void SetCharacter();
	void ServerGivePawn();
	void ServerRestartPlayer();
	void GetTeamNum();
	void InitPlayerReplicationInfo();
	void NotifyTakeHit();
	void EnemyJustTeleported();
	void BeyondFogDistance();
	void Restart();
	void CleanupPRI();
	void Destroyed();
	void NotifyPostLanded();
	void GamePlayEndedState();
	void PawnDied();
	void UnPossess();
	void UpdateSex();
	void Possess();
	void OnPossess();
	void ReplicatedEvent();
	void ClientSetRotation();
	void ClientSetLocation();
	void Reset();
	void PostBeginPlay();
	void SetSkelControlScale();
	void SetMorphWeight();
	void StopActorFaceFXAnim();
	void PlayActorFaceFXAnim();
	void FinishAnimControl();
	void SetAnimPosition();
	void BeginAnimControl();
	void NotifyPathChanged();
	void GetAdjustLocation();
	void SetAdjustLocation();
	void GetDestinationPosition();
	void SetDestinationPosition();
	void GetFocalPoint();
	void SetFocalPoint();
	void RouteCache_RemoveIndex();
	void RouteCache_RemoveItem();
	void RouteCache_InsertItem();
	void RouteCache_AddItem();
	void RouteCache_Empty();
	void NativeFindNearestNavPointTo();
	void IsLocalPlayerController();
};


// Class Engine.Settings
// 0x0048 (0x0084 - 0x003C)
class USettings : public UObject
{
public:
	TArray<struct FLocalizedStringSetting>             LocalizedSettings;                                        // 0x003C(0x000C)
	TArray<struct FSettingsProperty>                   Properties;                                               // 0x0048(0x000C)
	TArray<struct FLocalizedStringSettingMetaData>     LocalizedSettingsMappings;                                // 0x0054(0x000C)
	TArray<struct FSettingsPropertyPropertyMetaData>   PropertyMappings;                                         // 0x0060(0x000C)
	struct FScriptDelegate                             __NotifySettingValueUpdated__Delegate;                    // 0x006C(0x000C)
	struct FScriptDelegate                             __NotifyPropertyValueUpdated__Delegate;                   // 0x0078(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Settings");
		return ptr;
	}


	void Customize();
	void UpdateFromURL();
	void BuildURL();
	void AppendContextsToURL();
	void AppendPropertiesToURL();
	void AppendDataBindingsToURL();
	void GetQoSAdvertisedStringSettings();
	void GetQoSAdvertisedProperties();
	void GetRangedPropertyValue();
	void SetRangedPropertyValue();
	void GetPropertyRange();
	void GetPropertyMappingType();
	void HasStringSetting();
	void HasProperty();
	void UpdateProperties();
	void UpdateStringSettings();
	void GetPropertyType();
	void GetPropertyValueId();
	void SetPropertyValueId();
	void GetStringProperty();
	void SetStringProperty();
	void GetIntProperty();
	void SetIntProperty();
	void GetFloatProperty();
	void SetFloatProperty();
	void SetPropertyFromStringByName();
	void GetPropertyAsStringByName();
	void GetPropertyAsString();
	void GetPropertyColumnHeader();
	void GetPropertyName();
	void GetPropertyId();
	void SetStringSettingValueFromStringByName();
	void GetStringSettingValueNameByName();
	void GetStringSettingValueName();
	void IsWildcardStringSetting();
	void GetStringSettingColumnHeader();
	void GetStringSettingName();
	void GetStringSettingId();
	void GetStringSettingValueByName();
	void SetStringSettingValueByName();
	void GetStringSettingValueNames();
	void IncrementStringSettingValue();
	void GetStringSettingValue();
	void SetStringSettingValue();
	void STATIC_GetSettingsDataDateTime();
	void STATIC_GetSettingsDataBlob();
	void STATIC_GetSettingsDataInt();
	void STATIC_GetSettingsDataFloat();
	void STATIC_GetSettingsDataString();
	void STATIC_EmptySettingsData();
	void STATIC_SetSettingsData();
	void STATIC_SetSettingsDataBlob();
	void STATIC_SetSettingsDataDateTime();
	void STATIC_SetSettingsDataInt();
	void STATIC_SetSettingsDataFloat();
	void STATIC_SetSettingsDataString();
	void NotifyPropertyValueUpdated();
	void NotifySettingValueUpdated();
};


// Class Engine.OnlineGameSearch
// 0x0098 (0x011C - 0x0084)
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                         // 0x0084(0x0004)
	struct FLocalizedStringSetting                     Query;                                                    // 0x0088(0x000C)
	unsigned long                                      bIsLanQuery : 1;                                          // 0x0094(0x0004)
	unsigned long                                      bUsesArbitration : 1;                                     // 0x0094(0x0004)
	unsigned long                                      bIsSearchInProgress : 1;                                  // 0x0094(0x0004)
	class UClass*                                      GameSettingsClass;                                        // 0x0098(0x0004)
	TArray<struct FOnlineGameSearchResult>             Results;                                                  // 0x009C(0x000C)
	struct FOverrideSkill                              ManualSkillOverride;                                      // 0x00A8(0x0028)
	TArray<struct FNamedObjectProperty>                NamedProperties;                                          // 0x00D0(0x000C)
	struct FOnlineGameSearchQuery                      FilterQuery;                                              // 0x00DC(0x0018)
	struct FOnlineGameSearchStringQuery                StringFilterQuery;                                        // 0x00F4(0x000C)
	struct FString                                     AdditionalSearchCriteria;                                 // 0x0100(0x000C)
	int                                                PingBucketSize;                                           // 0x010C(0x0004)
	struct FString                                     SearchFilter;                                             // 0x0110(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameSearch");
		return ptr;
	}


	void SortSearchResults();
	void SetSkillOverride();
};


// Class Engine.Camera
// 0x01FC (0x0418 - 0x021C)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                  // 0x021C(0x0004)
	struct FName                                       CameraStyle;                                              // 0x0220(0x0008)
	float                                              DefaultFOV;                                               // 0x0228(0x0004)
	unsigned long                                      bLockedFOV : 1;                                           // 0x022C(0x0004)
	unsigned long                                      bConstrainAspectRatio : 1;                                // 0x022C(0x0004)
	unsigned long                                      bEnableFading : 1;                                        // 0x022C(0x0004)
	unsigned long                                      bEnableColorScaling : 1;                                  // 0x022C(0x0004)
	unsigned long                                      bEnableColorScaleInterp : 1;                              // 0x022C(0x0004)
	float                                              LockedFOV;                                                // 0x0230(0x0004)
	float                                              ConstrainedAspectRatio;                                   // 0x0234(0x0004)
	float                                              DefaultAspectRatio;                                       // 0x0238(0x0004)
	struct FColor                                      FadeColor;                                                // 0x023C(0x0004)
	float                                              FadeAmount;                                               // 0x0240(0x0004)
	float                                              CamOverridePostProcessAlpha;                              // 0x0244(0x0004)
	struct FPostProcessSettings                        CamPostProcessSettings;                                   // 0x0248(0x00A0)
	struct FVector                                     ColorScale;                                               // 0x02E8(0x000C)
	struct FVector                                     DesiredColorScale;                                        // 0x02F4(0x000C)
	struct FVector                                     OriginalColorScale;                                       // 0x0300(0x000C)
	float                                              ColorScaleInterpDuration;                                 // 0x030C(0x0004)
	float                                              ColorScaleInterpStartTime;                                // 0x0310(0x0004)
	struct FTCameraCache                               CameraCache;                                              // 0x0314(0x0020)
	struct FTViewTarget                                ViewTarget;                                               // 0x0334(0x002C)
	struct FTViewTarget                                PendingViewTarget;                                        // 0x0360(0x002C)
	float                                              BlendTimeToGo;                                            // 0x038C(0x0004)
	struct FViewTargetTransitionParams                 BlendParams;                                              // 0x0390(0x000C)
	TArray<class UCameraModifier*>                     ModifierList;                                             // 0x039C(0x000C)
	float                                              FreeCamDistance;                                          // 0x03A8(0x0004)
	struct FVector                                     FreeCamOffset;                                            // 0x03AC(0x000C)
	struct FVector2D                                   FadeAlpha;                                                // 0x03B8(0x0008)
	float                                              FadeTime;                                                 // 0x03C0(0x0004)
	float                                              FadeTimeRemaining;                                        // 0x03C4(0x0004)
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                        // 0x03C8(0x000C)
	class UCameraModifier_CameraShake*                 CameraShakeCamMod;                                        // 0x03D4(0x0004)
	class UClass*                                      CameraShakeCamModClass;                                   // 0x03D8(0x0004)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                        // 0x03DC(0x0004)
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                              // 0x03FC(0x000C)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                // 0x0408(0x000C)
	class ADynamicCameraActor*                         AnimCameraActor;                                          // 0x0414(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Camera");
		return ptr;
	}


	void StopCameraAnim();
	void StopAllCameraAnimsByType();
	void StopAllCameraAnims();
	void PlayCameraAnim();
	void ClearAllCameraShakes();
	void STATIC_PlayWorldCameraShake();
	void STATIC_CalcRadialShakeScale();
	void StopCameraShake();
	void PlayCameraShake();
	void ClearCameraLensEffects();
	void RemoveCameraLensEffect();
	void AddCameraLensEffect();
	void FindCameraLensEffect();
	void DisplayDebug();
	void AllowPawnRotation();
	void ProcessViewRotation();
	void SetViewTarget();
	void UpdateViewTarget();
	void CheckViewTarget();
	void FillCameraCache();
	void BlendViewTargets();
	void UpdateCamera();
	void PostCameraTransform();
	void SetDesiredColorScale();
	void GetCameraViewPoint();
	void SetFOV();
	void GetFOVAngle();
	void InitializeFor();
	void ApplyCameraModifiers();
	void Destroyed();
	void PostBeginPlay();
	void CreateCameraModifier();
};


// Class Engine.PlayerController
// 0x0258 (0x0610 - 0x03B8)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                   // 0x03B8(0x0004)
	class ACamera*                                     PlayerCamera;                                             // 0x03BC(0x0004)
	class UClass*                                      CameraClass;                                              // 0x03C0(0x0004)
	class UClass*                                      PlayerOwnerDataStoreClass;                                // 0x03C4(0x0004)
	class UPlayerOwnerDataStore*                       CurrentPlayerData;                                        // 0x03C8(0x0004)
	unsigned long                                      bFrozen : 1;                                              // 0x03CC(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x03CC(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x03CC(0x0004)
	unsigned long                                      bUpdatePosition : 1;                                      // 0x03CC(0x0004)
	unsigned long                                      bUpdating : 1;                                            // 0x03CC(0x0004)
	unsigned long                                      bNeverSwitchOnPickup : 1;                                 // 0x03CC(0x0004)
	unsigned long                                      bCheatFlying : 1;                                         // 0x03CC(0x0004)
	unsigned long                                      bCameraPositionLocked : 1;                                // 0x03CC(0x0004)
	unsigned long                                      bNoTextToSpeechVoiceMessages : 1;                         // 0x03CC(0x0004)
	unsigned long                                      bTextToSpeechTeamMessagesOnly : 1;                        // 0x03CC(0x0004)
	unsigned long                                      bShortConnectTimeOut : 1;                                 // 0x03CC(0x0004)
	unsigned long                                      bPendingDestroy : 1;                                      // 0x03CC(0x0004)
	unsigned long                                      bWasSpeedHack : 1;                                        // 0x03CC(0x0004)
	unsigned long                                      bWasSaturated : 1;                                        // 0x03CC(0x0004)
	unsigned long                                      bDynamicNetSpeed : 1;                                     // 0x03CC(0x0004)
	unsigned long                                      bAimingHelp : 1;                                          // 0x03CC(0x0004)
	unsigned long                                      bClientSimulatingViewTarget : 1;                          // 0x03CC(0x0004)
	unsigned long                                      bHasVoiceHandshakeCompleted : 1;                          // 0x03CC(0x0004)
	unsigned long                                      bCinematicMode : 1;                                       // 0x03CC(0x0004)
	unsigned long                                      bCinemaDisableInputMove : 1;                              // 0x03CC(0x0004)
	unsigned long                                      bCinemaDisableInputLook : 1;                              // 0x03CC(0x0004)
	unsigned long                                      bIgnoreNetworkMessages : 1;                               // 0x03CC(0x0004)
	unsigned long                                      bReplicateAllPawns : 1;                                   // 0x03CC(0x0004)
	unsigned long                                      bIsUsingStreamingVolumes : 1;                             // 0x03CC(0x0004)
	unsigned long                                      bIsExternalUIOpen : 1;                                    // 0x03CC(0x0004)
	unsigned long                                      bIsControllerConnected : 1;                               // 0x03CC(0x0004)
	unsigned long                                      bCheckSoundOcclusion : 1;                                 // 0x03CC(0x0004)
	unsigned long                                      bLogHearSoundOverflow : 1;                                // 0x03CC(0x0004)
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                        // 0x03CC(0x0004)
	unsigned long                                      bDebugClientAdjustPosition : 1;                           // 0x03CC(0x0004)
	float                                              MaxResponseTime;                                          // 0x03D0(0x0004)
	float                                              WaitDelay;                                                // 0x03D4(0x0004)
	class APawn*                                       AcknowledgedPawn;                                         // 0x03D8(0x0004)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickDir;                                           // 0x03DC(0x0001)
	unsigned char                                      bIgnoreMoveInput;                                         // 0x03DD(0x0001)
	unsigned char                                      bIgnoreLookInput;                                         // 0x03DE(0x0001)
	unsigned char                                      bRun;                                                     // 0x03DF(0x0001)
	unsigned char                                      bDuck;                                                    // 0x03E0(0x0001)
	unsigned char                                      NetPlayerIndex;                                           // 0x03E1(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03E2(0x0002) MISSED OFFSET
	class AActor*                                      ViewTarget;                                               // 0x03E4(0x0004)
	class APlayerReplicationInfo*                      RealViewTarget;                                           // 0x03E8(0x0004)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                  // 0x03EC(0x0004)
	float                                              FOVAngle;                                                 // 0x03F0(0x0004)
	float                                              DesiredFOV;                                               // 0x03F4(0x0004)
	float                                              DefaultFOV;                                               // 0x03F8(0x0004)
	float                                              LODDistanceFactor;                                        // 0x03FC(0x0004)
	struct FRotator                                    TargetViewRotation;                                       // 0x0400(0x000C)
	float                                              TargetEyeHeight;                                          // 0x040C(0x0004)
	struct FRotator                                    BlendedTargetViewRotation;                                // 0x0410(0x000C)
	class AHUD*                                        myHUD;                                                    // 0x041C(0x0004)
	class UClass*                                      SavedMoveClass;                                           // 0x0420(0x0004)
	class USavedMove*                                  SavedMoves;                                               // 0x0424(0x0004)
	class USavedMove*                                  FreeMoves;                                                // 0x0428(0x0004)
	class USavedMove*                                  PendingMove;                                              // 0x042C(0x0004)
	struct FVector                                     LastAckedAccel;                                           // 0x0430(0x000C)
	float                                              CurrentTimeStamp;                                         // 0x043C(0x0004)
	float                                              LastUpdateTime;                                           // 0x0440(0x0004)
	float                                              ServerTimeStamp;                                          // 0x0444(0x0004)
	float                                              TimeMargin;                                               // 0x0448(0x0004)
	float                                              ClientUpdateTime;                                         // 0x044C(0x0004)
	float                                              MaxTimeMargin;                                            // 0x0450(0x0004)
	float                                              LastActiveTime;                                           // 0x0454(0x0004)
	int                                                ClientCap;                                                // 0x0458(0x0004)
	float                                              DynamicPingThreshold;                                     // 0x045C(0x0004)
	float                                              LastPingUpdate;                                           // 0x0460(0x0004)
	float                                              LastSpeedHackLog;                                         // 0x0464(0x0004)
	struct FClientAdjustment                           PendingAdjustment;                                        // 0x0468(0x0034)
	struct FString                                     QuickSaveString;                                          // 0x049C(0x000C)
	struct FString                                     NoPauseMessage;                                           // 0x04A8(0x000C)
	struct FString                                     ViewingFrom;                                              // 0x04B4(0x000C)
	struct FString                                     OwnCamera;                                                // 0x04C0(0x000C)
	int                                                GroundPitch;                                              // 0x04CC(0x0004)
	struct FVector                                     OldFloor;                                                 // 0x04D0(0x000C)
	class UCheatManager*                               CheatManager;                                             // 0x04DC(0x0004)
	class UClass*                                      CheatClass;                                               // 0x04E0(0x0004)
	class UPlayerInput*                                PlayerInput;                                              // 0x04E4(0x0004)
	class UClass*                                      InputClass;                                               // 0x04E8(0x0004)
	struct FVector                                     FailedPathStart;                                          // 0x04EC(0x000C)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x04F8(0x0004)
	struct FString                                     ForceFeedbackManagerClassName;                            // 0x04FC(0x000C)
	class UForceFeedbackManager*                       ForceFeedbackManager;                                     // 0x0508(0x0004)
	TArray<class UInteraction*>                        Interactions;                                             // 0x050C(0x000C)
	TArray<struct FUniqueNetId>                        VoiceMuteList;                                            // 0x0518(0x000C)
	TArray<struct FUniqueNetId>                        GameplayVoiceMuteList;                                    // 0x0524(0x000C)
	TArray<struct FUniqueNetId>                        VoicePacketFilter;                                        // 0x0530(0x000C)
	TArray<struct FUniqueNetId>                        MissingNetIDs;                                            // 0x053C(0x000C)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0548(0x0004)
	TScriptInterface<class UOnlineVoiceInterface>      VoiceInterface;                                           // 0x054C(0x0008)
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                         // 0x0554(0x0004)
	float                                              InteractDistance;                                         // 0x0558(0x0004)
	struct FName                                       DelayedJoinSessionName;                                   // 0x055C(0x0008)
	TArray<struct FInputMatchRequest>                  InputRequests;                                            // 0x0564(0x000C)
	float                                              LastBroadcastTime;                                        // 0x0570(0x0004)
	struct FString                                     LastBroadcastString[0x4];                                 // 0x0574(0x000C)
	TArray<struct FName>                               PendingMapChangeLevelNames;                               // 0x05A4(0x000C)
	class ACoverReplicator*                            MyCoverReplicator;                                        // 0x05B0(0x0004)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                            // 0x05B4(0x000C)
	float                                              SpectatorCameraSpeed;                                     // 0x05C0(0x0004)
	class UNetConnection*                              PendingSwapConnection;                                    // 0x05C4(0x0004)
	float                                              MinRespawnDelay;                                          // 0x05C8(0x0004)
	int                                                MaxConcurrentHearSounds;                                  // 0x05CC(0x0004)
	TArray<class UAudioComponent*>                     HearSoundActiveComponents;                                // 0x05D0(0x000C)
	TArray<class UAudioComponent*>                     HearSoundPoolComponents;                                  // 0x05DC(0x000C)
	TArray<class AActor*>                              HiddenActors;                                             // 0x05E8(0x000C)
	float                                              LastSpectatorStateSynchTime;                              // 0x05F4(0x0004)
	struct FScriptDelegate                             __CanUnpause__Delegate;                                   // 0x05F8(0x000C)
	struct FScriptDelegate                             __InputMatchDelegate__Delegate;                           // 0x0604(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}


	void ClientExecMultiCastFunctionOnlyActorParam();
	void ClientExecMultiCastFunctionOnlyNameParam();
	void ClientExecMultiCastFunctionOnlyVecAndByteParam_Unreliable();
	void ClientExecMultiCastFunctionOnlyVecAndByteParam();
	void ClientExecMultiCastFunctionOnlyByteParam();
	void ClientExecMultiCastFunctionOnlyVecParam_Unreliable();
	void ClientExecMultiCastFunctionOnlyVecParam();
	void ClientExecMultiCastFunctionOnlyFloatParam();
	void ClientExecMultiCastFunctionNoParams();
	void ClientExecMultiCastFunctionNoParams_Unreliable();
	void ClientExecMultiCastFunction();
	void ToggleSpectator();
	void SkippedMovie();
	void LogOutBugItAIGoToLogFile();
	void LogOutBugItGoToLogFile();
	void DisableDebugAI();
	void BugItStringCreator();
	void BugItAI();
	void LogLoc();
	void BugIt();
	void BugItWorker();
	void BugItGoString();
	void BugItGo();
	void OnSetSoundMode();
	void ClientSpawnCameraLensEffect();
	void ClientStopCameraAnim();
	void ClientPlayCameraAnim();
	void OnCameraShake();
	void ClientStopCameraShake();
	void ClientPlayCameraShake();
	void DoForceFeedbackForScreenShake();
	void InputMatchDelegate();
	void Sentinel_PostAcquireTravelTheWorldPoints();
	void Sentinel_PreAcquireTravelTheWorldPoints();
	void Sentinel_SetupForGamebasedTravelTheWorld();
	void OnFlyThroughHasEnded();
	void GetAchievementProgression();
	void STATIC_GetPartyGameTypeName();
	void STATIC_GetPartyMapName();
	void IsPartyLeader();
	void ClientPrestreamTextures();
	void ClientSetForceMipLevelsToBeResident();
	void ClientControlMovieTexture();
	void GetSplitscreenPlayerCount();
	void GetSplitscreenPlayerControllerByIndex();
	void GetSplitscreenPlayerByIndex();
	void HasSplitscreenPlayer();
	void IsSplitscreenPlayer();
	void IsPrimaryPlayer();
	void ClientReturnToParty();
	void OnJoinTravelToSessionComplete();
	void ClientTravelToSession();
	void PathClear();
	void PathChild();
	void PathStep();
	void SoakPause();
	void IncrementNumberOfMatchesPlayed();
	void CanViewUserCreatedContent();
	void ClientEndOnlineGame();
	void ClientStartOnlineGame();
	void ServerRegisterClientStatGuid();
	void OnRegisterHostStatGuidComplete();
	void ClientRegisterHostStatGuid();
	void RemoveAllDebugStrings();
	void RemoveDebugText();
	void AddDebugText();
	void DrawDebugTextList();
	void OnDestroy();
	void ClientStartNetworkedVoice();
	void ClientStopNetworkedVoice();
	void ClientSetHostUniqueId();
	void ClientWriteLeaderboardStats();
	void ClientWriteOnlinePlayerScores();
	void ClientArbitratedMatchEnded();
	void NotifyJoiningGameFromInvite();
	void NotifyNotEnoughSpaceInInvite();
	void NotifyNotAllPlayersCanJoinInvite();
	void NotifyInviteFailed();
	void OnInviteJoinComplete();
	void OnDestroyForInviteComplete();
	void OnEndForInviteComplete();
	void ClearInviteDelegates();
	void CanAllPlayersPlayOnline();
	void InviteHasEnoughSpace();
	void OnGameInviteAccepted();
	void ServerRegisteredForArbitration();
	void OnArbitrationRegisterComplete();
	void ClientRegisterForArbitration();
	void ClientWasKicked();
	void IsShowingSubtitles();
	void SetShowSubtitles();
	void NotifyDirectorControl();
	void ServerUnmutePlayer();
	void RetryMuting();
	void ServerMutePlayer();
	void GameplayUnmutePlayer();
	void GameplayMutePlayer();
	void ClientUnmutePlayer();
	void ClientMutePlayer();
	void ClientVoiceHandshakeComplete();
	void STATIC_GetPlayerControllerFromNetId();
	void ClientSetOnlineStatus();
	void SeamlessTravelFrom();
	void SeamlessTravelTo();
	void GetSeamlessTravelActorList();
	void IsPlayerMuted();
	void GetUIController();
	void SaveActorConfig();
	void SaveClassConfig();
	void ClientSetBlockOnAsyncLoading();
	void ClientFlushLevelStreaming();
	void ClientCancelPendingMapChange();
	void ClientCommitMapChange();
	void DelayedPrepareMapChange();
	void ClientPrepareMapChange();
	void ServerUpdateLevelVisibility();
	void ClientUpdateLevelStreamingStatus();
	void LevelStreamingStatusChanged();
	void ClientForceGarbageCollection();
	void OnConsoleCommand();
	void ResetPlayerMovementInput();
	void IsLookInputIgnored();
	void IgnoreLookInput();
	void IsMoveInputIgnored();
	void IgnoreMoveInput();
	void ClientSetCinematicMode();
	void SetCinematicMode();
	void OnToggleCinematicMode();
	void IsForceFeedbackAllowed();
	void ClientStopForceFeedbackWaveform();
	void ClientPlayForceFeedbackWaveform();
	void PlayRumble();
	void OnForceFeedback();
	void NotifyTakeHit();
	void ShowGameState();
	void ShowPlayerState();
	void ListCE();
	void ListConsoleEvents();
	void CE();
	void CauseEvent();
	void ServerCauseEvent();
	void OnToggleHUD();
	void OnSetCameraTarget();
	void ClientClearKismetText();
	void ClientDrawKismetText();
	void OnDrawText();
	void DisplayDebug();
	void ClientIgnoreLookInput();
	void ClientIgnoreMoveInput();
	void OnToggleInput();
	void DrawHUD();
	void CanRestartPlayer();
	void ServerViewSelf();
	void ViewAPlayer();
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerSetSpectatorLocation();
	void IsSpectating();
	void CheckJumpOrDuck();
	void ClearDoubleClick();
	void LimitViewRotation();
	void ProcessViewRotation();
	void UpdateRotation();
	void ViewShake();
	void GetPlayerViewPoint();
	void SpawnPlayerCamera();
	void ServerVerifyViewTarget();
	void GetViewTarget();
	void ClientSetViewTarget();
	void SetViewTargetWithBlend();
	void SetViewTarget();
	void IsLocalPlayerController();
	void GetFOVAngle();
	void AdjustFOV();
	void NotifyLanded();
	void AimHelpDot();
	void GetAdjustedAimFor();
	void CameraLookAtFinished();
	void AimingHelp();
	void PlayerMove();
	void PlayerTick();
	void NotifyChangedWeapon();
	void ClientGameEnded();
	void GameHasEnded();
	void ClientRestart();
	void EnterStartState();
	void ForceSingleNetUpdateFor();
	void HasClientLoadedCurrentWorld();
	void NotifyLoadedWorld();
	void ServerNotifyLoadedWorld();
	void Restart();
	void ClientSetProgressMessage();
	void SwitchLevel();
	void ServerChangeTeam();
	void ChangeTeam();
	void SwitchTeam();
	void ServerChangeName();
	void SetName();
	void ServerSuicide();
	void Suicide();
	void TriggerInteracted();
	void FindVehicleToDrive();
	void PerformedUseAction();
	void ServerUse();
	void Use();
	void GetTriggerUseList();
	void StopAltFire();
	void StartAltFire();
	void StopFire();
	void StartFire();
	void NextWeapon();
	void PrevWeapon();
	void ServerThrowWeapon();
	void ThrowWeapon();
	void UTrace();
	void ServerUTrace();
	void ConditionalPause();
	void ShowMenu();
	void ServerPause();
	void Pause();
	void IsPaused();
	void SetPause();
	void CanUnpause();
	void PauseRumbleForAllPlayers();
	void QuickLoad();
	void QuickSave();
	void LocalTravel();
	void RestartLevel();
	void ServerSpeech();
	void Speech();
	void ServerRestartGame();
	void HandleWalking();
	void CallServerMove();
	void ReplicateMove();
	void MoveLog();
	void CompressAccel();
	void GetFreeMove();
	void ClientUpdatePosition();
	void ClearAckedMoves();
	void ServerUpdatePing();
	void UpdateStateFromAdjustment();
	void LongClientAdjustPosition();
	void UpdatePing();
	void ServerSetNetSpeed();
	void ClientAdjustPosition();
	void ClientAckGoodMove();
	void ClientCapBandwidth();
	void ShortClientAdjustPosition();
	void VeryShortClientAdjustPosition();
	void MoveAutonomous();
	void ProcessMove();
	void ProcessDrive();
	void ServerDrive();
	void SendClientAdjustment();
	void ServerMove();
	void OldServerMove();
	void DualServerMove();
	void ForceDeathUpdate();
	void ClientVoiceMessage();
	void UsingFirstPersonCamera();
	void ClientSetCameraFade();
	void ResetCameraMode();
	void SetCameraMode();
	void ClientSetCameraMode();
	void ServerCamera();
	void Camera();
	void PreClientTravel();
	void ServerTeamSay();
	void TeamSay();
	void ClientAdminMessage();
	void ServerSay();
	void Say();
	void AllowTextMessage();
	void ServerMutate();
	void Mutate();
	void FOV();
	void ResetFOV();
	void SetFOV();
	void FixFOV();
	void Destroyed();
	void CleanupPawn();
	void ClearOnlineDelegates();
	void RegisterOnlineDelegates();
	void PlayBeepSound();
	void TeamMessage();
	void SpeakTTS();
	void TeamTalk();
	void Talk();
	void CreateTTSSoundCue();
	void AllowTTSMessageFrom();
	void CanCommunicate();
	void ClientMessage();
	void ClientPlayActorFaceFXAnim();
	void Kismet_ClientStopSound();
	void Kismet_ClientPlaySound();
	void IsClosestLocalPlayerToActor();
	void ClientHearSound();
	void GetPooledAudioComponent();
	void HearSoundFinished();
	void ClientPlaySound();
	void ReceiveLocalizedMessage();
	void CleanupPRI();
	void HandlePickup();
	void ClientSetHUD();
	void PawnDied();
	void UnPossess();
	void ServerAcknowledgePossession();
	void AcknowledgePossession();
	void Possess();
	void GivePawn();
	void AskForPawn();
	void ClientGotoState();
	void IsMouseAvailable();
	void IsKeyboardAvailable();
	void SetUseTiltForwardAndBack();
	void SetOnlyUseControllerTiltInput();
	void SetControllerTiltActive();
	void SetControllerTiltDesiredIfAvailable();
	void IsControllerTiltActive();
	void GetRumbleScale();
	void SetRumbleScale();
	void ReloadProfileSettings();
	void SetPlayerDataProvider();
	void UnregisterStandardPlayerDataStores();
	void UnregisterPlayerDataStores();
	void RegisterStandardPlayerDataStores();
	void RegisterCustomPlayerDataStores();
	void RegisterPlayerDataStores();
	void ClientInitializeDataStores();
	void InitInputSystem();
	void GetOnlineSubsystem();
	void PostControllerIdChange();
	void PreControllerIdChange();
	void CleanOutSavedMoves();
	void ClientReset();
	void Reset();
	void SpawnDefaultHUD();
	void EnableCheats();
	void AddCheats();
	void KickWarning();
	void ServerGivePawn();
	void ServerShortTimeout();
	void ResetTimeMargin();
	void PreRender();
	void ReceivedPlayer();
	void PostBeginPlay();
	void SpawnCoverReplicator();
	void CanUnpauseControllerConnected();
	void OnControllerChanged();
	void CanUnpauseExternalUI();
	void OnExternalUIChanged();
	void ForceClearUnpauseDelegates();
	void FellOutOfWorld();
	void CleanUpAudioComponents();
	void FindStairRotation();
	void CheckSpeedHack();
	void ServerProcessConvolve();
	void ClientConvolve();
	void SetAudioGroupVolume();
	void SetAllowMatureLanguage();
	void PasteFromClipboard();
	void CopyToClipboard();
	void GetDefaultURL();
	void UpdateURL();
	void ClientTravel();
	void IsPositionRelevant();
	void ConsoleCommand();
	void GetServerNetworkAddress();
	void GetPlayerNetworkAddress();
	void SetNetSpeed();
	void ClientDrawCoordinateSystem();
};


// Class Engine.CheatManager
// 0x0008 (0x0044 - 0x003C)
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                 // 0x003C(0x0004)
	class UClass*                                      DebugCameraControllerClass;                               // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}


	void LogParticleActivateSystemCalls();
	void LogPlaySoundCalls();
	void InitCheatManager();
	void VerbosePathDebug();
	void TestNavMeshPath();
	void SetOnlineDebugLevel();
	void TestLevel();
	void EnableDebugCamera();
	void ToggleDebugCamera();
	void StreamLevelOut();
	void OnlyLoadLevel();
	void StreamLevelIn();
	void SetLevelStreamingStatus();
	void AllWeapons();
	void Loaded();
	void ViewClass();
	void ViewBot();
	void ViewFlag();
	void ViewActor();
	void ViewPlayer();
	void ViewSelf();
	void RememberSpot();
	void FractureAllMeshesToMaximizeMemoryUsage();
	void FractureAllMeshes();
	void DestroyFractures();
	void PlayersOnly();
	void GiveWeapon();
	void Summon();
	void Avatar();
	void KillPawns();
	void KillAllPawns();
	void KillAll();
	void SetSpeed();
	void SetGravity();
	void SetJumpZ();
	void Slomo();
	void AffectedByHitEffects();
	void God();
	void AllAmmo();
	void Ghost();
	void Walk();
	void Fly();
	void Amphibious();
	void EndPath();
	void ChangeSize();
	void Teleport();
	void KillViewedActor();
	void WriteToLog();
	void FreezeFrame();
	void ListDynamicActors();
	void DebugPause();
	void DebugAI();
};


// Class Engine.Client
// 0x001C (0x0058 - 0x003C)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                                      // 0x0040(0x0004)
	float                                              DisplayGamma;                                             // 0x0044(0x0004)
	float                                              InitialButtonRepeatDelay;                                 // 0x0048(0x0004)
	float                                              ButtonRepeatDelay;                                        // 0x004C(0x0004)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Client");
		return ptr;
	}

};


// Class Engine.ClipPadEntry
// 0x0018 (0x0054 - 0x003C)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                                    // 0x003C(0x000C)
	struct FString                                     Text;                                                     // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ClipPadEntry");
		return ptr;
	}

};


// Class Engine.CodecMovie
// 0x0004 (0x0040 - 0x003C)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                         // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovie");
		return ptr;
	}

};


// Class Engine.CodecMovieBink
// 0x0020 (0x0060 - 0x0040)
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovieBink");
		return ptr;
	}

};


// Class Engine.CodecMovieFallback
// 0x0004 (0x0044 - 0x0040)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                              // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovieFallback");
		return ptr;
	}

};


// Class Engine.CurveEdPresetCurve
// 0x0018 (0x0054 - 0x003C)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                                // 0x003C(0x000C)
	TArray<struct FPresetGeneratedPoint>               Points;                                                   // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}

};


// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x003C - 0x003C)
class UCustomPropertyItemHandler : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CustomPropertyItemHandler");
		return ptr;
	}

};


// Class Engine.DamageType
// 0x004C (0x0088 - 0x003C)
class UDamageType : public UObject
{
public:
	struct FString                                     DeathString;                                              // 0x003C(0x000C)
	struct FString                                     FemaleSuicide;                                            // 0x0048(0x000C)
	struct FString                                     MaleSuicide;                                              // 0x0054(0x000C)
	unsigned long                                      bArmorStops : 1;                                          // 0x0060(0x0004)
	unsigned long                                      bAlwaysGibs : 1;                                          // 0x0060(0x0004)
	unsigned long                                      bNeverGibs : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bLocationalHit : 1;                                       // 0x0060(0x0004)
	unsigned long                                      bCausesBlood : 1;                                         // 0x0060(0x0004)
	unsigned long                                      bCausedByWorld : 1;                                       // 0x0060(0x0004)
	unsigned long                                      bExtraMomentumZ : 1;                                      // 0x0060(0x0004)
	unsigned long                                      bDoForceFeedback : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bCausesFracture : 1;                                      // 0x0060(0x0004)
	unsigned long                                      bIgnoreDriverDamageMult : 1;                              // 0x0060(0x0004)
	unsigned long                                      bRadialDamageVelChange : 1;                               // 0x0060(0x0004)
	float                                              KDamageImpulse;                                           // 0x0064(0x0004)
	float                                              KDeathVel;                                                // 0x0068(0x0004)
	float                                              KDeathUpKick;                                             // 0x006C(0x0004)
	float                                              RadialDamageImpulse;                                      // 0x0070(0x0004)
	float                                              VehicleDamageScaling;                                     // 0x0074(0x0004)
	float                                              VehicleMomentumScaling;                                   // 0x0078(0x0004)
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                        // 0x007C(0x0004)
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                         // 0x0080(0x0004)
	float                                              FracturedMeshDamage;                                      // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}


	void STATIC_VehicleDamageScalingFor();
	void STATIC_SuicideMessage();
	void STATIC_DeathMessage();
};


// Class Engine.KillZDamageType
// 0x0000 (0x0088 - 0x0088)
class UKillZDamageType : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KillZDamageType");
		return ptr;
	}

};


// Class Engine.DebugManager
// 0x0004 (0x0040 - 0x003C)
class UDebugManager : public UObject
{
public:
	int                                                FirstColoredMip;                                          // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugManager");
		return ptr;
	}

};


// Class Engine.Dictionary
// 0x003C (0x0078 - 0x003C)
class UDictionary : public UObject
{
public:
	struct FMap_Mirror                                 InnerMap;                                                 // 0x003C(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Dictionary");
		return ptr;
	}


	void IsEmpty();
	void Clear();
	void ToArray();
	void GetKeyByValue();
	void Get();
	void Remove();
	void Add();
};


// Class Engine.DistributionFloatConstant
// 0x0004 (0x0054 - 0x0050)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x006D - 0x0054)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0054(0x0008)
	float                                              MinInput;                                                 // 0x005C(0x0004)
	float                                              MaxInput;                                                 // 0x0060(0x0004)
	float                                              MinOutput;                                                // 0x0064(0x0004)
	float                                              MaxOutput;                                                // 0x0068(0x0004)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x006C(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0050(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0058 - 0x0050)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                      // 0x0050(0x0004)
	float                                              Max;                                                      // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0050(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0011 (0x0061 - 0x0050)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0050(0x000C)
	unsigned long                                      bLockAxes : 1;                                            // 0x005C(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x003E (0x009F - 0x0061)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FName                                       ParameterName;                                            // 0x0064(0x0008)
	struct FVector                                     MinInput;                                                 // 0x006C(0x000C)
	struct FVector                                     MaxInput;                                                 // 0x0078(0x000C)
	struct FVector                                     MinOutput;                                                // 0x0084(0x000C)
	struct FVector                                     MaxOutput;                                                // 0x0090(0x000C)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x009C(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0015 (0x0065 - 0x0050)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0050(0x0010)
	unsigned long                                      bLockAxes : 1;                                            // 0x0060(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0064(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0020 (0x0070 - 0x0050)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0050(0x000C)
	struct FVector                                     Min;                                                      // 0x005C(0x000C)
	unsigned long                                      bLockAxes : 1;                                            // 0x0068(0x0004)
	unsigned long                                      bUseExtremes : 1;                                         // 0x0068(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x006C(0x0001)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x006D(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0019 (0x0069 - 0x0050)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0050(0x0010)
	unsigned long                                      bLockAxes1 : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bLockAxes2 : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bUseExtremes : 1;                                         // 0x0060(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x0064(0x0001)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0066(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}

};


// Class Engine.Download
// 0x0A34 (0x0A70 - 0x003C)
class UDownload : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA34];                                     // 0x003C(0x0A34) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Download");
		return ptr;
	}

};


// Class Engine.ChannelDownload
// 0x0004 (0x0A74 - 0x0A70)
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A70(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChannelDownload");
		return ptr;
	}

};


// Class Engine.EdCoordSystem
// 0x0050 (0x008C - 0x003C)
class UEdCoordSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FMatrix                                     M;                                                        // 0x0040(0x0040)
	struct FString                                     Desc;                                                     // 0x0080(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdCoordSystem");
		return ptr;
	}

};


// Class Engine.EditorLinkSelectionInterface
// 0x0000 (0x003C - 0x003C)
class UEditorLinkSelectionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EditorLinkSelectionInterface");
		return ptr;
	}

};


// Class Engine.FaceFXAnimSet
// 0x0030 (0x006C - 0x003C)
class UFaceFXAnimSet : public UObject
{
public:
	class UFaceFXAsset*                                DefaultFaceFXAsset;                                       // 0x003C(0x0004) (ExportObject)
	struct FPointer                                    InternalFaceFXAnimSet;                                    // 0x0040(0x0004)
	TArray<unsigned char>                              RawFaceFXAnimSetBytes;                                    // 0x0044(0x000C)
	TArray<unsigned char>                              RawFaceFXMiniSessionBytes;                                // 0x0050(0x000C)
	TArray<class USoundCue*>                           ReferencedSoundCues;                                      // 0x005C(0x000C) (ExportObject, OptionalParm)
	int                                                NumLoadErrors;                                            // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FaceFXAnimSet");
		return ptr;
	}

};


// Class Engine.FaceFXAsset
// 0x0048 (0x0084 - 0x003C)
class UFaceFXAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                          // 0x003C(0x0004) (ExportObject)
	struct FPointer                                    FaceFXActor;                                              // 0x0040(0x0004)
	TArray<unsigned char>                              RawFaceFXActorBytes;                                      // 0x0044(0x000C)
	TArray<unsigned char>                              RawFaceFXSessionBytes;                                    // 0x0050(0x000C)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x005C(0x000C) (ExportObject)
	TArray<class UFaceFXAnimSet*>                      MountedFaceFXAnimSets;                                    // 0x0068(0x000C)
	TArray<class USoundCue*>                           ReferencedSoundCues;                                      // 0x0074(0x000C) (ExportObject, OptionalParm)
	int                                                NumLoadErrors;                                            // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FaceFXAsset");
		return ptr;
	}


	void UnmountFaceFXAnimSet();
	void MountFaceFXAnimSet();
};


// Class Engine.FontImportOptions
// 0x0094 (0x00D0 - 0x003C)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                     // 0x003C(0x0094)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}

};


// Class Engine.Font
// 0x0100 (0x013C - 0x003C)
class UFont : public UObject
{
public:
	TArray<struct FFontCharacter>                      Characters;                                               // 0x003C(0x000C)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0048(0x000C)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0054(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Font.CharRemap
	int                                                IsRemapped;                                               // 0x0090(0x0004)
	int                                                Kerning;                                                  // 0x0094(0x0004)
	struct FFontImportOptionsData                      ImportOptions;                                            // 0x0098(0x0094)
	int                                                NumCharacters;                                            // 0x012C(0x0004)
	TArray<int>                                        MaxCharHeight;                                            // 0x0130(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}


	void GetMaxCharHeight();
	void GetAuthoredViewportHeight();
	void GetScalingFactor();
	void GetResolutionPageIndex();
};


// Class Engine.MultiFont
// 0x000C (0x0148 - 0x013C)
class UMultiFont : public UFont
{
public:
	TArray<float>                                      ResolutionTestTable;                                      // 0x013C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MultiFont");
		return ptr;
	}


	void GetResolutionTestTableIndex();
};


// Class Engine.ForceFeedbackManager
// 0x0014 (0x0050 - 0x003C)
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bIsPaused : 1;                                            // 0x003C(0x0004)
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x0040(0x0004)
	int                                                CurrentSample;                                            // 0x0044(0x0004)
	float                                              ElapsedTime;                                              // 0x0048(0x0004)
	float                                              ScaleAllWaveformsBy;                                      // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackManager");
		return ptr;
	}


	void PauseWaveform();
	void StopForceFeedbackWaveform();
	void PlayForceFeedbackWaveform();
};


// Class Engine.ForceFeedbackWaveform
// 0x0010 (0x004C - 0x003C)
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                           // 0x003C(0x0004)
	TArray<struct FWaveformSample>                     Samples;                                                  // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackWaveform");
		return ptr;
	}

};


// Class Engine.GameplayEvents
// 0x00F0 (0x012C - 0x003C)
class UGameplayEvents : public UObject
{
public:
	struct FPointer                                    Archive;                                                  // 0x003C(0x0004)
	struct FString                                     StatsFileName;                                            // 0x0040(0x000C)
	struct FGameplayEventsHeader                       Header;                                                   // 0x004C(0x0018)
	struct FGameSessionInformation                     CurrentSessionInfo;                                       // 0x0064(0x005C)
	TArray<struct FPlayerInformationNew>               PlayerList;                                               // 0x00C0(0x000C)
	TArray<struct FTeamInformation>                    TeamList;                                                 // 0x00CC(0x000C)
	TArray<struct FGameplayEventMetaData>              SupportedEvents;                                          // 0x00D8(0x000C)
	TArray<struct FWeaponClassEventData>               WeaponClassArray;                                         // 0x00E4(0x000C)
	TArray<struct FDamageClassEventData>               DamageClassArray;                                         // 0x00F0(0x000C)
	TArray<struct FProjectileClassEventData>           ProjectileClassArray;                                     // 0x00FC(0x000C)
	TArray<struct FPawnClassEventData>                 PawnClassArray;                                           // 0x0108(0x000C)
	TArray<struct FString>                             ActorArray;                                               // 0x0114(0x000C)
	TArray<struct FString>                             SoundCueArray;                                            // 0x0120(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEvents");
		return ptr;
	}


	void GetFilename();
	void CloseStatsFile();
	void OpenStatsFile();
};


// Class Engine.GameplayEventsReader
// 0x000C (0x0138 - 0x012C)
class UGameplayEventsReader : public UGameplayEvents
{
public:
	TArray<int>                                        EventIDFilter;                                            // 0x012C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEventsReader");
		return ptr;
	}


	void GetSessionDuration();
	void GetSessionEnd();
	void GetSessionStart();
	void GetSessionTimestamp();
	void GetPlatform();
	void GetTitleID();
	void GetSessionID();
	void IsEventFiltered();
	void RemoveFilter();
	void AddFilter();
	void ProcessStream();
	void SerializeHeader();
	void CloseStatsFile();
	void OpenStatsFile();
};


// Class Engine.GameplayEventsWriter
// 0x0004 (0x0130 - 0x012C)
class UGameplayEventsWriter : public UGameplayEvents
{
public:
	class AGameInfo*                                   Game;                                                     // 0x012C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEventsWriter");
		return ptr;
	}


	void LogSystemPollEvents();
	void LogProjectileIntEvent();
	void LogDamageEvent();
	void LogWeaponIntEvent();
	void LogPlayerPlayerEvent();
	void LogPlayerKillDeath();
	void LogAllPlayerPositionsEvent();
	void LogPlayerLoginChange();
	void LogPlayerSpawnEvent();
	void LogPlayerStringEvent();
	void LogPlayerFloatEvent();
	void LogPlayerIntEvent();
	void LogTeamIntEvent();
	void LogGameStringEvent();
	void LogGameIntEvent();
	void Poll();
	void SerializeFooter();
	void SerializeHeader();
	void CloseStatsFile();
	void OpenStatsFile();
	void IsSessionInProgress();
	void EndLogging();
	void StartLogging();
};


// Class Engine.GameViewportClient
// 0x00EC (0x0128 - 0x003C)
class UGameViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                                  // 0x003C(0x0004)
	struct FPointer                                    VfTable_FExec;                                            // 0x0040(0x0004)
	struct FPointer                                    Viewport;                                                 // 0x0044(0x0004)
	struct FPointer                                    ViewportFrame;                                            // 0x0048(0x0004)
	TArray<class UInteraction*>                        GlobalInteractions;                                       // 0x004C(0x000C)
	class UClass*                                      UIControllerClass;                                        // 0x0058(0x0004)
	class UUIInteraction*                              UIController;                                             // 0x005C(0x0004)
	class UConsole*                                    ViewportConsole;                                          // 0x0060(0x0004)
	struct FQWord                                      ShowFlags;                                                // 0x0064(0x0008)
	struct FString                                     LoadingMessage;                                           // 0x006C(0x000C)
	struct FString                                     SavingMessage;                                            // 0x0078(0x000C)
	struct FString                                     ConnectingMessage;                                        // 0x0084(0x000C)
	struct FString                                     PausedMessage;                                            // 0x0090(0x000C)
	struct FString                                     PrecachingMessage;                                        // 0x009C(0x000C)
	unsigned long                                      bShowTitleSafeZone : 1;                                   // 0x00A8(0x0004)
	unsigned long                                      bDisplayingUIMouseCursor : 1;                             // 0x00A8(0x0004)
	unsigned long                                      bUIMouseCaptureOverride : 1;                              // 0x00A8(0x0004)
	unsigned long                                      bDisableWorldRendering : 1;                               // 0x00A8(0x0004)
	struct FTitleSafeZoneArea                          TitleSafeZone;                                            // 0x00AC(0x0010)
	TArray<struct FSplitscreenData>                    SplitscreenInfo;                                          // 0x00BC(0x000C)
	TEnumAsByte<ESplitScreenType>                      DesiredSplitscreenType;                                   // 0x00C8(0x0001)
	TEnumAsByte<ESplitScreenType>                      ActiveSplitscreenType;                                    // 0x00C9(0x0001)
	TEnumAsByte<ESplitScreenType>                      Default2PSplitType;                                       // 0x00CA(0x0001)
	TEnumAsByte<ESplitScreenType>                      Default3PSplitType;                                       // 0x00CB(0x0001)
	struct FString                                     ProgressMessage[0x2];                                     // 0x00CC(0x000C)
	float                                              ProgressTimeOut;                                          // 0x00E4(0x0004)
	float                                              ProgressFadeTime;                                         // 0x00E8(0x0004)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                          // 0x00EC(0x000C)
	TArray<struct FTouchTrack>                         Tracks;                                                   // 0x00F8(0x000C)
	struct FScriptDelegate                             __HandleInputKey__Delegate;                               // 0x0104(0x000C)
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                              // 0x0110(0x000C)
	struct FScriptDelegate                             __HandleInputChar__Delegate;                              // 0x011C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}


	void WorldPreBeginPlay();
	void ClearProgressMessages();
	void SetProgressTime();
	void NotifyConnectionError();
	void SetProgressMessage();
	void NotifyDownloadProgress();
	void RemoveLocalPlayer();
	void AddLocalPlayer();
	void NotifyPlayerRemoved();
	void NotifyPlayerAdded();
	void DrawTransitionMessage();
	void DrawTransition();
	void DisplayProgressMessage();
	void PostRender();
	void DrawTitleSafeArea();
	void Tick();
	void CalculatePixelCenter();
	void CalculateDeadZoneForAllSides();
	void CalculateDeadZone();
	void CalculateSafeZoneValues();
	void GetScreenSizeForPlayer();
	void GetPixelSizeOfScreen();
	void HasRightSafeZone();
	void HasLeftSafeZone();
	void HasBottomSafeZone();
	void HasTopSafeZone();
	void ConvertLocalPlayerToGamePlayerIndex();
	void GetSubtitleRegion();
	void LayoutPlayers();
	void UpdateActiveSplitscreenType();
	void GetSplitscreenConfiguration();
	void SetSplitscreenConfiguration();
	void GameSessionEnded();
	void InsertInteraction();
	void CreateInitialPlayer();
	void Init();
	void FindPlayerByControllerId();
	void RemovePlayer();
	void CreatePlayer();
	void EditBoxFocused();
	void TrackUp();
	void TrackMove();
	void TrackDown();
	void IsConsolePointerAvailable();
	void ShouldForceFullscreenViewport();
	void IsFullScreenViewport();
	void GetViewportSize();
	void ConsoleCommand();
	void HandleInputChar();
	void HandleInputAxis();
	void HandleInputKey();
};


// Class Engine.GuidCache
// 0x0048 (0x0084 - 0x003C)
class UGuidCache : public UObject
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x003C(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GuidCache");
		return ptr;
	}

};


// Class Engine.IniLocPatcher
// 0x0020 (0x005C - 0x003C)
class UIniLocPatcher : public UObject
{
public:
	TArray<struct FIniLocFileEntry>                    Files;                                                    // 0x003C(0x000C)
	TScriptInterface<class UOnlineSystemInterface>     SystemInterface;                                          // 0x0048(0x0008)
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;                      // 0x0050(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.IniLocPatcher");
		return ptr;
	}


	void ClearCachedFiles();
	void ClearReadFileDelegate();
	void AddReadFileDelegate();
	void AddFileToDownload();
	void ProcessIniLocFile();
	void OnReadFileComplete();
	void DownloadFiles();
	void Init();
	void OnReadTitleFileComplete();
};


// Class Engine.Interface_NavigationHandle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavigationHandle : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavigationHandle");
		return ptr;
	}


	void GetSpreadValue();
	void NotifyPathChanged();
};


// Class Engine.InterpCurveEdSetup
// 0x0010 (0x004C - 0x003C)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                     // 0x003C(0x000C)
	int                                                ActiveTab;                                                // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x0020 (0x005C - 0x003C)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                          // 0x003C(0x0004)
	struct FPointer                                    CurveEdVTable;                                            // 0x0040(0x0004)
	class UClass*                                      TrackInstClass;                                           // 0x0044(0x0004)
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                          // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     TrackTitle;                                               // 0x004C(0x000C)
	unsigned long                                      bOnePerGroup : 1;                                         // 0x0058(0x0004)
	unsigned long                                      bDirGroupOnly : 1;                                        // 0x0058(0x0004)
	unsigned long                                      bDisableTrack : 1;                                        // 0x0058(0x0004)
	unsigned long                                      bIsAnimControlTrack : 1;                                  // 0x0058(0x0004)
	unsigned long                                      bVisible : 1;                                             // 0x0058(0x0004)
	unsigned long                                      bIsSelected : 1;                                          // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}

};


// Class Engine.LevelBase
// 0x0054 (0x0090 - 0x003C)
class ULevelBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x54];                                      // 0x003C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelBase");
		return ptr;
	}

};


// Class Engine.Level
// 0x01D0 (0x0260 - 0x0090)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[0x9C];                                      // 0x0090(0x009C) MISSED OFFSET
	float                                              LightmapTotalSize;                                        // 0x012C(0x0004)
	float                                              ShadowmapTotalSize;                                       // 0x0130(0x0004)
	unsigned char                                      UnknownData01[0x12C];                                     // 0x0134(0x012C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}

};


// Class Engine.PendingLevel
// 0x0030 (0x00C0 - 0x0090)
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PendingLevel");
		return ptr;
	}

};


// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x00C0 - 0x00C0)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoPlayPendingLevel");
		return ptr;
	}

};


// Class Engine.NetPendingLevel
// 0x0000 (0x00C0 - 0x00C0)
class UNetPendingLevel : public UPendingLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetPendingLevel");
		return ptr;
	}

};


// Class Engine.LevelStreaming
// 0x004C (0x0088 - 0x003C)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                              // 0x003C(0x0008)
	class ULevel*                                      LoadedLevel;                                              // 0x0044(0x0004)
	struct FVector                                     Offset;                                                   // 0x0048(0x000C)
	struct FVector                                     OldOffset;                                                // 0x0054(0x000C)
	unsigned long                                      bIsVisible : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bHasLoadRequestPending : 1;                               // 0x0060(0x0004)
	unsigned long                                      bHasUnloadRequestPending : 1;                             // 0x0060(0x0004)
	unsigned long                                      bShouldBeVisibleInEditor : 1;                             // 0x0060(0x0004)
	unsigned long                                      bBoundingBoxVisible : 1;                                  // 0x0060(0x0004)
	unsigned long                                      bLocked : 1;                                              // 0x0060(0x0004)
	unsigned long                                      bIsFullyStatic : 1;                                       // 0x0060(0x0004)
	unsigned long                                      bShouldBeLoaded : 1;                                      // 0x0060(0x0004)
	unsigned long                                      bShouldBeVisible : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x0060(0x0004)
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                        // 0x0060(0x0004)
	struct FColor                                      DrawColor;                                                // 0x0064(0x0004)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                   // 0x0068(0x000C)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x0074(0x0004)
	float                                              LastVolumeUnloadRequestTime;                              // 0x0078(0x0004)
	TArray<struct FString>                             Keywords;                                                 // 0x007C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}

};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0004 (0x008C - 0x0088)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	unsigned long                                      bIsProceduralBuildingLODLevel : 1;                        // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		return ptr;
	}

};


// Class Engine.LevelStreamingDistance
// 0x0010 (0x0098 - 0x0088)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                                   // 0x0088(0x000C)
	float                                              MaxDistance;                                              // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingDistance");
		return ptr;
	}

};


// Class Engine.LevelStreamingKismet
// 0x0000 (0x0088 - 0x0088)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingKismet");
		return ptr;
	}

};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0088 - 0x0088)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}

};


// Class Engine.LightmappedSurfaceCollection
// 0x0010 (0x004C - 0x003C)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                              // 0x003C(0x0004)
	TArray<int>                                        Surfaces;                                                 // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		return ptr;
	}

};


// Class Engine.LightmassLevelSettings
// 0x0030 (0x006C - 0x003C)
class ULightmassLevelSettings : public UObject
{
public:
	int                                                NumIndirectLightingBounces;                               // 0x003C(0x0004)
	struct FColor                                      EnvironmentColor;                                         // 0x0040(0x0004)
	float                                              EnvironmentIntensity;                                     // 0x0044(0x0004)
	float                                              EmissiveBoost;                                            // 0x0048(0x0004)
	float                                              DiffuseBoost;                                             // 0x004C(0x0004)
	float                                              SpecularBoost;                                            // 0x0050(0x0004)
	unsigned long                                      bUseAmbientOcclusion : 1;                                 // 0x0054(0x0004)
	unsigned long                                      bVisualizeAmbientOcclusion : 1;                           // 0x0054(0x0004)
	float                                              DirectIlluminationOcclusionFraction;                      // 0x0058(0x0004)
	float                                              IndirectIlluminationOcclusionFraction;                    // 0x005C(0x0004)
	float                                              OcclusionExponent;                                        // 0x0060(0x0004)
	float                                              FullyOccludedSamplesFraction;                             // 0x0064(0x0004)
	float                                              MaxOcclusionDistance;                                     // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassLevelSettings");
		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x001C (0x0058 - 0x003C)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x003C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		return ptr;
	}

};


// Class Engine.MapInfo
// 0x0058 (0x0094 - 0x003C)
class UMapInfo : public UObject
{
public:
	float                                              NavMeshGen_StepSize;                                      // 0x003C(0x0004)
	float                                              NavMeshGen_EntityHalfHeight;                              // 0x0040(0x0004)
	float                                              NavMeshGen_StartingHeightOffset;                          // 0x0044(0x0004)
	float                                              NavMeshGen_MaxDropHeight;                                 // 0x0048(0x0004)
	float                                              NavMeshGen_MaxStepHeight;                                 // 0x004C(0x0004)
	float                                              NavMeshGen_VertZDeltaSnapThresh;                          // 0x0050(0x0004)
	float                                              NavMeshGen_MinPolyArea;                                   // 0x0054(0x0004)
	float                                              NavMeshGen_BorderBackfill_CheckDist;                      // 0x0058(0x0004)
	float                                              NavMeshGen_MinMergeDotAreaThreshold;                      // 0x005C(0x0004)
	float                                              NavMeshGen_MinMergeDotSmallArea;                          // 0x0060(0x0004)
	float                                              NavMeshGen_MinMergeDotLargeArea;                          // 0x0064(0x0004)
	float                                              NavMeshGen_MaxPolyHeight;                                 // 0x0068(0x0004)
	float                                              NavMeshGen_HeightMergeThreshold;                          // 0x006C(0x0004)
	float                                              NavMeshGen_EdgeMaxDelta;                                  // 0x0070(0x0004)
	float                                              NavMeshGen_MaxGroundCheckSize;                            // 0x0074(0x0004)
	float                                              NavMeshGen_MinEdgeLength;                                 // 0x0078(0x0004)
	float                                              NavMeshGen_WalkableFloorZ;                                // 0x007C(0x0004)
	int                                                NavMeshGen_NumSubdivisions;                               // 0x0080(0x0004)
	float                                              NavMeshGen_ConvexTolerance;                               // 0x0084(0x0004)
	float                                              NavMeshGen_ObstacleGapThreshold;                          // 0x0088(0x0004)
	float                                              NavMeshGen_MaxPolyDotEdge;                                // 0x008C(0x0004)
	struct FNavMeshGenerationVars                      NavMeshGen_DebugGenerationVars;                           // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MapInfo");
		return ptr;
	}


	void AllowConsole();
	void ApplyNavigationMeshChanges();
};


// Class Engine.Surface
// 0x0000 (0x003C - 0x003C)
class USurface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Surface");
		return ptr;
	}


	void GetSurfaceHeight();
	void GetSurfaceWidth();
};


// Class Engine.MaterialInterface
// 0x0050 (0x008C - 0x003C)
class UMaterialInterface : public USurface
{
public:
	struct FRenderCommandFence_Mirror                  ParentRefFence;                                           // 0x003C(0x0004)
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                        // 0x0040(0x0018)
	struct FString                                     PreviewMesh;                                              // 0x0058(0x000C) (ExportObject)
	struct FGuid                                       LightingGuid;                                             // 0x0064(0x0010)
	class UTexture*                                    FlattenedTexture;                                         // 0x0074(0x0004) (EditInlineUse)
	class UTexture*                                    FlattenedTextureOverride;                                 // 0x0078(0x0004)
	struct FGuid                                       ModificationGUID;                                         // 0x007C(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInterface");
		return ptr;
	}


	void SetForceMipLevelsToBeResident();
	void GetVectorCurveParameterValue();
	void GetVectorParameterValue();
	void GetTextureParameterValue();
	void GetScalarCurveParameterValue();
	void GetScalarParameterValue();
	void GetFontParameterValue();
	void GetPhysicalMaterial();
	void GetMaterial();
};


// Class Engine.Material
// 0x02FC (0x0388 - 0x008C)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x008C(0x0004)
	class UClass*                                      PhysicalMaterial;                                         // 0x0090(0x0004)
	class UTexture2D*                                  PhysMaterialMask;                                         // 0x0094(0x0004)
	int                                                PhysMaterialMaskUVChannel;                                // 0x0098(0x0004)
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                                    // 0x009C(0x0004)
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                                    // 0x00A0(0x0004)
	struct FColorMaterialInput                         DiffuseColor;                                             // 0x00A4(0x0024)
	struct FScalarMaterialInput                        DiffusePower;                                             // 0x00C8(0x0024)
	struct FColorMaterialInput                         SpecularColor;                                            // 0x00EC(0x0024)
	struct FScalarMaterialInput                        SpecularPower;                                            // 0x0110(0x0024)
	struct FVectorMaterialInput                        Normal;                                                   // 0x0134(0x002C)
	struct FColorMaterialInput                         EmissiveColor;                                            // 0x0160(0x0024)
	struct FScalarMaterialInput                        Opacity;                                                  // 0x0184(0x0024)
	struct FScalarMaterialInput                        OpacityMask;                                              // 0x01A8(0x0024)
	float                                              OpacityMaskClipValue;                                     // 0x01CC(0x0004)
	struct FVector2MaterialInput                       Distortion;                                               // 0x01D0(0x0028)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x01F8(0x0001)
	TEnumAsByte<EMaterialLightingModel>                LightingModel;                                            // 0x01F9(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01FA(0x0002) MISSED OFFSET
	struct FColorMaterialInput                         CustomLighting;                                           // 0x01FC(0x0024)
	struct FColorMaterialInput                         CustomSkylightDiffuse;                                    // 0x0220(0x0024)
	struct FVectorMaterialInput                        AnisotropicDirection;                                     // 0x0244(0x002C)
	struct FScalarMaterialInput                        TwoSidedLightingMask;                                     // 0x0270(0x0024)
	struct FColorMaterialInput                         TwoSidedLightingColor;                                    // 0x0294(0x0024)
	struct FVectorMaterialInput                        WorldPositionOffset;                                      // 0x02B8(0x002C)
	unsigned long                                      TwoSided : 1;                                             // 0x02E4(0x0004)
	unsigned long                                      TwoSidedSeparatePass : 1;                                 // 0x02E4(0x0004)
	unsigned long                                      bDisableDepthTest : 1;                                    // 0x02E4(0x0004)
	unsigned long                                      bAllowFog : 1;                                            // 0x02E4(0x0004)
	unsigned long                                      bAllowTranslucencyDoF : 1;                                // 0x02E4(0x0004)
	unsigned long                                      bUseOneLayerDistortion : 1;                               // 0x02E4(0x0004)
	unsigned long                                      bUseLitTranslucencyDepthPass : 1;                         // 0x02E4(0x0004)
	unsigned long                                      bUseLitTranslucencyPostRenderDepthPass : 1;               // 0x02E4(0x0004)
	unsigned long                                      bCastLitTranslucencyShadowAsMasked : 1;                   // 0x02E4(0x0004)
	unsigned long                                      bUsedAsLightFunction : 1;                                 // 0x02E4(0x0004)
	unsigned long                                      bUsedWithFogVolumes : 1;                                  // 0x02E4(0x0004)
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x02E4(0x0004)
	unsigned long                                      bUsedWithSkeletalMesh : 1;                                // 0x02E4(0x0004)
	unsigned long                                      bUsedWithFracturedMeshes : 1;                             // 0x02E4(0x0004)
	unsigned long                                      bUsedWithParticleSystem : 1;                              // 0x02E4(0x0004)
	unsigned long                                      bUsedWithParticleSprites : 1;                             // 0x02E4(0x0004)
	unsigned long                                      bUsedWithBeamTrails : 1;                                  // 0x02E4(0x0004)
	unsigned long                                      bUsedWithParticleSubUV : 1;                               // 0x02E4(0x0004)
	unsigned long                                      bUsedWithFoliage : 1;                                     // 0x02E4(0x0004)
	unsigned long                                      bUsedWithSpeedTree : 1;                                   // 0x02E4(0x0004)
	unsigned long                                      bUsedWithStaticLighting : 1;                              // 0x02E4(0x0004)
	unsigned long                                      bUsedWithLensFlare : 1;                                   // 0x02E4(0x0004)
	unsigned long                                      bUsedWithGammaCorrection : 1;                             // 0x02E4(0x0004)
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;                      // 0x02E4(0x0004)
	unsigned long                                      bUsedWithFluidSurfaces : 1;                               // 0x02E4(0x0004)
	unsigned long                                      bUsedWithDecals : 1;                                      // 0x02E4(0x0004)
	unsigned long                                      bUsedWithMaterialEffect : 1;                              // 0x02E4(0x0004)
	unsigned long                                      bUsedWithMorphTargets : 1;                                // 0x02E4(0x0004)
	unsigned long                                      bUsedWithRadialBlur : 1;                                  // 0x02E4(0x0004)
	unsigned long                                      bUsedWithInstancedMeshes : 1;                             // 0x02E4(0x0004)
	unsigned long                                      bUsedWithSplineMeshes : 1;                                // 0x02E4(0x0004)
	unsigned long                                      bUsedWithScreenDoorFade : 1;                              // 0x02E4(0x0004)
	unsigned long                                      Wireframe : 1;                                            // 0x02E8(0x0004)
	unsigned long                                      bPerPixelCameraVector : 1;                                // 0x02E8(0x0004)
	unsigned long                                      bIsFallbackMaterial : 1;                                  // 0x02E8(0x0004)
	unsigned long                                      bUsesDistortion : 1;                                      // 0x02E8(0x0004)
	unsigned long                                      bIsMasked : 1;                                            // 0x02E8(0x0004)
	unsigned long                                      bIsPreviewMaterial : 1;                                   // 0x02E8(0x0004)
	class UMaterial*                                   FallbackMaterial;                                         // 0x02EC(0x0004)
	struct FPointer                                    MaterialResources[0x2];                                   // 0x02F0(0x0004)
	struct FPointer                                    DefaultMaterialInstances[0x2];                            // 0x02F8(0x0004)
	int                                                EditorX;                                                  // 0x0300(0x0004)
	int                                                EditorY;                                                  // 0x0304(0x0004)
	int                                                EditorPitch;                                              // 0x0308(0x0004)
	int                                                EditorYaw;                                                // 0x030C(0x0004)
	TArray<class UMaterialExpression*>                 Expressions;                                              // 0x0310(0x000C)
	TArray<class UMaterialExpressionComment*>          EditorComments;                                           // 0x031C(0x000C) (ExportObject)
	TArray<class UMaterialExpressionCompound*>         EditorCompounds;                                          // 0x0328(0x000C) (ExportObject)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0334(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Material.EditorParameters
	TArray<class UTexture*>                            ReferencedTextures;                                       // 0x0370(0x000C)
	TArray<struct FGuid>                               ReferencedTextureGuids;                                   // 0x037C(0x000C) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}

};


// Class Engine.MaterialExpression
// 0x0030 (0x006C - 0x003C)
class UMaterialExpression : public UObject
{
public:
	int                                                EditorX;                                                  // 0x003C(0x0004)
	int                                                EditorY;                                                  // 0x0040(0x0004)
	int                                                MaterialExpressionEditorX;                                // 0x0044(0x0004) (ExportObject)
	int                                                MaterialExpressionEditorY;                                // 0x0048(0x0004) (ExportObject)
	unsigned long                                      bRealtimePreview : 1;                                     // 0x004C(0x0004)
	unsigned long                                      bNeedToUpdatePreview : 1;                                 // 0x004C(0x0004)
	unsigned long                                      bIsParameterExpression : 1;                               // 0x004C(0x0004)
	unsigned long                                      bShowOutputNameOnPin : 1;                                 // 0x004C(0x0004)
	unsigned long                                      bHidePreviewWindow : 1;                                   // 0x004C(0x0004)
	class UMaterialExpressionCompound*                 Compound;                                                 // 0x0050(0x0004)
	struct FString                                     Desc;                                                     // 0x0054(0x000C)
	TArray<struct FName>                               MenuCategories;                                           // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}

};


// Class Engine.Model
// 0x0BE0 (0x0C1C - 0x003C)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0xBE0];                                     // 0x003C(0x0BE0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}

};


// Class Engine.NameDictionary
// 0x003C (0x0078 - 0x003C)
class UNameDictionary : public UObject
{
public:
	struct FMap_Mirror                                 InnerMap;                                                 // 0x003C(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NameDictionary");
		return ptr;
	}


	void IsEmpty();
	void Clear();
	void ToArray();
	void GetKeyByValue();
	void Get();
	void Remove();
	void Add();
};


// Class Engine.NavigationMeshBase
// 0x0284 (0x02C0 - 0x003C)
class UNavigationMeshBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x284];                                     // 0x003C(0x0284) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationMeshBase");
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x0130 (0x0170 - 0x0040)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	float                                              ConnectionTimeout;                                        // 0x0060(0x0004)
	float                                              InitialConnectTimeout;                                    // 0x0064(0x0004)
	float                                              KeepAliveTime;                                            // 0x0068(0x0004)
	float                                              RelevantTimeout;                                          // 0x006C(0x0004)
	float                                              SpawnPrioritySeconds;                                     // 0x0070(0x0004)
	float                                              ServerTravelPause;                                        // 0x0074(0x0004)
	int                                                MaxClientRate;                                            // 0x0078(0x0004)
	int                                                MaxInternetClientRate;                                    // 0x007C(0x0004)
	int                                                NetServerMaxTickRate;                                     // 0x0080(0x0004)
	unsigned long                                      bClampListenServerTickRate : 1;                           // 0x0084(0x0004)
	unsigned long                                      UnknownData01 : 31;                                       // 0x0084(0x0001)
	unsigned long                                      AllowDownloads : 1;                                       // 0x0088(0x0004)
	unsigned char                                      UnknownData02[0x14];                                      // 0x008C(0x0014) MISSED OFFSET
	int                                                MaxDownloadSize;                                          // 0x00A0(0x0004)
	TArray<struct FString>                             DownloadManagers;                                         // 0x00A4(0x000C)
	unsigned char                                      UnknownData03[0x90];                                      // 0x00B0(0x0090) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                                   // 0x0140(0x000C)
	unsigned char                                      UnknownData04[0x24];                                      // 0x014C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}

};


// Class Engine.DemoRecDriver
// 0x00C4 (0x0234 - 0x0170)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0170(0x0028) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                                       // 0x0198(0x000C)
	unsigned char                                      UnknownData01[0x7C];                                      // 0x01A4(0x007C) MISSED OFFSET
	int                                                MaxRewindPoints;                                          // 0x0220(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0224(0x0004) MISSED OFFSET
	float                                              RewindPointInterval;                                      // 0x0228(0x0004)
	int                                                NumRecentRewindPoints;                                    // 0x022C(0x0004)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0230(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecDriver");
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x000C (0x0048 - 0x003C)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}

};


// Class Engine.OnlineGameplayEvents
// 0x005C (0x0098 - 0x003C)
class UOnlineGameplayEvents : public UObject
{
public:
	TArray<struct FPlayerInformation>                  PlayerList;                                               // 0x003C(0x000C)
	TArray<struct FString>                             EventDescList;                                            // 0x0048(0x000C)
	TArray<struct FName>                               EventNames;                                               // 0x0054(0x000C)
	TArray<struct FGameplayEvent>                      GameplayEvents;                                           // 0x0060(0x000C)
	TArray<struct FPlayerEvent>                        PlayerEvents;                                             // 0x006C(0x000C)
	struct FString                                     GameplaySessionStartTime;                                 // 0x0078(0x000C)
	unsigned long                                      bGameplaySessionInProgress : 1;                           // 0x0084(0x0004)
	struct FGuid                                       GameplaySessionID;                                        // 0x0088(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameplayEvents");
		return ptr;
	}

};


// Class Engine.OnlinePlayerStorage
// 0x002C (0x0068 - 0x003C)
class UOnlinePlayerStorage : public UObject
{
public:
	int                                                VersionNumber;                                            // 0x003C(0x0004)
	TArray<struct FOnlineProfileSetting>               ProfileSettings;                                          // 0x0040(0x000C)
	TArray<struct FSettingsPropertyPropertyMetaData>   ProfileMappings;                                          // 0x004C(0x000C)
	TEnumAsByte<EOnlinePlayerStorageAsyncState>        AsyncState;                                               // 0x0058(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __NotifySettingValueUpdated__Delegate;                    // 0x005C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerStorage");
		return ptr;
	}


	void SetToDefaults();
	void AddSettingFloat();
	void AddSettingInt();
	void GetRangedProfileSettingValue();
	void SetRangedProfileSettingValue();
	void GetProfileSettingRange();
	void STATIC_GetProfileSettingMappingIds();
	void GetProfileSettingMappingType();
	void SetProfileSettingValueFloat();
	void SetProfileSettingValueInt();
	void SetProfileSettingValueId();
	void GetProfileSettingValueFloat();
	void GetProfileSettingValueInt();
	void GetProfileSettingValueId();
	void SetProfileSettingValue();
	void SetProfileSettingValueByName();
	void GetProfileSettingValueByName();
	void GetProfileSettingValues();
	void GetProfileSettingValueName();
	void GetProfileSettingValue();
	void IsProfileSettingIdMapped();
	void FindProfileMappingIndexByName();
	void FindProfileMappingIndex();
	void FindProfileSettingIndex();
	void GetProfileSettingColumnHeader();
	void GetProfileSettingName();
	void GetProfileSettingId();
	void NotifySettingValueUpdated();
};


// Class Engine.OnlineProfileSettings
// 0x0024 (0x008C - 0x0068)
class UOnlineProfileSettings : public UOnlinePlayerStorage
{
public:
	TArray<int>                                        ProfileSettingIds;                                        // 0x0068(0x000C)
	TArray<struct FOnlineProfileSetting>               DefaultSettings;                                          // 0x0074(0x000C)
	TArray<struct FIdToStringMapping>                  OwnerMappings;                                            // 0x0080(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineProfileSettings");
		return ptr;
	}


	void ModifyAvailableProfileSettings();
	void SetDefaultVersionNumber();
	void GetVersionNumber();
	void AppendVersionToSettings();
	void AppendVersionToReadIds();
	void SetToDefaults();
	void GetProfileSettingDefaultFloat();
	void GetProfileSettingDefaultInt();
	void GetProfileSettingDefaultId();
};


// Class Engine.OnlinePlaylistManager
// 0x003C (0x0078 - 0x003C)
class UOnlinePlaylistManager : public UObject
{
public:
	TArray<struct FPlaylist>                           Playlists;                                                // 0x003C(0x000C)
	TArray<struct FString>                             PlaylistFileNames;                                        // 0x0048(0x000C)
	TArray<struct FName>                               DatastoresToRefresh;                                      // 0x0054(0x000C)
	int                                                DownloadCount;                                            // 0x0060(0x0004)
	int                                                SuccessfulCount;                                          // 0x0064(0x0004)
	int                                                VersionNumber;                                            // 0x0068(0x0004)
	struct FScriptDelegate                             __OnReadPlaylistComplete__Delegate;                       // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlaylistManager");
		return ptr;
	}


	void Reset();
	void GetContentIdsFromPlaylist();
	void GetTeamInfoFromPlaylist();
	void HasAnyGameSettings();
	void GetGameSettings();
	void FinalizePlaylistObjects();
	void OnReadTitleFileComplete();
	void DetermineFilesToDownload();
	void DownloadPlaylist();
	void OnReadPlaylistComplete();
};


// Class Engine.OnlineStats
// 0x000C (0x0048 - 0x003C)
class UOnlineStats : public UObject
{
public:
	TArray<struct FStringIdToStringMapping>            ViewIdMappings;                                           // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStats");
		return ptr;
	}


	void GetViewName();
	void GetViewId();
};


// Class Engine.OnlineStatsRead
// 0x005C (0x00A4 - 0x0048)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                                   // 0x0048(0x0004)
	int                                                SortColumnId;                                             // 0x004C(0x0004)
	TArray<int>                                        ColumnIds;                                                // 0x0050(0x000C)
	struct FString                                     LeaderboardName;                                          // 0x005C(0x000C)
	TArray<TEnumAsByte<ESettingsDataType>>             DataTypes;                                                // 0x0068(0x000C)
	int                                                TotalRowsInView;                                          // 0x0074(0x0004)
	TArray<struct FOnlineStatsRow>                     Rows;                                                     // 0x0078(0x000C)
	TArray<struct FColumnMetaData>                     ColumnMappings;                                           // 0x0084(0x000C)
	struct FString                                     ViewName;                                                 // 0x0090(0x000C)
	int                                                TitleId;                                                  // 0x009C(0x0004)
	unsigned long                                      bTreatStatsAsLeaderboard : 1;                             // 0x00A0(0x0004)
	unsigned long                                      bRankedStats : 1;                                         // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsRead");
		return ptr;
	}


	void GetRankForPlayer();
	void AddPlayer();
	void SetFloatStatValueForPlayer();
	void GetFloatStatValueForPlayer();
	void SetIntStatValueForPlayer();
	void GetIntStatValueForPlayer();
	void OnReadComplete();
};


// Class Engine.OnlineStatsWrite
// 0x005C (0x00A4 - 0x0048)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray<struct FStringIdToStringMapping>            StatMappings;                                             // 0x0048(0x000C)
	TArray<struct FSettingsProperty>                   Properties;                                               // 0x0054(0x000C)
	TArray<int>                                        ViewIds;                                                  // 0x0060(0x000C)
	TArray<int>                                        ArbitratedViewIds;                                        // 0x006C(0x000C)
	int                                                RatingId;                                                 // 0x0078(0x0004)
	TArray<struct FString>                             FieldNames;                                               // 0x007C(0x000C)
	unsigned long                                      bTreatStatsAsLeaderboard : 1;                             // 0x0088(0x0004)
	unsigned long                                      bRankedStats : 1;                                         // 0x0088(0x0004)
	struct FString                                     LeaderboardName;                                          // 0x008C(0x000C)
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                         // 0x0098(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsWrite");
		return ptr;
	}


	void DecrementIntStat();
	void DecrementFloatStat();
	void IncrementIntStat();
	void IncrementFloatStat();
	void SetByteStat();
	void SetStringStat();
	void SetIntStat();
	void SetFloatStat();
	void GetStatName();
	void GetStatId();
	void OnStatsWriteComplete();
};


// Class Engine.PackageMapLevel
// 0x0004 (0x00C4 - 0x00C0)
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C0(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapLevel");
		return ptr;
	}

};


// Class Engine.PackageMapSeekFree
// 0x0000 (0x00C4 - 0x00C4)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapSeekFree");
		return ptr;
	}

};


// Class Engine.Player
// 0x0024 (0x0060 - 0x003C)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x003C(0x0004)
	class APlayerController*                           Actor;                                                    // 0x0040(0x0004)
	int                                                CurrentNetSpeed;                                          // 0x0044(0x0004)
	int                                                ConfiguredInternetSpeed;                                  // 0x0048(0x0004)
	int                                                ConfiguredLanSpeed;                                       // 0x004C(0x0004)
	float                                              PP_DesaturationMultiplier;                                // 0x0050(0x0004)
	float                                              PP_HighlightsMultiplier;                                  // 0x0054(0x0004)
	float                                              PP_MidTonesMultiplier;                                    // 0x0058(0x0004)
	float                                              PP_ShadowsMultiplier;                                     // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}


	void SwitchController();
};


// Class Engine.LocalPlayer
// 0x0370 (0x03D0 - 0x0060)
class ULocalPlayer : public UPlayer
{
public:
	unsigned long                                      bValidCachedViewFrustum : 1;                              // 0x0060(0x0004)
	unsigned long                                      bOverridePostProcessSettings : 1;                         // 0x0060(0x0004)
	unsigned long                                      bEnablePostProcessOverrideRecovery : 1;                   // 0x0060(0x0004)
	unsigned long                                      bGradualRecoveryFromPostProcessOverride : 1;              // 0x0060(0x0004)
	unsigned long                                      bSnapRecovery : 1;                                        // 0x0060(0x0004)
	unsigned long                                      bSentSplitJoin : 1;                                       // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0064(0x000C) MISSED OFFSET
	struct FConvexVolume_Mirror                        CachedViewFrustum;                                        // 0x0070(0x0120)
	int                                                ControllerId;                                             // 0x0190(0x0004)
	class UGameViewportClient*                         ViewportClient;                                           // 0x0194(0x0004)
	struct FVector2D                                   Origin;                                                   // 0x0198(0x0008)
	struct FVector2D                                   Size;                                                     // 0x01A0(0x0008)
	class UPostProcessChain*                           PlayerPostProcess;                                        // 0x01A8(0x0004)
	TArray<class UPostProcessChain*>                   PlayerPostProcessChains;                                  // 0x01AC(0x000C)
	struct FPointer                                    ViewState;                                                // 0x01B8(0x0004)
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                                   // 0x01BC(0x0008)
	struct FVector                                     LastViewLocation;                                         // 0x01C4(0x000C)
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                            // 0x01D0(0x00AC)
	struct FPostProcessSettings                        PostProcessSettingsOverride;                              // 0x027C(0x00A0)
	float                                              PPSettingsOverrideStartBlend;                             // 0x031C(0x0004)
	float                                              PPRecoveryTime;                                           // 0x0320(0x0004)
	struct FCurrentPostProcessVolumeInfo               LevelPPInfo;                                              // 0x0324(0x00AC)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}


	void PostHUDRender();
	void PreHUDRender();
	void GetNickname();
	void GetUniqueNetId();
	void DeProject();
	void TouchPlayerPostProcessChain();
	void GetPostProcessChain();
	void RemoveAllPostProcessingChains();
	void RemovePostProcessingChain();
	void InsertPostProcessingChain();
	void SetControllerId();
	void ClearPostProcessSettingsOverride();
	void UpdateOverridePostProcessSettings();
	void OverridePostProcessSettings();
	void GetActorVisibility();
	void IsSphereVisible();
	void SendSplitLeave();
	void SendSplitJoin();
	void SpawnPlayActor();
};


// Class Engine.NetConnection
// 0x4F78 (0x4FD8 - 0x0060)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x4F60];                                    // 0x0060(0x4F60) MISSED OFFSET
	TArray<class UChildConnection*>                    Children;                                                 // 0x4FC0(0x000C)
	unsigned char                                      UnknownData01[0xC];                                       // 0x4FCC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}

};


// Class Engine.ChildConnection
// 0x0004 (0x4FDC - 0x4FD8)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                   // 0x4FD8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}

};


// Class Engine.DemoRecConnection
// 0x0000 (0x4FD8 - 0x4FD8)
class UDemoRecConnection : public UNetConnection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecConnection");
		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x004C - 0x003C)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x003C(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}

};


// Class Engine.PostProcessChain
// 0x000C (0x0048 - 0x003C)
class UPostProcessChain : public UObject
{
public:
	TArray<class UPostProcessEffect*>                  Effects;                                                  // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessChain");
		return ptr;
	}


	void FindPostProcessEffect();
};


// Class Engine.PostProcessEffect
// 0x0025 (0x0061 - 0x003C)
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                        // 0x003C(0x0004)
	unsigned long                                      bShowInGame : 1;                                          // 0x003C(0x0004)
	unsigned long                                      bUseWorldSettings : 1;                                    // 0x003C(0x0004)
	unsigned long                                      bAffectsLightingOnly : 1;                                 // 0x003C(0x0004)
	struct FName                                       EffectName;                                               // 0x0040(0x0008)
	int                                                NodePosY;                                                 // 0x0048(0x0004)
	int                                                NodePosX;                                                 // 0x004C(0x0004)
	int                                                DrawWidth;                                                // 0x0050(0x0004)
	int                                                DrawHeight;                                               // 0x0054(0x0004)
	int                                                OutDrawY;                                                 // 0x0058(0x0004)
	int                                                InDrawY;                                                  // 0x005C(0x0004)
	TEnumAsByte<ESceneDepthPriorityGroup>              SceneDPG;                                                 // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessEffect");
		return ptr;
	}

};


// Class Engine.AmbientOcclusionEffect
// 0x005F (0x00C0 - 0x0061)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FLinearColor                                OcclusionColor;                                           // 0x0064(0x0010) (Const)
	float                                              OcclusionPower;                                           // 0x0074(0x0004)
	float                                              OcclusionScale;                                           // 0x0078(0x0004)
	float                                              OcclusionBias;                                            // 0x007C(0x0004)
	float                                              MinOcclusion;                                             // 0x0080(0x0004)
	unsigned long                                      SSAO2 : 1;                                                // 0x0084(0x0004)
	unsigned long                                      bAngleBasedSSAO : 1;                                      // 0x0084(0x0004)
	float                                              OcclusionRadius;                                          // 0x0088(0x0004)
	float                                              OcclusionAttenuation;                                     // 0x008C(0x0004)
	TEnumAsByte<EAmbientOcclusionQuality>              OcclusionQuality;                                         // 0x0090(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              OcclusionFadeoutMinDistance;                              // 0x0094(0x0004)
	float                                              OcclusionFadeoutMaxDistance;                              // 0x0098(0x0004)
	float                                              HaloDistanceThreshold;                                    // 0x009C(0x0004)
	float                                              HaloDistanceScale;                                        // 0x00A0(0x0004)
	float                                              HaloOcclusion;                                            // 0x00A4(0x0004)
	float                                              EdgeDistanceThreshold;                                    // 0x00A8(0x0004)
	float                                              EdgeDistanceScale;                                        // 0x00AC(0x0004)
	float                                              FilterDistanceScale;                                      // 0x00B0(0x0004)
	int                                                FilterSize;                                               // 0x00B4(0x0004)
	float                                              HistoryConvergenceTime;                                   // 0x00B8(0x0004)
	float                                              HistoryWeightConvergenceTime;                             // 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientOcclusionEffect");
		return ptr;
	}

};


// Class Engine.BlurEffect
// 0x0007 (0x0068 - 0x0061)
class UBlurEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                BlurKernelSize;                                           // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlurEffect");
		return ptr;
	}

};


// Class Engine.DOFEffect
// 0x002F (0x0090 - 0x0061)
class UDOFEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              FalloffExponent;                                          // 0x0064(0x0004)
	float                                              BlurKernelSize;                                           // 0x0068(0x0004)
	float                                              MaxNearBlurAmount;                                        // 0x006C(0x0004)
	float                                              MaxFarBlurAmount;                                         // 0x0070(0x0004)
	struct FColor                                      ModulateBlurColor;                                        // 0x0074(0x0004)
	TEnumAsByte<EFocusType>                            FocusType;                                                // 0x0078(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	float                                              FocusInnerRadius;                                         // 0x007C(0x0004)
	float                                              FocusDistance;                                            // 0x0080(0x0004)
	struct FVector                                     FocusPosition;                                            // 0x0084(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFEffect");
		return ptr;
	}

};


// Class Engine.DOFAndBloomEffect
// 0x0010 (0x00A0 - 0x0090)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                               // 0x0090(0x0004)
	float                                              SceneMultiplier;                                          // 0x0094(0x0004)
	float                                              BlurBloomKernelSize;                                      // 0x0098(0x0004)
	unsigned long                                      bEnableSeparateBloom : 1;                                 // 0x009C(0x0004)
	unsigned long                                      bEnableReferenceDOF : 1;                                  // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFAndBloomEffect");
		return ptr;
	}

};


// Class Engine.DOFBloomMotionBlurEffect
// 0x0014 (0x00B4 - 0x00A0)
class UDOFBloomMotionBlurEffect : public UDOFAndBloomEffect
{
public:
	float                                              MaxVelocity;                                              // 0x00A0(0x0004)
	float                                              MotionBlurAmount;                                         // 0x00A4(0x0004)
	unsigned long                                      FullMotionBlur : 1;                                       // 0x00A8(0x0004)
	float                                              CameraRotationThreshold;                                  // 0x00AC(0x0004)
	float                                              CameraTranslationThreshold;                               // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFBloomMotionBlurEffect");
		return ptr;
	}

};


// Class Engine.UberPostProcessEffect
// 0x0028 (0x00DC - 0x00B4)
class UUberPostProcessEffect : public UDOFBloomMotionBlurEffect
{
public:
	struct FVector                                     SceneShadows;                                             // 0x00B4(0x000C)
	struct FVector                                     SceneHighLights;                                          // 0x00C0(0x000C)
	struct FVector                                     SceneMidTones;                                            // 0x00CC(0x000C)
	float                                              SceneDesaturation;                                        // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UberPostProcessEffect");
		return ptr;
	}

};


// Class Engine.MaterialEffect
// 0x0007 (0x0068 - 0x0061)
class UMaterialEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	class UMaterialInterface*                          Material;                                                 // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialEffect");
		return ptr;
	}

};


// Class Engine.MotionBlurEffect
// 0x0017 (0x0078 - 0x0061)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              MaxVelocity;                                              // 0x0064(0x0004)
	float                                              MotionBlurAmount;                                         // 0x0068(0x0004)
	unsigned long                                      FullMotionBlur : 1;                                       // 0x006C(0x0004)
	float                                              CameraRotationThreshold;                                  // 0x0070(0x0004)
	float                                              CameraTranslationThreshold;                               // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MotionBlurEffect");
		return ptr;
	}

};


// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x0040 - 0x003C)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                        // 0x003C(0x0004)
	unsigned long                                      BlockActors : 1;                                          // 0x003C(0x0004)
	unsigned long                                      BlockZeroExtent : 1;                                      // 0x003C(0x0004)
	unsigned long                                      BlockNonZeroExtent : 1;                                   // 0x003C(0x0004)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x003C(0x0004)
	unsigned long                                      HiddenGame : 1;                                           // 0x003C(0x0004)
	unsigned long                                      HiddenEditor : 1;                                         // 0x003C(0x0004)
	unsigned long                                      CastShadow : 1;                                           // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponentFactory");
		return ptr;
	}

};


// Class Engine.MeshComponentFactory
// 0x000C (0x004C - 0x0040)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponentFactory");
		return ptr;
	}

};


// Class Engine.StaticMeshComponentFactory
// 0x0004 (0x0050 - 0x004C)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponentFactory");
		return ptr;
	}

};


// Class Engine.ReachSpec
// 0x0054 (0x0090 - 0x003C)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                          // 0x003C(0x0004)
	int                                                Distance;                                                 // 0x0040(0x0004)
	struct FVector                                     Direction;                                                // 0x0044(0x000C)
	class ANavigationPoint*                            Start;                                                    // 0x0050(0x0004)
	struct FActorReference                             End;                                                      // 0x0054(0x0014)
	int                                                CollisionRadius;                                          // 0x0068(0x0004)
	int                                                CollisionHeight;                                          // 0x006C(0x0004)
	int                                                reachFlags;                                               // 0x0070(0x0004)
	int                                                MaxLandingVelocity;                                       // 0x0074(0x0004)
	unsigned char                                      bPruned;                                                  // 0x0078(0x0001)
	unsigned char                                      PathColorIndex;                                           // 0x0079(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007A(0x0002) MISSED OFFSET
	unsigned long                                      bAddToNavigationOctree : 1;                               // 0x007C(0x0004)
	unsigned long                                      bCanCutCorners : 1;                                       // 0x007C(0x0004)
	unsigned long                                      bCheckForObstructions : 1;                                // 0x007C(0x0004)
	unsigned long                                      bSkipPrune : 1;                                           // 0x007C(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x007C(0x0004)
	TArray<class UClass*>                              PruneSpecList;                                            // 0x0080(0x000C)
	class AActor*                                      BlockedBy;                                                // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReachSpec");
		return ptr;
	}


	void IsBlockedFor();
	void GetDirection();
	void GetEnd();
	void CostFor();
};


// Class Engine.AdvancedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UAdvancedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AdvancedReachSpec");
		return ptr;
	}

};


// Class Engine.CeilingReachSpec
// 0x0000 (0x0090 - 0x0090)
class UCeilingReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CeilingReachSpec");
		return ptr;
	}

};


// Class Engine.ForcedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UForcedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForcedReachSpec");
		return ptr;
	}

};


// Class Engine.CoverSlipReachSpec
// 0x0001 (0x0091 - 0x0090)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0090(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverSlipReachSpec");
		return ptr;
	}

};


// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x0090 - 0x0090)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FloorToCeilingReachSpec");
		return ptr;
	}

};


// Class Engine.MantleReachSpec
// 0x0004 (0x0094 - 0x0090)
class UMantleReachSpec : public UForcedReachSpec
{
public:
	unsigned long                                      bClimbUp : 1;                                             // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MantleReachSpec");
		return ptr;
	}

};


// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x0091 - 0x0090)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0090(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SlotToSlotReachSpec");
		return ptr;
	}

};


// Class Engine.SwatTurnReachSpec
// 0x0001 (0x0091 - 0x0090)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0090(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SwatTurnReachSpec");
		return ptr;
	}

};


// Class Engine.WallTransReachSpec
// 0x0000 (0x0090 - 0x0090)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WallTransReachSpec");
		return ptr;
	}

};


// Class Engine.LadderReachSpec
// 0x0000 (0x0090 - 0x0090)
class ULadderReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderReachSpec");
		return ptr;
	}

};


// Class Engine.ProscribedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UProscribedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProscribedReachSpec");
		return ptr;
	}

};


// Class Engine.TeleportReachSpec
// 0x0000 (0x0090 - 0x0090)
class UTeleportReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeleportReachSpec");
		return ptr;
	}

};


// Class Engine.SavedMove
// 0x00AC (0x00E8 - 0x003C)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                                 // 0x003C(0x0004)
	float                                              TimeStamp;                                                // 0x0040(0x0004)
	float                                              Delta;                                                    // 0x0044(0x0004)
	unsigned long                                      bRun : 1;                                                 // 0x0048(0x0004)
	unsigned long                                      bDuck : 1;                                                // 0x0048(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x0048(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x0048(0x0004)
	unsigned long                                      bPreciseDestination : 1;                                  // 0x0048(0x0004)
	unsigned long                                      bForceRMVelocity : 1;                                     // 0x0048(0x0004)
	unsigned long                                      bForceMaxAccel : 1;                                       // 0x0048(0x0004)
	unsigned long                                      bRootMotionFromInterpCurve : 1;                           // 0x0048(0x0004)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickMove;                                          // 0x004C(0x0001)
	TEnumAsByte<EPhysics>                              SavedPhysics;                                             // 0x004D(0x0001)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x004E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	struct FVector                                     StartLocation;                                            // 0x0050(0x000C)
	struct FVector                                     StartRelativeLocation;                                    // 0x005C(0x000C)
	struct FVector                                     StartVelocity;                                            // 0x0068(0x000C)
	struct FVector                                     StartFloor;                                               // 0x0074(0x000C)
	struct FVector                                     SavedLocation;                                            // 0x0080(0x000C)
	struct FVector                                     SavedVelocity;                                            // 0x008C(0x000C)
	struct FVector                                     SavedRelativeLocation;                                    // 0x0098(0x000C)
	struct FVector                                     RMVelocity;                                               // 0x00A4(0x000C)
	struct FVector                                     Acceleration;                                             // 0x00B0(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x00BC(0x000C)
	class AActor*                                      StartBase;                                                // 0x00C8(0x0004)
	class AActor*                                      EndBase;                                                  // 0x00CC(0x0004)
	float                                              CustomTimeDilation;                                       // 0x00D0(0x0004)
	float                                              AccelDotThreshold;                                        // 0x00D4(0x0004)
	float                                              RootMotionInterpCurrentTime;                              // 0x00D8(0x0004)
	struct FVector                                     RootMotionInterpCurveLastValue;                           // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SavedMove");
		return ptr;
	}


	void GetDebugString();
	void STATIC_SetFlags();
	void CompressedFlags();
	void ResetMoveFor();
	void PrepMoveFor();
	void SetMoveFor();
	void CanCombineWith();
	void SetInitialPosition();
	void GetStartLocation();
	void IsImportantMove();
	void PostUpdate();
	void Clear();
};


// Class Engine.SaveGameSummary
// 0x0014 (0x0050 - 0x003C)
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                                // 0x003C(0x0008)
	struct FString                                     Description;                                              // 0x0044(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SaveGameSummary");
		return ptr;
	}

};


// Class Engine.Selection
// 0x0024 (0x0060 - 0x003C)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x003C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Selection");
		return ptr;
	}

};


// Class Engine.ServerCommandlet
// 0x0000 (0x007C - 0x007C)
class UServerCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ServerCommandlet");
		return ptr;
	}

};


// Class Engine.OnlineGameSettings
// 0x0064 (0x00E8 - 0x0084)
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                                     // 0x0084(0x0004)
	int                                                NumPrivateConnections;                                    // 0x0088(0x0004)
	int                                                NumOpenPublicConnections;                                 // 0x008C(0x0004)
	int                                                NumOpenPrivateConnections;                                // 0x0090(0x0004)
	struct FQWord                                      ServerNonce;                                              // 0x0094(0x0008)
	unsigned long                                      bShouldAdvertise : 1;                                     // 0x009C(0x0004)
	unsigned long                                      bIsLanMatch : 1;                                          // 0x009C(0x0004)
	unsigned long                                      bUsesStats : 1;                                           // 0x009C(0x0004)
	unsigned long                                      bAllowJoinInProgress : 1;                                 // 0x009C(0x0004)
	unsigned long                                      bAllowInvites : 1;                                        // 0x009C(0x0004)
	unsigned long                                      bUsesPresence : 1;                                        // 0x009C(0x0004)
	unsigned long                                      bAllowJoinViaPresence : 1;                                // 0x009C(0x0004)
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;                     // 0x009C(0x0004)
	unsigned long                                      bUsesArbitration : 1;                                     // 0x009C(0x0004)
	unsigned long                                      bAntiCheatProtected : 1;                                  // 0x009C(0x0004)
	unsigned long                                      bWasFromInvite : 1;                                       // 0x009C(0x0004)
	unsigned long                                      bIsDedicated : 1;                                         // 0x009C(0x0004)
	unsigned long                                      bHasSkillUpdateInProgress : 1;                            // 0x009C(0x0004)
	unsigned long                                      bIsLocalMatch : 1;                                        // 0x009C(0x0004)
	struct FString                                     OwningPlayerName;                                         // 0x00A0(0x000C)
	struct FUniqueNetId                                OwningPlayerId;                                           // 0x00AC(0x0008)
	int                                                PingInMs;                                                 // 0x00B4(0x0004)
	float                                              MatchQuality;                                             // 0x00B8(0x0004)
	TEnumAsByte<EOnlineGameState>                      GameState;                                                // 0x00BC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                BuildUniqueId;                                            // 0x00C0(0x0004)
	TArray<struct FString>                             FilterPropertyNames;                                      // 0x00C4(0x000C)
	TArray<struct FString>                             PropertyNameRemap;                                        // 0x00D0(0x000C)
	TArray<struct FCustomGameSetting>                  CustomGameSettings;                                       // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameSettings");
		return ptr;
	}


	void UpdateGameSpyCustomKeys();
	void MatchesGameFilter();
};


// Class Engine.ShaderCache
// 0x00C0 (0x00FC - 0x003C)
class UShaderCache : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x003C(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShaderCache");
		return ptr;
	}

};


// Class Engine.ShadowMap1D
// 0x0040 (0x007C - 0x003C)
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x003C(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMap1D");
		return ptr;
	}

};


// Class Engine.ShadowMap2D
// 0x0030 (0x006C - 0x003C)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                                  // 0x003C(0x0004)
	struct FVector2D                                   CoordinateScale;                                          // 0x0040(0x0008)
	struct FVector2D                                   CoordinateBias;                                           // 0x0048(0x0008)
	struct FGuid                                       LightGuid;                                                // 0x0050(0x0010)
	unsigned long                                      bIsShadowFactorTexture : 1;                               // 0x0060(0x0004)
	class UInstancedStaticMeshComponent*               Component;                                                // 0x0064(0x0004)
	int                                                InstanceIndex;                                            // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMap2D");
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x007C - 0x007C)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x0084 (0x00C0 - 0x003C)
class USoundCue : public UObject
{
public:
	struct FName                                       SoundClass;                                               // 0x003C(0x0008)
	class USoundNode*                                  FirstNode;                                                // 0x0044(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0048(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	float                                              MaxAudibleDistance;                                       // 0x0084(0x0004)
	float                                              VolumeMultiplier;                                         // 0x0088(0x0004)
	float                                              PitchMultiplier;                                          // 0x008C(0x0004)
	float                                              Duration;                                                 // 0x0090(0x0004)
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x0094(0x0004)
	struct FString                                     FaceFXGroupName;                                          // 0x0098(0x000C)
	struct FString                                     FaceFXAnimName;                                           // 0x00A4(0x000C)
	int                                                MaxConcurrentPlayCount;                                   // 0x00B0(0x0004)
	int                                                CurrentPlayCount;                                         // 0x00B4(0x0004)
	struct FName                                       SoundGroup;                                               // 0x00B8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}


	void CalcMaxAudibleDistance();
	void GetCueDuration();
};


// Class Engine.SpeechRecognition
// 0x0088 (0x00C4 - 0x003C)
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                                 // 0x003C(0x000C)
	float                                              ConfidenceThreshhold;                                     // 0x0048(0x0004)
	TArray<struct FRecogVocabulary>                    Vocabularies;                                             // 0x004C(0x000C)
	TArray<unsigned char>                              VoiceData;                                                // 0x0058(0x000C)
	TArray<unsigned char>                              WorkingVoiceData;                                         // 0x0064(0x000C)
	TArray<unsigned char>                              UserData;                                                 // 0x0070(0x000C)
	struct FRecogUserData                              InstanceData[0x4];                                        // 0x007C(0x0010)
	unsigned long                                      bDirty : 1;                                               // 0x00BC(0x0004)
	unsigned long                                      bInitialised : 1;                                         // 0x00BC(0x0004)
	struct FPointer                                    FnxVoiceData;                                             // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeechRecognition");
		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x00FC (0x0138 - 0x003C)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x003C(0x000C) MISSED OFFSET
	TArray<struct FStaticMeshLODInfo>                  LODInfo;                                                  // 0x0048(0x000C)
	float                                              LODDistanceRatio;                                         // 0x0054(0x0004)
	float                                              LODMaxRange;                                              // 0x0058(0x0004)
	unsigned char                                      UnknownData01[0x10];                                      // 0x005C(0x0010) MISSED OFFSET
	int                                                LightMapResolution;                                       // 0x006C(0x0004)
	int                                                LightMapCoordinateIndex;                                  // 0x0070(0x0004)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0074(0x0018) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                                // 0x008C(0x0004)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x0090(0x001C) MISSED OFFSET
	float                                              TexelRatioMultiplier;                                     // 0x00AC(0x0004)
	unsigned char                                      UnknownData04[0x18];                                      // 0x00B0(0x0018) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                               // 0x00C8(0x0004)
	unsigned long                                      UnknownData05 : 31;                                       // 0x00C8(0x0001)
	unsigned long                                      UseSimpleBoxCollision : 1;                                // 0x00CC(0x0004)
	unsigned long                                      UnknownData06 : 31;                                       // 0x00CC(0x0001)
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                          // 0x00D0(0x0004)
	unsigned long                                      UnknownData07 : 31;                                       // 0x00D0(0x0001)
	unsigned long                                      ForceDoubleSidedShadowVolumes : 1;                        // 0x00D4(0x0004)
	unsigned long                                      UnknownData08 : 31;                                       // 0x00D4(0x0001)
	unsigned long                                      UseFullPrecisionUVs : 1;                                  // 0x00D8(0x0004)
	unsigned long                                      UnknownData09 : 31;                                       // 0x00D8(0x0001)
	unsigned long                                      bUsedForInstancing : 1;                                   // 0x00DC(0x0004)
	unsigned long                                      UnknownData10 : 31;                                       // 0x00DC(0x0001)
	unsigned long                                      bUseMaximumStreamingTexelRatio : 1;                       // 0x00E0(0x0004)
	unsigned long                                      UnknownData11 : 31;                                       // 0x00E0(0x0001)
	unsigned long                                      bPartitionForEdgeGeometry : 1;                            // 0x00E4(0x0004)
	unsigned char                                      UnknownData12[0x20];                                      // 0x00E8(0x0020) MISSED OFFSET
	struct FString                                     SourceFilePath;                                           // 0x0108(0x000C) (ExportObject)
	struct FString                                     SourceFileTimestamp;                                      // 0x0114(0x000C) (ExportObject)
	unsigned char                                      UnknownData13[0x18];                                      // 0x0120(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}

};


// Class Engine.RB_BodySetup
// 0x004C (0x00D0 - 0x0084)
class URB_BodySetup : public UKMeshProps
{
public:
	TEnumAsByte<ESleepFamily>                          SleepFamily;                                              // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x0088(0x0008)
	unsigned long                                      bFixed : 1;                                               // 0x0090(0x0004)
	unsigned long                                      bNoCollision : 1;                                         // 0x0090(0x0004)
	unsigned long                                      bBlockZeroExtent : 1;                                     // 0x0090(0x0004)
	unsigned long                                      bBlockNonZeroExtent : 1;                                  // 0x0090(0x0004)
	unsigned long                                      bEnableContinuousCollisionDetection : 1;                  // 0x0090(0x0004)
	unsigned long                                      bAlwaysFullAnimWeight : 1;                                // 0x0090(0x0004)
	unsigned long                                      bConsiderForBounds : 1;                                   // 0x0090(0x0004)
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0094(0x0004)
	float                                              MassScale;                                                // 0x0098(0x0004)
	TArray<struct FPointer>                            CollisionGeom;                                            // 0x009C(0x000C)
	TArray<struct FVector>                             CollisionGeomScale3D;                                     // 0x00A8(0x000C)
	TArray<struct FVector>                             PreCachedPhysScale;                                       // 0x00B4(0x000C)
	TArray<struct FKCachedConvexData>                  PreCachedPhysData;                                        // 0x00C0(0x000C)
	int                                                PreCachedPhysDataVersion;                                 // 0x00CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BodySetup");
		return ptr;
	}

};


// Class Engine.FracturedStaticMesh
// 0x00C4 (0x01FC - 0x0138)
class UFracturedStaticMesh : public UStaticMesh
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0138(0x0004) MISSED OFFSET
	class UStaticMesh*                                 SourceCoreMesh;                                           // 0x013C(0x0004) (ExportObject)
	float                                              CoreMeshScale;                                            // 0x0140(0x0004)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0144(0x0030) MISSED OFFSET
	unsigned long                                      bSliceUsingCoreCollision : 1;                             // 0x0174(0x0004)
	class UParticleSystem*                             FragmentDestroyEffect;                                    // 0x0178(0x0004)
	TArray<class UParticleSystem*>                     FragmentDestroyEffects;                                   // 0x017C(0x000C)
	float                                              FragmentDestroyEffectScale;                               // 0x0188(0x0004)
	float                                              FragmentHealthScale;                                      // 0x018C(0x0004)
	float                                              FragmentMinHealth;                                        // 0x0190(0x0004)
	float                                              FragmentMaxHealth;                                        // 0x0194(0x0004)
	unsigned long                                      bUniformFragmentHealth : 1;                               // 0x0198(0x0004)
	float                                              ChunkLinVel;                                              // 0x019C(0x0004)
	float                                              ChunkAngVel;                                              // 0x01A0(0x0004)
	float                                              ChunkLinHorizontalScale;                                  // 0x01A4(0x0004)
	float                                              ExplosionVelScale;                                        // 0x01A8(0x0004)
	unsigned long                                      bCompositeChunksExplodeOnImpact : 1;                      // 0x01AC(0x0004)
	unsigned long                                      UnknownData02 : 31;                                       // 0x01AC(0x0001)
	unsigned long                                      bFixIsolatedChunks : 1;                                   // 0x01B0(0x0004)
	unsigned long                                      UnknownData03 : 31;                                       // 0x01B0(0x0001)
	unsigned long                                      bSpawnPhysicsChunks : 1;                                  // 0x01B4(0x0004)
	float                                              ChanceOfPhysicsChunk;                                     // 0x01B8(0x0004)
	float                                              ExplosionChanceOfPhysicsChunk;                            // 0x01BC(0x0004)
	float                                              NormalPhysicsChunkScaleMin;                               // 0x01C0(0x0004)
	float                                              NormalPhysicsChunkScaleMax;                               // 0x01C4(0x0004)
	float                                              ExplosionPhysicsChunkScaleMin;                            // 0x01C8(0x0004)
	float                                              ExplosionPhysicsChunkScaleMax;                            // 0x01CC(0x0004)
	float                                              MinConnectionSupportArea;                                 // 0x01D0(0x0004)
	class UMaterialInterface*                          DynamicOutsideMaterial;                                   // 0x01D4(0x0004)
	class UMaterialInterface*                          LoseChunkOutsideMaterial;                                 // 0x01D8(0x0004)
	int                                                OutsideMaterialIndex;                                     // 0x01DC(0x0004)
	unsigned char                                      UnknownData04[0x1C];                                      // 0x01E0(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMesh");
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x00F4 (0x0130 - 0x003C)
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x003C(0x0001)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x003D(0x0001)
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                    // 0x003E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003F(0x0001) MISSED OFFSET
	float                                              UpdateTime_FPS;                                           // 0x0040(0x0004)
	float                                              UpdateTime_Delta;                                         // 0x0044(0x0004)
	float                                              WarmupTime;                                               // 0x0048(0x0004)
	TArray<class UParticleEmitter*>                    Emitters;                                                 // 0x004C(0x000C)
	class UParticleSystemComponent*                    PreviewComponent;                                         // 0x0058(0x0004)
	struct FRotator                                    ThumbnailAngle;                                           // 0x005C(0x000C)
	float                                              ThumbnailDistance;                                        // 0x0068(0x0004)
	float                                              ThumbnailWarmup;                                          // 0x006C(0x0004)
	unsigned long                                      bLit : 1;                                                 // 0x0070(0x0004)
	unsigned long                                      bOrientZAxisTowardCamera : 1;                             // 0x0070(0x0004)
	unsigned long                                      bIsLooping : 1;                                           // 0x0070(0x0004)
	unsigned long                                      bRegenerateLODDuplicate : 1;                              // 0x0070(0x0004)
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                         // 0x0070(0x0004)
	unsigned long                                      bShouldResetPeakCounts : 1;                               // 0x0070(0x0004)
	unsigned long                                      bHasPhysics : 1;                                          // 0x0070(0x0004)
	unsigned long                                      bUseRealtimeThumbnail : 1;                                // 0x0070(0x0004)
	unsigned long                                      ThumbnailImageOutOfDate : 1;                              // 0x0070(0x0004)
	unsigned long                                      bSkipSpawnCountCheck : 1;                                 // 0x0070(0x0004)
	unsigned long                                      bUseDelayRange : 1;                                       // 0x0070(0x0004)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0074(0x0004)
	float                                              LODDistanceCheckTime;                                     // 0x0078(0x0004)
	TArray<float>                                      LODDistances;                                             // 0x007C(0x000C)
	int                                                EditorLODSetting;                                         // 0x0088(0x0004)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                              // 0x008C(0x000C)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x0098(0x001C)
	float                                              SecondsBeforeInactive;                                    // 0x00B4(0x0004)
	struct FString                                     FloorMesh;                                                // 0x00B8(0x000C)
	struct FVector                                     FloorPosition;                                            // 0x00C4(0x000C)
	struct FRotator                                    FloorRotation;                                            // 0x00D0(0x000C)
	float                                              FloorScale;                                               // 0x00DC(0x0004)
	struct FVector                                     FloorScale3D;                                             // 0x00E0(0x000C)
	class UTexture2D*                                  ThumbnailImage;                                           // 0x00EC(0x0004) (ExportObject)
	float                                              Delay;                                                    // 0x00F0(0x0004)
	float                                              DelayLow;                                                 // 0x00F4(0x0004)
	struct FVector                                     MacroUVPosition;                                          // 0x00F8(0x000C)
	float                                              MacroUVRadius;                                            // 0x0104(0x0004)
	struct FBox                                        CustomOcclusionBounds;                                    // 0x0108(0x001C)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                             // 0x0124(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystem");
		return ptr;
	}


	void SetLODDistance();
	void SetCurrentLODMethod();
	void GetLODDistance();
	void GetLODLevelCount();
	void GetCurrentLODMethod();
};


// Class Engine.StringDictionary
// 0x003C (0x0078 - 0x003C)
class UStringDictionary : public UObject
{
public:
	struct FMap_Mirror                                 InnerMap;                                                 // 0x003C(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StringDictionary");
		return ptr;
	}


	void IsEmpty();
	void Clear();
	void ToArrayWithKeys();
	void ToArray();
	void GetKeyByValue();
	void Get();
	void Remove();
	void Add();
};


// Class Engine.Texture
// 0x00B4 (0x00F0 - 0x003C)
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                                 // 0x003C(0x0004)
	unsigned long                                      RGBE : 1;                                                 // 0x003C(0x0004)
	unsigned long                                      bIsSourceArtUncompressed : 1;                             // 0x003C(0x0004)
	unsigned long                                      CompressionNoAlpha : 1;                                   // 0x003C(0x0004)
	unsigned long                                      CompressionNone : 1;                                      // 0x003C(0x0004)
	unsigned long                                      CompressionNoMipmaps : 1;                                 // 0x003C(0x0004)
	unsigned long                                      CompressionFullDynamicRange : 1;                          // 0x003C(0x0004)
	unsigned long                                      DeferCompression : 1;                                     // 0x003C(0x0004)
	unsigned long                                      NeverStream : 1;                                          // 0x003C(0x0004)
	unsigned long                                      bDitherMipMapAlpha : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bPreserveBorderR : 1;                                     // 0x003C(0x0004)
	unsigned long                                      bPreserveBorderG : 1;                                     // 0x003C(0x0004)
	unsigned long                                      bPreserveBorderB : 1;                                     // 0x003C(0x0004)
	unsigned long                                      bPreserveBorderA : 1;                                     // 0x003C(0x0004)
	unsigned long                                      bNoTiling : 1;                                            // 0x003C(0x0004)
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x003C(0x0004)
	float                                              UnpackMin[0x4];                                           // 0x0040(0x0004)
	float                                              UnpackMax[0x4];                                           // 0x0050(0x0004)
	struct FUntypedBulkData_Mirror                     SourceArt;                                                // 0x0060(0x0034)
	TEnumAsByte<ETextureCompressionSettings>           CompressionSettings;                                      // 0x0094(0x0001)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x0095(0x0001)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0096(0x0001)
	TEnumAsByte<ETextureMipGenSettings>                MipGenSettings;                                           // 0x0097(0x0001)
	int                                                LODBias;                                                  // 0x0098(0x0004)
	int                                                CachedCombinedLODBias;                                    // 0x009C(0x0004)
	float                                              CachedRenderingMipBiasOffset;                             // 0x00A0(0x0004)
	int                                                CachedMinMipCount;                                        // 0x00A4(0x0004)
	struct FString                                     SourceFilePath;                                           // 0x00A8(0x000C) (ExportObject)
	struct FString                                     SourceFileTimestamp;                                      // 0x00B4(0x000C) (ExportObject)
	struct FPointer                                    Resource;                                                 // 0x00C0(0x0004)
	struct FGuid                                       LightingGuid;                                             // 0x00C4(0x0010) (ExportObject)
	float                                              AdjustBrightness;                                         // 0x00D4(0x0004)
	float                                              AdjustBrightnessCurve;                                    // 0x00D8(0x0004)
	float                                              AdjustVibrance;                                           // 0x00DC(0x0004)
	float                                              AdjustSaturation;                                         // 0x00E0(0x0004)
	float                                              AdjustRGBCurve;                                           // 0x00E4(0x0004)
	float                                              AdjustHue;                                                // 0x00E8(0x0004)
	int                                                InternalFormatLODBias;                                    // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}

};


// Class Engine.Texture2D
// 0x0094 (0x0184 - 0x00F0)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                                     // 0x00F0(0x000C)
	struct FIndirectArray_Mirror                       CachedPVRTCMips;                                          // 0x00FC(0x000C)
	int                                                SizeX;                                                    // 0x0108(0x0004)
	int                                                SizeY;                                                    // 0x010C(0x0004)
	int                                                OriginalSizeX;                                            // 0x0110(0x0004)
	int                                                OriginalSizeY;                                            // 0x0114(0x0004)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x0118(0x0001)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0119(0x0001)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x011A(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x011B(0x0001) MISSED OFFSET
	unsigned long                                      bIsStreamable : 1;                                        // 0x011C(0x0004)
	unsigned long                                      bHasCancelationPending : 1;                               // 0x011C(0x0004)
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;                  // 0x011C(0x0004)
	unsigned long                                      bForceMiplevelsToBeResident : 1;                          // 0x011C(0x0004)
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x011C(0x0004)
	float                                              ForceMipLevelsToBeResidentTimestamp;                      // 0x0120(0x0004)
	struct FName                                       TextureFileCacheName;                                     // 0x0124(0x0008)
	struct FGuid                                       TextureFileCacheGuid;                                     // 0x012C(0x0010)
	int                                                RequestedMips;                                            // 0x013C(0x0004)
	int                                                ResidentMips;                                             // 0x0140(0x0004)
	struct FGuid                                       UpdateGUID;                                               // 0x0144(0x0010)
	float                                              RenderingMipBias;                                         // 0x0154(0x0004)
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                            // 0x0158(0x0004)
	TArray<unsigned char>                              SystemMemoryData;                                         // 0x015C(0x000C)
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                                   // 0x0168(0x000C)
	int                                                MipTailBaseIdx;                                           // 0x0174(0x0004)
	struct FPointer                                    ResourceMem;                                              // 0x0178(0x0004)
	int                                                FirstResourceMemMip;                                      // 0x017C(0x0004)
	float                                              Timer;                                                    // 0x0180(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}


	void STATIC_Create();
	void SetForceMipLevelsToBeResident();
};


// Class Engine.LightMapTexture2D
// 0x0004 (0x0188 - 0x0184)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0184(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0004 (0x0188 - 0x0184)
class UShadowMapTexture2D : public UTexture2D
{
public:
	int                                                ShadowmapFlags;                                           // 0x0184(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}

};


// Class Engine.WaveFormBase
// 0x0004 (0x0040 - 0x003C)
class UWaveFormBase : public UObject
{
public:
	class UForceFeedbackWaveform*                      TheWaveForm;                                              // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaveFormBase");
		return ptr;
	}

};


// Class Engine.World
// 0x0278 (0x02B4 - 0x003C)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x278];                                     // 0x003C(0x0278) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.World");
		return ptr;
	}

};


// Class Engine.EnvironmentVolume
// 0x000C (0x0264 - 0x0258)
class AEnvironmentVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x0258(0x0004)
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x025C(0x0004)
	unsigned long                                      bSplitNavMesh : 1;                                        // 0x0260(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EnvironmentVolume");
		return ptr;
	}


	void SetSplitNavMesh();
};


// Class Engine.TestSplittingVolume
// 0x0004 (0x025C - 0x0258)
class ATestSplittingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TestSplittingVolume");
		return ptr;
	}

};


// Class Engine.AIController
// 0x0018 (0x03D0 - 0x03B8)
class AAIController : public AController
{
public:
	unsigned long                                      bAdjustFromWalls : 1;                                     // 0x03B8(0x0004)
	unsigned long                                      bReverseScriptedRoute : 1;                                // 0x03B8(0x0004)
	float                                              Skill;                                                    // 0x03BC(0x0004)
	class AActor*                                      ScriptedMoveTarget;                                       // 0x03C0(0x0004)
	class ARoute*                                      ScriptedRoute;                                            // 0x03C4(0x0004)
	int                                                ScriptedRouteIndex;                                       // 0x03C8(0x0004)
	class AActor*                                      ScriptedFocus;                                            // 0x03CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AIController");
		return ptr;
	}


	void CanFireWeapon();
	void ShouldRefire();
	void NotifyWeaponFinishedFiring();
	void NotifyWeaponFired();
	void OnAIMoveToActor();
	void GetPlayerViewPoint();
	void SetTeam();
	void PriorityObjective();
	void GetOrders();
	void GetOrderObject();
	void SetOrders();
	void DisplayDebug();
	void Reset();
	void PreBeginPlay();
};


// Class Engine.EngineNativeDunDefAIController
// 0x000C (0x03DC - 0x03D0)
class AEngineNativeDunDefAIController : public AAIController
{
public:
	TEnumAsByte<EEnemyTargetingCategory>               EnemyTargetingCategory;                                   // 0x03D0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	float                                              EnemyPlayerFavoringMultiplier;                            // 0x03D4(0x0004)
	float                                              EnemyIgnoreCorePlayerFavoringMultiplier;                  // 0x03D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineNativeDunDefAIController");
		return ptr;
	}

};


// Class Engine.CrowdAgentBase
// 0x0004 (0x0220 - 0x021C)
class ACrowdAgentBase : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;                      // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CrowdAgentBase");
		return ptr;
	}


	void GetSpreadValue();
	void NotifyPathChanged();
};


// Class Engine.PathTargetPoint
// 0x0000 (0x021C - 0x021C)
class APathTargetPoint : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathTargetPoint");
		return ptr;
	}

};


// Class Engine.NavMeshObstacle
// 0x0008 (0x0224 - 0x021C)
class ANavMeshObstacle : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x021C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshObstacle");
		return ptr;
	}


	void SetEnabled();
	void OnToggle();
	void PostBeginPlay();
	void UnRegisterObstacle();
	void RegisterObstacle();
};


// Class Engine.PylonSeed
// 0x0004 (0x0220 - 0x021C)
class APylonSeed : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PylonSeed");
		return ptr;
	}

};


// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x01C4 - 0x01C4)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverGroupRenderingComponent");
		return ptr;
	}

};


// Class Engine.CoverMeshComponent
// 0x0024 (0x0254 - 0x0230)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FCoverMeshes>                        Meshes;                                                   // 0x0230(0x000C) (ExportObject)
	struct FVector                                     LocationOffset;                                           // 0x023C(0x000C)
	class UStaticMesh*                                 AutoAdjustOn;                                             // 0x0248(0x0004) (ExportObject)
	class UStaticMesh*                                 AutoAdjustOff;                                            // 0x024C(0x0004) (ExportObject)
	class UStaticMesh*                                 Disabled;                                                 // 0x0250(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverMeshComponent");
		return ptr;
	}

};


// Class Engine.NavMeshRenderingComponent
// 0x0000 (0x01C4 - 0x01C4)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshRenderingComponent");
		return ptr;
	}

};


// Class Engine.PathRenderingComponent
// 0x0000 (0x01C4 - 0x01C4)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathRenderingComponent");
		return ptr;
	}

};


// Class Engine.RouteRenderingComponent
// 0x0000 (0x01C4 - 0x01C4)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RouteRenderingComponent");
		return ptr;
	}

};


// Class Engine.Interface_NavMeshPathObject
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavMeshPathObject");
		return ptr;
	}

};


// Class Engine.Interface_NavMeshPathSwitch
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathSwitch : public UInterface_NavMeshPathObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavMeshPathSwitch");
		return ptr;
	}


	void AIActivateSwitch();
};


// Class Engine.Interface_NavMeshPathObstacle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObstacle : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavMeshPathObstacle");
		return ptr;
	}

};


// Class Engine.NavigationHandle
// 0x0090 (0x00CC - 0x003C)
class UNavigationHandle : public UObject
{
public:
	class APylon*                                      AnchorPylon;                                              // 0x003C(0x0004)
	struct FPointer                                    AnchorPoly;                                               // 0x0040(0x0004)
	struct FPathStore                                  PathCache;                                                // 0x0044(0x000C)
	struct FPointer                                    BestUnfinishedPathPoint;                                  // 0x0050(0x0004)
	struct FPointer                                    CurrentEdge;                                              // 0x0054(0x0004)
	struct FPointer                                    SubGoal_DestPoly;                                         // 0x0058(0x0004)
	struct FBasedPosition                              FinalDestination;                                         // 0x005C(0x0034)
	unsigned long                                      bSkipRouteCacheUpdates : 1;                               // 0x0090(0x0004)
	unsigned long                                      bUseORforEvaluateGoal : 1;                                // 0x0090(0x0004)
	unsigned long                                      bDebugConstraintsAndGoalEvals : 1;                        // 0x0090(0x0004)
	unsigned long                                      bUltraVerbosePathDebugging : 1;                           // 0x0090(0x0004)
	class UNavMeshPathConstraint*                      PathConstraintList;                                       // 0x0094(0x0004)
	class UNavMeshPathGoalEvaluator*                   PathGoalList;                                             // 0x0098(0x0004)
	struct FNavMeshPathParams                          CachedPathParams;                                         // 0x009C(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationHandle");
		return ptr;
	}


	void IsBoxOnNavMesh();
	void GetFirstMoveLocation();
	void IsAnchorInescapable();
	void LimitPathCacheDistance();
	void GetValidPositionsForBox();
	void GetAllPolyCentersWithinBounds();
	void DrawPathCache();
	void ActorReachable();
	void PointReachable();
	void GetNearestNavMeshPoint();
	void PointCheck();
	void LineCheck();
	void STATIC_ObstaclePointCheck();
	void STATIC_ObstacleLineCheck();
	void SuggestMovePreparation();
	void FindPath();
	void ComputeValidFinalDestination();
	void SetFinalDestination();
	void GetNextMoveLocation();
	void STATIC_GetPylonFromPos();
	void FindPylon();
	void GetBestUnfinishedPathPoint();
	void PathCache_RemoveIndex();
	void PathCache_GetGoalPoint();
	void PathCache_Empty();
	void GetPathCacheLength();
	void CreatePathGoalEvaluator();
	void CreatePathConstraint();
	void AddGoalEvaluator();
	void AddPathConstraint();
	void ClearConstraints();
};


// Class Engine.NavMeshPathConstraint
// 0x0014 (0x0050 - 0x003C)
class UNavMeshPathConstraint : public UObject
{
public:
	class UNavMeshPathConstraint*                      NextConstraint;                                           // 0x003C(0x0004)
	int                                                NumNodesProcessed;                                        // 0x0040(0x0004)
	int                                                NumThrownOutNodes;                                        // 0x0044(0x0004)
	float                                              AddedDirectCost;                                          // 0x0048(0x0004)
	float                                              AddedHeuristicCost;                                       // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPathConstraint");
		return ptr;
	}


	void GetDumpString();
	void Recycle();
};


// Class Engine.NavMeshPath_AlongLine
// 0x000C (0x005C - 0x0050)
class UNavMeshPath_AlongLine : public UNavMeshPathConstraint
{
public:
	struct FVector                                     Direction;                                                // 0x0050(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_AlongLine");
		return ptr;
	}


	void Recycle();
	void STATIC_AlongLine();
};


// Class Engine.NavMeshPath_EnforceTwoWayEdges
// 0x0000 (0x0050 - 0x0050)
class UNavMeshPath_EnforceTwoWayEdges : public UNavMeshPathConstraint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_EnforceTwoWayEdges");
		return ptr;
	}


	void STATIC_EnforceTwoWayEdges();
};


// Class Engine.NavMeshPath_MinDistBetweenSpecsOfType
// 0x0011 (0x0061 - 0x0050)
class UNavMeshPath_MinDistBetweenSpecsOfType : public UNavMeshPathConstraint
{
public:
	float                                              MinDistBetweenEdgeTypes;                                  // 0x0050(0x0004)
	struct FVector                                     InitLocation;                                             // 0x0054(0x000C)
	TEnumAsByte<ENavMeshEdgeType>                      EdgeType;                                                 // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_MinDistBetweenSpecsOfType");
		return ptr;
	}


	void Recycle();
	void STATIC_EnforceMinDist();
};


// Class Engine.NavMeshPath_Toward
// 0x0010 (0x0060 - 0x0050)
class UNavMeshPath_Toward : public UNavMeshPathConstraint
{
public:
	class AActor*                                      GoalActor;                                                // 0x0050(0x0004)
	struct FVector                                     GoalPoint;                                                // 0x0054(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_Toward");
		return ptr;
	}


	void Recycle();
	void STATIC_TowardPoint();
	void STATIC_TowardGoal();
};


// Class Engine.NavMeshPath_WithinDistanceEnvelope
// 0x001C (0x006C - 0x0050)
class UNavMeshPath_WithinDistanceEnvelope : public UNavMeshPathConstraint
{
public:
	float                                              MaxDistance;                                              // 0x0050(0x0004)
	float                                              MinDistance;                                              // 0x0054(0x0004)
	unsigned long                                      bSoft : 1;                                                // 0x0058(0x0004)
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;                  // 0x0058(0x0004)
	float                                              SoftStartPenalty;                                         // 0x005C(0x0004)
	struct FVector                                     EnvelopeTestPoint;                                        // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_WithinDistanceEnvelope");
		return ptr;
	}


	void Recycle();
	void STATIC_StayWithinEnvelopeToLoc();
};


// Class Engine.NavMeshPath_WithinTraversalDist
// 0x000C (0x005C - 0x0050)
class UNavMeshPath_WithinTraversalDist : public UNavMeshPathConstraint
{
public:
	float                                              MaxTraversalDist;                                         // 0x0050(0x0004)
	unsigned long                                      bSoft : 1;                                                // 0x0054(0x0004)
	float                                              SoftStartPenalty;                                         // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_WithinTraversalDist");
		return ptr;
	}


	void Recycle();
	void STATIC_DontExceedMaxDist();
};


// Class Engine.NavMeshPathGoalEvaluator
// 0x0014 (0x0050 - 0x003C)
class UNavMeshPathGoalEvaluator : public UObject
{
public:
	class UNavMeshPathGoalEvaluator*                   NextEvaluator;                                            // 0x003C(0x0004)
	int                                                MaxPathVisits;                                            // 0x0040(0x0004)
	unsigned long                                      bAlwaysCallEvaluateGoal : 1;                              // 0x0044(0x0004)
	int                                                NumNodesThrownOut;                                        // 0x0048(0x0004)
	int                                                NumNodesProcessed;                                        // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPathGoalEvaluator");
		return ptr;
	}


	void GetDumpString();
	void Recycle();
};


// Class Engine.NavMeshGoal_At
// 0x001C (0x006C - 0x0050)
class UNavMeshGoal_At : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     Goal;                                                     // 0x0050(0x000C)
	float                                              GoalDist;                                                 // 0x005C(0x0004)
	unsigned long                                      bKeepPartial : 1;                                         // 0x0060(0x0004)
	struct FPointer                                    GoalPoly;                                                 // 0x0064(0x0004)
	struct FPointer                                    PartialGoal;                                              // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_At");
		return ptr;
	}


	void Recycle();
	void STATIC_AtLocation();
	void STATIC_AtActor();
	void RecycleNative();
};


// Class Engine.NavMeshGoal_ClosestActorInList
// 0x004C (0x009C - 0x0050)
class UNavMeshGoal_ClosestActorInList : public UNavMeshPathGoalEvaluator
{
public:
	TArray<struct FBiasedGoalActor>                    GoalList;                                                 // 0x0050(0x000C)
	struct FMultiMap_Mirror                            PolyToGoalActorMap;                                       // 0x005C(0x003C)
	struct FPointer                                    CachedAnchorPoly;                                         // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_ClosestActorInList");
		return ptr;
	}


	void RecycleInternal();
	void Recycle();
	void STATIC_ClosestActorInList();
};


// Class Engine.NavMeshGoal_Null
// 0x0004 (0x0054 - 0x0050)
class UNavMeshGoal_Null : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    PartialGoal;                                              // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_Null");
		return ptr;
	}


	void Recycle();
	void RecycleNative();
	void STATIC_GoUntilBust();
};


// Class Engine.NavMeshGoal_PolyEncompassesAI
// 0x0000 (0x0050 - 0x0050)
class UNavMeshGoal_PolyEncompassesAI : public UNavMeshPathGoalEvaluator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_PolyEncompassesAI");
		return ptr;
	}


	void Recycle();
	void STATIC_MakeSureAIFits();
};


// Class Engine.PathConstraint
// 0x0008 (0x0044 - 0x003C)
class UPathConstraint : public UObject
{
public:
	int                                                CacheIdx;                                                 // 0x003C(0x0004)
	class UPathConstraint*                             NextConstraint;                                           // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathConstraint");
		return ptr;
	}


	void GetDumpString();
	void Recycle();
};


// Class Engine.Path_AlongLine
// 0x000C (0x0050 - 0x0044)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                                // 0x0044(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_AlongLine");
		return ptr;
	}


	void Recycle();
	void STATIC_AlongLine();
};


// Class Engine.Path_AvoidInEscapableNodes
// 0x0010 (0x0054 - 0x0044)
class UPath_AvoidInEscapableNodes : public UPathConstraint
{
public:
	int                                                Radius;                                                   // 0x0044(0x0004)
	int                                                Height;                                                   // 0x0048(0x0004)
	int                                                MaxFallSpeed;                                             // 0x004C(0x0004)
	int                                                MoveFlags;                                                // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_AvoidInEscapableNodes");
		return ptr;
	}


	void Recycle();
	void STATIC_DontGetStuck();
	void CachePawnReacFlags();
};


// Class Engine.Path_MinDistBetweenSpecsOfType
// 0x0014 (0x0058 - 0x0044)
class UPath_MinDistBetweenSpecsOfType : public UPathConstraint
{
public:
	float                                              MinDistBetweenSpecTypes;                                  // 0x0044(0x0004)
	struct FVector                                     InitLocation;                                             // 0x0048(0x000C)
	class UClass*                                      ReachSpecClass;                                           // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_MinDistBetweenSpecsOfType");
		return ptr;
	}


	void Recycle();
	void STATIC_EnforceMinDist();
};


// Class Engine.Path_TowardGoal
// 0x0004 (0x0048 - 0x0044)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                                // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_TowardGoal");
		return ptr;
	}


	void Recycle();
	void STATIC_TowardGoal();
};


// Class Engine.Path_TowardPoint
// 0x000C (0x0050 - 0x0044)
class UPath_TowardPoint : public UPathConstraint
{
public:
	struct FVector                                     GoalPoint;                                                // 0x0044(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_TowardPoint");
		return ptr;
	}


	void Recycle();
	void STATIC_TowardPoint();
};


// Class Engine.Path_WithinDistanceEnvelope
// 0x001C (0x0060 - 0x0044)
class UPath_WithinDistanceEnvelope : public UPathConstraint
{
public:
	float                                              MaxDistance;                                              // 0x0044(0x0004)
	float                                              MinDistance;                                              // 0x0048(0x0004)
	unsigned long                                      bSoft : 1;                                                // 0x004C(0x0004)
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;                  // 0x004C(0x0004)
	float                                              SoftStartPenalty;                                         // 0x0050(0x0004)
	struct FVector                                     EnvelopeTestPoint;                                        // 0x0054(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_WithinDistanceEnvelope");
		return ptr;
	}


	void Recycle();
	void STATIC_StayWithinEnvelopeToLoc();
};


// Class Engine.Path_WithinTraversalDist
// 0x000C (0x0050 - 0x0044)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                         // 0x0044(0x0004)
	unsigned long                                      bSoft : 1;                                                // 0x0048(0x0004)
	float                                              SoftStartPenalty;                                         // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_WithinTraversalDist");
		return ptr;
	}


	void Recycle();
	void STATIC_DontExceedMaxDist();
};


// Class Engine.PathGoalEvaluator
// 0x0010 (0x004C - 0x003C)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                            // 0x003C(0x0004)
	class ANavigationPoint*                            GeneratedGoal;                                            // 0x0040(0x0004)
	int                                                MaxPathVisits;                                            // 0x0044(0x0004)
	int                                                CacheIdx;                                                 // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathGoalEvaluator");
		return ptr;
	}


	void GetDumpString();
	void Recycle();
};


// Class Engine.Goal_AtActor
// 0x000C (0x0058 - 0x004C)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                                // 0x004C(0x0004)
	float                                              GoalDist;                                                 // 0x0050(0x0004)
	unsigned long                                      bKeepPartial : 1;                                         // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Goal_AtActor");
		return ptr;
	}


	void Recycle();
	void STATIC_AtActor();
};


// Class Engine.Goal_Null
// 0x0000 (0x004C - 0x004C)
class UGoal_Null : public UPathGoalEvaluator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Goal_Null");
		return ptr;
	}


	void Recycle();
	void STATIC_GoUntilBust();
};


// Class Engine.SequenceObject
// 0x0050 (0x008C - 0x003C)
class USequenceObject : public UObject
{
public:
	int                                                ObjInstanceVersion;                                       // 0x003C(0x0004)
	class USequence*                                   ParentSequence;                                           // 0x0040(0x0004)
	int                                                ObjPosX;                                                  // 0x0044(0x0004) (ExportObject)
	int                                                ObjPosY;                                                  // 0x0048(0x0004) (ExportObject)
	struct FString                                     ObjName;                                                  // 0x004C(0x000C) (ExportObject)
	struct FString                                     ObjCategory;                                              // 0x0058(0x000C) (ExportObject)
	TArray<struct FString>                             ObjRemoveInProject;                                       // 0x0064(0x000C) (ExportObject)
	struct FColor                                      ObjColor;                                                 // 0x0070(0x0004) (ExportObject)
	struct FString                                     ObjComment;                                               // 0x0074(0x000C)
	unsigned long                                      bDeletable : 1;                                           // 0x0080(0x0004)
	unsigned long                                      bDrawFirst : 1;                                           // 0x0080(0x0004)
	unsigned long                                      bDrawLast : 1;                                            // 0x0080(0x0004)
	unsigned long                                      bOutputObjCommentToScreen : 1;                            // 0x0080(0x0004)
	unsigned long                                      bSuppressAutoComment : 1;                                 // 0x0080(0x0004)
	int                                                DrawWidth;                                                // 0x0084(0x0004)
	int                                                DrawHeight;                                               // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceObject");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void IsPastingIntoUISequenceAllowed();
	void IsValidUISequenceObject();
	void IsPastingIntoLevelSequenceAllowed();
	void IsValidLevelSequenceObject();
	void GetWorldInfo();
	void ScriptLog();
};


// Class Engine.SequenceOp
// 0x0044 (0x00D0 - 0x008C)
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bActive : 1;                                              // 0x008C(0x0004)
	unsigned long                                      bLatentExecution : 1;                                     // 0x008C(0x0004)
	unsigned long                                      bAutoActivateOutputLinks : 1;                             // 0x008C(0x0004)
	unsigned long                                      bHaveMovingVarConnector : 1;                              // 0x008C(0x0004) (ExportObject)
	unsigned long                                      bHaveMovingOutputConnector : 1;                           // 0x008C(0x0004) (ExportObject)
	unsigned long                                      bPendingVarConnectorRecalc : 1;                           // 0x008C(0x0004) (ExportObject)
	unsigned long                                      bPendingOutputConnectorRecalc : 1;                        // 0x008C(0x0004) (ExportObject)
	TArray<struct FSeqOpInputLink>                     InputLinks;                                               // 0x0090(0x000C)
	TArray<struct FSeqOpOutputLink>                    OutputLinks;                                              // 0x009C(0x000C)
	TArray<struct FSeqVarLink>                         VariableLinks;                                            // 0x00A8(0x000C)
	TArray<struct FSeqEventLink>                       EventLinks;                                               // 0x00B4(0x000C)
	int                                                PlayerIndex;                                              // 0x00C0(0x0004)
	unsigned char                                      GamepadID;                                                // 0x00C4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	int                                                ActivateCount;                                            // 0x00C8(0x0004)
	int                                                SearchTag;                                                // 0x00CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceOp");
		return ptr;
	}


	void ForceActivateInput();
	void GetController();
	void GetPawn();
	void Reset();
	void PublishLinkedVariableValues();
	void PopulateLinkedVariableValues();
	void VersionUpdated();
	void Deactivated();
	void Activated();
	void ActivateNamedOutputLink();
	void ActivateOutputLink();
	void LinkedVariables();
	void GetBoolVars();
	void GetInterpDataVars();
	void GetObjectVars();
	void GetLinkedObjects();
	void HasLinkedOps();
};


// Class Engine.SequenceAction
// 0x0018 (0x00E8 - 0x00D0)
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                              // 0x00D0(0x0008)
	unsigned long                                      bCallHandler : 1;                                         // 0x00D8(0x0004)
	TArray<class UObject*>                             Targets;                                                  // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceAction");
		return ptr;
	}

};


// Class Engine.SeqAct_ModifyProperty
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_ModifyProperty : public USequenceAction
{
public:
	TArray<struct FPropertyInfo>                       Properties;                                               // 0x00E8(0x000C)
	unsigned long                                      bIfActorCheckComponent : 1;                               // 0x00F4(0x0004)
	class UClass*                                      ComponentClass;                                           // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyProperty");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActor
// 0x0030 (0x024C - 0x021C)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x021C(0x0004)
	unsigned long                                      bCheckpointSaveRotation : 1;                              // 0x021C(0x0004)
	unsigned long                                      bShouldDoAnimNotifies : 1;                                // 0x021C(0x0004)
	unsigned long                                      bSetNoSkeletonUpdate : 1;                                 // 0x021C(0x0004) (Edit)
	unsigned long                                      bCollideActors_OldValue : 1;                              // 0x021C(0x0004)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x0220(0x0004)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0224(0x0004)
	class UAudioComponent*                             FacialAudioComp;                                          // 0x0228(0x0004)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x022C(0x0004) (Edit)
	class UMaterialInterface*                          ReplicatedMaterial;                                       // 0x0230(0x0004) (Edit)
	TArray<struct FSkelMeshActorControlTarget>         ControlTargets;                                           // 0x0234(0x000C)
	TArray<class UInterpGroup*>                        InterpGroupList;                                          // 0x0240(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}


	void SkelMeshActorOnParticleSystemFinished();
	void PlayParticleEffect();
	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
	void TakeDamage();
	void DoKismetAttachment();
	void OnSetSkelControlTarget();
	void OnUpdatePhysBonesFromAnim();
	void OnSetMesh();
	void IsActorPlayingFaceFXAnim();
	void GetActorFaceFXAsset();
	void OnPlayFaceFXAnim();
	void GetFaceFXAudioComponent();
	void StopActorFaceFXAnim();
	void PlayActorFaceFXAnim();
	void MAT_FinishAnimControl();
	void FinishAnimControl();
	void SetAnimPosition();
	void MAT_BeginAnimControl();
	void BeginAnimControl();
	void OnSetMaterial();
	void OnToggle();
	void OnModifyProperty();
	void ReplicatedEvent();
	void UpdateAnimSetList();
	void Destroyed();
	void PostBeginPlay();
};


// Class Engine.SkeletalMeshActorBasedOnExtremeContent
// 0x0018 (0x0264 - 0x024C)
class ASkeletalMeshActorBasedOnExtremeContent : public ASkeletalMeshActor
{
public:
	TArray<struct FSkelMaterialSetterDatum>            ExtremeContent;                                           // 0x024C(0x000C)
	TArray<struct FSkelMaterialSetterDatum>            NonExtremeContent;                                        // 0x0258(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorBasedOnExtremeContent");
		return ptr;
	}


	void SetMaterialBasedOnExtremeContent();
	void PostBeginPlay();
};


// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x024C - 0x024C)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorSpawnable");
		return ptr;
	}

};


// Class Engine.SkeletalMeshCinematicActor
// 0x0000 (0x024C - 0x024C)
class ASkeletalMeshCinematicActor : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshCinematicActor");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActorMAT
// 0x0010 (0x025C - 0x024C)
class ASkeletalMeshActorMAT : public ASkeletalMeshCinematicActor
{
public:
	TArray<class UAnimNodeSlot*>                       SlotNodes;                                                // 0x024C(0x000C)
	unsigned long                                      bAllowMatineeSetAnimPosition : 1;                         // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorMAT");
		return ptr;
	}


	void SetSkelControlScale();
	void SetMorphWeight();
	void FinishAnimControl();
	void MAT_SetAnimPosition();
	void SetAnimPosition();
	void ClearAnimNodes();
	void CacheAnimNodes();
	void PostInitAnimTree();
	void Destroyed();
	void MAT_SetSkelControlScale();
	void MAT_SetMorphWeight();
	void MAT_SetAnimWeights();
};


// Class Engine.AnimationCompressionAlgorithm
// 0x0012 (0x004E - 0x003C)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                              // 0x003C(0x000C)
	unsigned long                                      bNeedsSkeleton : 1;                                       // 0x0048(0x0004)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x004C(0x0001)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x004D(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	int                                                MinKeys;                                                  // 0x0050(0x0004)
	unsigned long                                      bStartAtSecondKey : 1;                                    // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys
// 0x001A (0x0068 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveLinearKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              MaxPosDiff;                                               // 0x0050(0x0004)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004)
	float                                              MaxEffectorDiff;                                          // 0x0058(0x0004)
	float                                              MinEffectorDiff;                                          // 0x005C(0x0004)
	float                                              ParentKeyScale;                                           // 0x0060(0x0004)
	unsigned long                                      bRetarget : 1;                                            // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              MaxPosDiff;                                               // 0x0050(0x0004)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RevertToRaw");
		return ptr;
	}

};


// Class Engine.AnimMetaData
// 0x0000 (0x003C - 0x003C)
class UAnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData");
		return ptr;
	}

};


// Class Engine.AnimMetaData_SkelControl
// 0x0018 (0x0054 - 0x003C)
class UAnimMetaData_SkelControl : public UAnimMetaData
{
public:
	TArray<struct FName>                               SkelControlNameList;                                      // 0x003C(0x000C)
	unsigned long                                      bFullControlOverController : 1;                           // 0x0048(0x0004)
	struct FName                                       SkelControlName;                                          // 0x004C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData_SkelControl");
		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x00F8 (0x0134 - 0x003C)
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                             // 0x003C(0x0008)
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                 // 0x0044(0x000C)
	TArray<class UAnimMetaData*>                       MetaData;                                                 // 0x0050(0x000C)
	TArray<struct FSkelControlModifier>                BoneControlModifiers;                                     // 0x005C(0x000C)
	float                                              SequenceLength;                                           // 0x0068(0x0004)
	int                                                NumFrames;                                                // 0x006C(0x0004)
	float                                              RateScale;                                                // 0x0070(0x0004)
	unsigned long                                      bNoLoopingInterpolation : 1;                              // 0x0074(0x0004)
	unsigned long                                      bIsAdditive : 1;                                          // 0x0074(0x0004)
	unsigned long                                      bAdditiveBuiltLooping : 1;                                // 0x0074(0x0004) (ExportObject)
	unsigned long                                      bDoNotOverrideCompression : 1;                            // 0x0074(0x0004) (ExportObject)
	unsigned long                                      bHasBeenUsed : 1;                                         // 0x0074(0x0004)
	TArray<struct FRawAnimSequenceTrack>               RawAnimData;                                              // 0x0078(0x000C)
	TArray<struct FRawAnimSequenceTrack>               RawAnimationData;                                         // 0x0084(0x000C)
	TArray<struct FTranslationTrack>                   TranslationData;                                          // 0x0090(0x000C)
	TArray<struct FRotationTrack>                      RotationData;                                             // 0x009C(0x000C)
	TArray<struct FCurveTrack>                         CurveData;                                                // 0x00A8(0x000C)
	class UAnimationCompressionAlgorithm*              CompressionScheme;                                        // 0x00B4(0x0004) (ExportObject)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x00B8(0x0001)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x00B9(0x0001)
	TEnumAsByte<EAnimationKeyFormat>                   KeyEncodingFormat;                                        // 0x00BA(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00BB(0x0001) MISSED OFFSET
	TArray<int>                                        CompressedTrackOffsets;                                   // 0x00BC(0x000C)
	TArray<unsigned char>                              CompressedByteStream;                                     // 0x00C8(0x000C)
	struct FPointer                                    TranslationCodec;                                         // 0x00D4(0x0004)
	struct FPointer                                    RotationCodec;                                            // 0x00D8(0x0004)
	TArray<struct FBoneAtom>                           AdditiveRefPose;                                          // 0x00DC(0x000C)
	TArray<struct FRawAnimSequenceTrack>               AdditiveBasePose;                                         // 0x00E8(0x000C)
	struct FName                                       AdditiveRefName;                                          // 0x00F4(0x0008) (ExportObject)
	TArray<class UAnimSequence*>                       AdditiveBasePoseAnimSeq;                                  // 0x00FC(0x000C) (ExportObject)
	TArray<class UAnimSequence*>                       AdditiveTargetPoseAnimSeq;                                // 0x0108(0x000C) (ExportObject)
	TArray<class UAnimSequence*>                       RelatedAdditiveAnimSeqs;                                  // 0x0114(0x000C) (ExportObject)
	int                                                EncodingPkgVersion;                                       // 0x0120(0x0004)
	float                                              UseScore;                                                 // 0x0124(0x0004)
	TArray<struct FAnimTag>                            AnimTags;                                                 // 0x0128(0x000C) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}


	void GetNotifyTimeByClass();
};


// Class Engine.AnimMetaData_SkelControlKeyFrame
// 0x000C (0x0060 - 0x0054)
class UAnimMetaData_SkelControlKeyFrame : public UAnimMetaData_SkelControl
{
public:
	TArray<struct FTimeModifier>                       KeyFrames;                                                // 0x0054(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData_SkelControlKeyFrame");
		return ptr;
	}

};


// Class Engine.AnimNotify
// 0x0000 (0x003C - 0x003C)
class UAnimNotify : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}


	void FindNextNotifyOfClass();
};


// Class Engine.AnimNotify_CameraEffect
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify_CameraEffect : public UAnimNotify
{
public:
	class UClass*                                      CameraLensEffect;                                         // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_CameraEffect");
		return ptr;
	}

};


// Class Engine.AnimNotify_Footstep
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                                 // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Footstep");
		return ptr;
	}

};


// Class Engine.AnimNotify_Kismet
// 0x0008 (0x0044 - 0x003C)
class UAnimNotify_Kismet : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x003C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Kismet");
		return ptr;
	}

};


// Class Engine.AnimNotify_PlayParticleEffect
// 0x0034 (0x0070 - 0x003C)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x003C(0x0004)
	unsigned long                                      bIsExtremeContent : 1;                                    // 0x0040(0x0004)
	unsigned long                                      bAttach : 1;                                              // 0x0040(0x0004)
	unsigned long                                      bPreview : 1;                                             // 0x0040(0x0004) (ExportObject)
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                                 // 0x0040(0x0004)
	unsigned long                                      bForceSpawn : 1;                                          // 0x0040(0x0004)
	unsigned long                                      bForceViewCheck : 1;                                      // 0x0040(0x0004)
	unsigned long                                      bUseParticleComponentScale : 1;                           // 0x0040(0x0004)
	unsigned long                                      bDontSpawnIfCustomTagAlreadyExists : 1;                   // 0x0040(0x0004)
	unsigned long                                      bDontSpawnIfLessThanFullAnimNodeWeight : 1;               // 0x0040(0x0004)
	struct FName                                       SocketName;                                               // 0x0044(0x0008)
	struct FName                                       BoneName;                                                 // 0x004C(0x0008)
	float                                              DontSpawnIfOwnerOutOfViewTime;                            // 0x0054(0x0004)
	float                                              ParticleTimeDilation;                                     // 0x0058(0x0004)
	struct FVector                                     ParticleComponentScale;                                   // 0x005C(0x000C)
	struct FName                                       CustomTagName;                                            // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlayParticleEffect");
		return ptr;
	}

};


// Class Engine.AnimNotify_Rumble
// 0x0010 (0x004C - 0x003C)
class UAnimNotify_Rumble : public UAnimNotify
{
public:
	class UClass*                                      PredefinedWaveForm;                                       // 0x003C(0x0004)
	class UForceFeedbackWaveform*                      WaveForm;                                                 // 0x0040(0x0004)
	unsigned long                                      bCheckForBasedPlayer : 1;                                 // 0x0044(0x0004)
	float                                              EffectRadius;                                             // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Rumble");
		return ptr;
	}

};


// Class Engine.AnimNotify_Script
// 0x0018 (0x0054 - 0x003C)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x003C(0x0008)
	struct FName                                       NotifyTickName;                                           // 0x0044(0x0008)
	struct FName                                       NotifyEndName;                                            // 0x004C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Script");
		return ptr;
	}

};


// Class Engine.AnimNotify_Scripted
// 0x0000 (0x003C - 0x003C)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Scripted");
		return ptr;
	}


	void Notify();
};


// Class Engine.AnimNotify_ViewShake
// 0x0050 (0x008C - 0x003C)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              Duration;                                                 // 0x003C(0x0004)
	struct FVector                                     RotAmplitude;                                             // 0x0040(0x000C)
	struct FVector                                     RotFrequency;                                             // 0x004C(0x000C)
	struct FVector                                     LocAmplitude;                                             // 0x0058(0x000C)
	struct FVector                                     LocFrequency;                                             // 0x0064(0x000C)
	float                                              FOVAmplitude;                                             // 0x0070(0x0004)
	float                                              FOVFrequency;                                             // 0x0074(0x0004)
	unsigned long                                      bDoControllerVibration : 1;                               // 0x0078(0x0004)
	unsigned long                                      bUseBoneLocation : 1;                                     // 0x0078(0x0004)
	float                                              ShakeRadius;                                              // 0x007C(0x0004)
	struct FName                                       BoneName;                                                 // 0x0080(0x0008)
	class UCameraShake*                                ShakeParams;                                              // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ViewShake");
		return ptr;
	}


	void Notify();
};


// Class Engine.AnimNotify_Sound
// 0x0018 (0x0054 - 0x003C)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                                 // 0x003C(0x0004)
	unsigned long                                      bFollowActor : 1;                                         // 0x0040(0x0004)
	unsigned long                                      bIgnoreIfActorHidden : 1;                                 // 0x0040(0x0004)
	struct FName                                       BoneName;                                                 // 0x0044(0x0008)
	int                                                SkelCompSoundCueIndex;                                    // 0x004C(0x0004)
	float                                              PercentToPlay;                                            // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Sound");
		return ptr;
	}

};


// Class Engine.AnimNotify_Trails
// 0x0060 (0x009C - 0x003C)
class UAnimNotify_Trails : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x003C(0x0004)
	unsigned long                                      bIsExtremeContent : 1;                                    // 0x0040(0x0004)
	unsigned long                                      bPreview : 1;                                             // 0x0040(0x0004) (ExportObject)
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                                 // 0x0040(0x0004)
	unsigned long                                      bResampleRequired : 1;                                    // 0x0040(0x0004)
	struct FName                                       FirstEdgeSocketName;                                      // 0x0044(0x0008)
	struct FName                                       SecondEdgeSocketName;                                     // 0x004C(0x0008)
	struct FName                                       ControlPointSocketName;                                   // 0x0054(0x0008)
	float                                              LastStartTime;                                            // 0x005C(0x0004)
	float                                              EndTime;                                                  // 0x0060(0x0004)
	float                                              SampleTimeStep;                                           // 0x0064(0x0004)
	TArray<struct FTrailSamplePoint>                   TrailSampleData;                                          // 0x0068(0x000C)
	float                                              SamplesPerSecond;                                         // 0x0074(0x0004)
	struct FRotator                                    AnimTrailRotationOffset;                                  // 0x0078(0x000C)
	TArray<struct FTrailSample>                        TrailSampledData;                                         // 0x0084(0x000C)
	float                                              CurrentTime;                                              // 0x0090(0x0004)
	float                                              TimeStep;                                                 // 0x0094(0x0004)
	class UAnimNodeSequence*                           AnimNodeSeq;                                              // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Trails");
		return ptr;
	}


	void GetNumSteps();
};


// Class Engine.AnimObject
// 0x0024 (0x0060 - 0x003C)
class UAnimObject : public UObject
{
public:
	int                                                DrawWidth;                                                // 0x003C(0x0004) (ExportObject)
	int                                                DrawHeight;                                               // 0x0040(0x0004) (ExportObject)
	int                                                NodePosX;                                                 // 0x0044(0x0004) (ExportObject)
	int                                                NodePosY;                                                 // 0x0048(0x0004) (ExportObject)
	int                                                OutDrawY;                                                 // 0x004C(0x0004) (ExportObject)
	struct FString                                     CategoryDesc;                                             // 0x0050(0x000C) (ExportObject)
	class USkeletalMeshComponent*                      SkelComponent;                                            // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimObject");
		return ptr;
	}

};


// Class Engine.AnimNode
// 0x0080 (0x00E0 - 0x0060)
class UAnimNode : public UAnimObject
{
public:
	unsigned long                                      bRelevant : 1;                                            // 0x0060(0x0004)
	unsigned long                                      bJustBecameRelevant : 1;                                  // 0x0060(0x0004)
	unsigned long                                      bSkipTickWhenZeroWeight : 1;                              // 0x0060(0x0004)
	unsigned long                                      bTickDuringPausedAnims : 1;                               // 0x0060(0x0004)
	int                                                NodeTickTag;                                              // 0x0064(0x0004)
	int                                                NodeCachedAtomsTag;                                       // 0x0068(0x0004)
	float                                              NodeTotalWeight;                                          // 0x006C(0x0004)
	float                                              TotalWeightAccumulator;                                   // 0x0070(0x0004)
	TArray<class UAnimNodeBlendBase*>                  ParentNodes;                                              // 0x0074(0x000C)
	struct FName                                       NodeName;                                                 // 0x0080(0x0008)
	TArray<struct FBoneAtom>                           CachedBoneAtoms;                                          // 0x0088(0x000C)
	unsigned char                                      CachedNumDesiredBones;                                    // 0x0094(0x0001)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0095(0x000B) MISSED OFFSET
	struct FBoneAtom                                   CachedRootMotionDelta;                                    // 0x00A0(0x0020)
	int                                                bCachedHasRootMotion;                                     // 0x00C0(0x0004)
	TArray<struct FCurveKey>                           CachedCurveKeys;                                          // 0x00C4(0x000C)
	int                                                SearchTag;                                                // 0x00D0(0x0004)
	TArray<struct FCurveKey>                           LastUpdatedAnimMorphKeys;                                 // 0x00D4(0x000C) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNode");
		return ptr;
	}


	void ReplayAnim();
	void StopAnim();
	void PlayAnim();
	void FindAnimNode();
	void OnCeaseRelevant();
	void OnBecomeRelevant();
	void OnInit();
};


// Class Engine.AnimNodeBlendBase
// 0x0011 (0x00F1 - 0x00E0)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray<struct FAnimBlendChild>                     Children;                                                 // 0x00E0(0x000C)
	unsigned long                                      bFixNumChildren : 1;                                      // 0x00EC(0x0004)
	TEnumAsByte<EAlphaBlendType>                       BlendType;                                                // 0x00F0(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendBase");
		return ptr;
	}


	void ReplayAnim();
	void StopAnim();
	void PlayAnim();
};


// Class Engine.AnimNode_MultiBlendPerBone
// 0x0014 (0x0105 - 0x00F1)
class UAnimNode_MultiBlendPerBone : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	class APawn*                                       PawnOwner;                                                // 0x00F4(0x0004)
	TArray<struct FPerBoneMaskInfo>                    MaskList;                                                 // 0x00F8(0x000C)
	TEnumAsByte<EBlendType>                            RotationBlendType;                                        // 0x0104(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNode_MultiBlendPerBone");
		return ptr;
	}


	void SetMaskWeight();
};


// Class Engine.AnimNodeAimOffset
// 0x0057 (0x0148 - 0x00F1)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	struct FVector2D                                   Aim;                                                      // 0x00F4(0x0008)
	struct FVector2D                                   AngleOffset;                                              // 0x00FC(0x0008)
	unsigned long                                      bForceAimDir : 1;                                         // 0x0104(0x0004)
	unsigned long                                      bBakeFromAnimations : 1;                                  // 0x0104(0x0004)
	unsigned long                                      bPassThroughWhenNotRendered : 1;                          // 0x0104(0x0004)
	unsigned long                                      bSynchronizeNodesInEditor : 1;                            // 0x0104(0x0004)
	int                                                PassThroughAtOrAboveLOD;                                  // 0x0108(0x0004)
	TEnumAsByte<EAnimAimDir>                           ForcedAimDir;                                             // 0x010C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	TArray<unsigned char>                              RequiredBones;                                            // 0x0110(0x000C)
	TArray<unsigned char>                              AimCpntBoneIndex;                                         // 0x011C(0x000C)
	TArray<unsigned char>                              AimCpntIndexLUT;                                          // 0x0128(0x000C)
	class UAnimNodeAimOffset*                          TemplateNode;                                             // 0x0134(0x0004)
	TArray<struct FAimOffsetProfile>                   Profiles;                                                 // 0x0138(0x000C)
	int                                                CurrentProfileIndex;                                      // 0x0144(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeAimOffset");
		return ptr;
	}


	void SetActiveProfileByIndex();
	void SetActiveProfileByName();
};


// Class Engine.AnimNodeBlend
// 0x0013 (0x0104 - 0x00F1)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              Child2Weight;                                             // 0x00F4(0x0004)
	float                                              Child2WeightTarget;                                       // 0x00F8(0x0004)
	float                                              BlendTimeToGo;                                            // 0x00FC(0x0004)
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                            // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlend");
		return ptr;
	}


	void SetBlendTarget();
};


// Class Engine.AnimNodeAdditiveBlending
// 0x0004 (0x0108 - 0x0104)
class UAnimNodeAdditiveBlending : public UAnimNodeBlend
{
public:
	unsigned long                                      bPassThroughWhenNotRendered : 1;                          // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeAdditiveBlending");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendPerBone
// 0x0028 (0x012C - 0x0104)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                                // 0x0104(0x0004)
	TArray<struct FName>                               BranchStartBoneName;                                      // 0x0108(0x000C)
	TArray<float>                                      Child2PerBoneWeight;                                      // 0x0114(0x000C)
	TArray<unsigned char>                              LocalToCompReqBones;                                      // 0x0120(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendPerBone");
		return ptr;
	}

};


// Class Engine.AnimNodeCrossfader
// 0x0010 (0x0114 - 0x0104)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                                       // 0x0104(0x0008)
	unsigned long                                      bDontBlendOutOneShot : 1;                                 // 0x010C(0x0004)
	float                                              PendingBlendOutTimeOneShot;                               // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeCrossfader");
		return ptr;
	}


	void GetActiveChild();
	void GetAnimName();
	void BlendToLoopingAnim();
	void PlayOneShotAnim();
};


// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x010C - 0x0104)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                                 // 0x0104(0x0004)
	float                                              CustomPendingBlendOutTime;                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodePlayCustomAnim");
		return ptr;
	}


	void SetRootBoneAxisOption();
	void GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification();
	void SetCustomAnim();
	void StopCustomAnim();
	void PlayCustomAnimByDuration();
	void PlayCustomAnim();
};


// Class Engine.AnimNodeBlendDirectional
// 0x001B (0x010C - 0x00F1)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              DirDegreesPerSecond;                                      // 0x00F4(0x0004)
	float                                              DirAngle;                                                 // 0x00F8(0x0004)
	int                                                SingleAnimAtOrAboveLOD;                                   // 0x00FC(0x0004)
	struct FRotator                                    RotationOffset;                                           // 0x0100(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendDirectional");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendList
// 0x0023 (0x0114 - 0x00F1)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TArray<float>                                      TargetWeight;                                             // 0x00F4(0x000C)
	float                                              BlendTimeToGo;                                            // 0x0100(0x0004)
	int                                                ActiveChildIndex;                                         // 0x0104(0x0004)
	unsigned long                                      bPlayActiveChild : 1;                                     // 0x0108(0x0004)
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;            // 0x0108(0x0004)
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                            // 0x0108(0x0004)
	float                                              SliderPosition;                                           // 0x010C(0x0004)
	int                                                EditorActiveChildIndex;                                   // 0x0110(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendList");
		return ptr;
	}


	void SetActiveChild();
};


// Class Engine.AnimNodeBlendByBase
// 0x0018 (0x012C - 0x0114)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	TEnumAsByte<EBaseBlendType>                        Type;                                                     // 0x0114(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	struct FName                                       ActorTag;                                                 // 0x0118(0x0008)
	class UClass*                                      ActorClass;                                               // 0x0120(0x0004)
	float                                              BlendTime;                                                // 0x0124(0x0004)
	class AActor*                                      CachedBase;                                               // 0x0128(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByBase");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByPhysics
// 0x0008 (0x011C - 0x0114)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x0114(0x0004)
	float                                              BlendTimeToWalking;                                       // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByPhysics");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByPosture
// 0x0000 (0x0114 - 0x0114)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByPosture");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByProperty
// 0x0030 (0x0144 - 0x0114)
class UAnimNodeBlendByProperty : public UAnimNodeBlendList
{
public:
	struct FName                                       PropertyName;                                             // 0x0114(0x0008)
	unsigned long                                      bUseOwnersBase : 1;                                       // 0x011C(0x0004)
	unsigned long                                      bUseSpecificBlendTimes : 1;                               // 0x011C(0x0004)
	unsigned long                                      bSynchronizeNodesInEditor : 1;                            // 0x011C(0x0004)
	struct FName                                       CachedPropertyName;                                       // 0x0120(0x0008)
	class UProperty*                                   CachedProperty;                                           // 0x0128(0x0004)
	class AActor*                                      CachedOwner;                                              // 0x012C(0x0004)
	float                                              BlendTime;                                                // 0x0130(0x0004)
	float                                              FloatPropMin;                                             // 0x0134(0x0004)
	float                                              FloatPropMax;                                             // 0x0138(0x0004)
	float                                              BlendToChild1Time;                                        // 0x013C(0x0004)
	float                                              BlendToChild2Time;                                        // 0x0140(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByProperty");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendBySpeed
// 0x0030 (0x0144 - 0x0114)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                                    // 0x0114(0x0004)
	int                                                LastChannel;                                              // 0x0118(0x0004)
	float                                              BlendUpTime;                                              // 0x011C(0x0004)
	float                                              BlendDownTime;                                            // 0x0120(0x0004)
	float                                              BlendDownPerc;                                            // 0x0124(0x0004)
	TArray<float>                                      Constraints;                                              // 0x0128(0x000C)
	unsigned long                                      bUseAcceleration : 1;                                     // 0x0134(0x0004)
	float                                              BlendUpDelay;                                             // 0x0138(0x0004)
	float                                              BlendDownDelay;                                           // 0x013C(0x0004)
	float                                              BlendDelayRemaining;                                      // 0x0140(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendBySpeed");
		return ptr;
	}

};


// Class Engine.AnimNodeRandom
// 0x0014 (0x0128 - 0x0114)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray<struct FRandomAnimInfo>                     RandomInfo;                                               // 0x0114(0x000C)
	class UAnimNodeSequence*                           PlayingSeqNode;                                           // 0x0120(0x0004)
	int                                                PendingChildIndex;                                        // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeRandom");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendMultiBone
// 0x001B (0x010C - 0x00F1)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TArray<struct FChildBoneBlendInfo>                 BlendTargetList;                                          // 0x00F4(0x000C)
	TArray<unsigned char>                              SourceRequiredBones;                                      // 0x0100(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendMultiBone");
		return ptr;
	}


	void SetTargetStartBone();
};


// Class Engine.AnimNodeMirror
// 0x0007 (0x00F8 - 0x00F1)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned long                                      bEnableMirroring : 1;                                     // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeMirror");
		return ptr;
	}

};


// Class Engine.AnimNodeScalePlayRate
// 0x0007 (0x00F8 - 0x00F1)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              ScaleByValue;                                             // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeScalePlayRate");
		return ptr;
	}

};


// Class Engine.AnimNodeScaleRateBySpeed
// 0x0004 (0x00FC - 0x00F8)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                                // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeScaleRateBySpeed");
		return ptr;
	}

};


// Class Engine.AnimNodeSlot
// 0x0027 (0x0118 - 0x00F1)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned long                                      bIsPlayingCustomAnim : 1;                                 // 0x00F4(0x0004)
	unsigned long                                      bEarlyAnimEndNotify : 1;                                  // 0x00F4(0x0004)
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                            // 0x00F4(0x0004)
	unsigned long                                      bAdditiveAnimationsOverrideSource : 1;                    // 0x00F4(0x0004)
	float                                              PendingBlendOutTime;                                      // 0x00F8(0x0004)
	int                                                CustomChildIndex;                                         // 0x00FC(0x0004)
	int                                                TargetChildIndex;                                         // 0x0100(0x0004)
	TArray<float>                                      TargetWeight;                                             // 0x0104(0x000C)
	float                                              BlendTimeToGo;                                            // 0x0110(0x0004)
	class UAnimNodeSynch*                              SynchNode;                                                // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSlot");
		return ptr;
	}


	void AddToSynchGroup();
	void SetRootBoneRotationOption();
	void SetRootBoneAxisOption();
	void GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification();
	void SetCustomAnim();
	void StopCustomAnim();
	void GetPlayedAnimation();
	void PlayCustomAnimByDuration();
	void PlayCustomAnim();
};


// Class Engine.AnimNodeSynch
// 0x000F (0x0100 - 0x00F1)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TArray<struct FSynchGroup>                         Groups;                                                   // 0x00F4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSynch");
		return ptr;
	}


	void SetGroupRateScale();
	void GetRelativePosition();
	void ForceRelativePosition();
	void GetMasterNodeOfGroup();
	void RemoveNodeFromGroup();
	void AddNodeToGroup();
};


// Class Engine.AnimTree
// 0x00EB (0x01DC - 0x00F1)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TArray<struct FAnimGroup>                          AnimGroups;                                               // 0x00F4(0x000C)
	TArray<struct FName>                               PrioritizedSkelBranches;                                  // 0x0100(0x000C)
	TArray<struct FName>                               ComposePrePassBoneNames;                                  // 0x010C(0x000C)
	TArray<struct FName>                               ComposePostPassBoneNames;                                 // 0x0118(0x000C)
	TArray<class UMorphNodeBase*>                      RootMorphNodes;                                           // 0x0124(0x000C)
	TArray<struct FSkelControlListHead>                SkelControlLists;                                         // 0x0130(0x000C)
	TArray<struct FBoneAtom>                           SavedPose;                                                // 0x013C(0x000C)
	unsigned long                                      bUseSavedPose : 1;                                        // 0x0148(0x0004)
	unsigned long                                      bBeingEdited : 1;                                         // 0x0148(0x0004) (ExportObject)
	int                                                MorphConnDrawY;                                           // 0x014C(0x0004) (ExportObject)
	float                                              PreviewPlayRate;                                          // 0x0150(0x0004) (ExportObject)
	class USkeletalMesh*                               PreviewSkelMesh;                                          // 0x0154(0x0004) (ExportObject)
	class USkeletalMesh*                               SocketSkelMesh;                                           // 0x0158(0x0004) (ExportObject)
	class UStaticMesh*                                 SocketStaticMesh;                                         // 0x015C(0x0004) (ExportObject)
	struct FName                                       SocketName;                                               // 0x0160(0x0008) (ExportObject)
	TArray<class UAnimSet*>                            PreviewAnimSets;                                          // 0x0168(0x000C) (ExportObject)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x0174(0x000C) (ExportObject)
	TArray<struct FPreviewSkelMeshStruct>              PreviewMeshList;                                          // 0x0180(0x000C) (ExportObject)
	int                                                PreviewMeshIndex;                                         // 0x018C(0x0004) (ExportObject)
	TArray<struct FPreviewSocketStruct>                PreviewSocketList;                                        // 0x0190(0x000C) (ExportObject)
	int                                                PreviewSocketIndex;                                       // 0x019C(0x0004) (ExportObject)
	TArray<struct FPreviewAnimSetsStruct>              PreviewAnimSetList;                                       // 0x01A0(0x000C) (ExportObject)
	int                                                PreviewAnimSetListIndex;                                  // 0x01AC(0x0004) (ExportObject)
	int                                                PreviewAnimSetIndex;                                      // 0x01B0(0x0004) (ExportObject)
	struct FVector                                     PreviewCamPos;                                            // 0x01B4(0x000C) (ExportObject)
	struct FRotator                                    PreviewCamRot;                                            // 0x01C0(0x000C) (ExportObject)
	struct FVector                                     PreviewFloorPos;                                          // 0x01CC(0x000C) (ExportObject)
	int                                                PreviewFloorYaw;                                          // 0x01D8(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimTree");
		return ptr;
	}


	void GetGroupIndex();
	void GetGroupRateScale();
	void SetGroupRateScale();
	void GetGroupRelativePosition();
	void ForceGroupRelativePosition();
	void GetGroupNotifyMaster();
	void GetGroupSynchMaster();
	void SetAnimGroupForNode();
	void SetUseSavedPose();
	void FindMorphNode();
	void FindSkelControl();
};


// Class Engine.AnimNodeSequence
// 0x0052 (0x0132 - 0x00E0)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                              // 0x00E0(0x0008)
	float                                              Rate;                                                     // 0x00E8(0x0004)
	unsigned long                                      bPlaying : 1;                                             // 0x00EC(0x0004)
	unsigned long                                      bLooping : 1;                                             // 0x00EC(0x0004)
	unsigned long                                      bCauseActorAnimEnd : 1;                                   // 0x00EC(0x0004)
	unsigned long                                      bCauseActorAnimPlay : 1;                                  // 0x00EC(0x0004)
	unsigned long                                      bZeroRootRotation : 1;                                    // 0x00EC(0x0004)
	unsigned long                                      bZeroRootTranslation : 1;                                 // 0x00EC(0x0004)
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;                      // 0x00EC(0x0004)
	unsigned long                                      bNoNotifies : 1;                                          // 0x00EC(0x0004)
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                          // 0x00EC(0x0004)
	unsigned long                                      bIsIssuingNotifies : 1;                                   // 0x00EC(0x0004)
	unsigned long                                      bForceAlwaysSlave : 1;                                    // 0x00EC(0x0004)
	unsigned long                                      bSynchronize : 1;                                         // 0x00EC(0x0004)
	unsigned long                                      bReverseSync : 1;                                         // 0x00EC(0x0004)
	unsigned long                                      bShowTimeLineSlider : 1;                                  // 0x00EC(0x0004)
	unsigned long                                      bLoopCameraAnim : 1;                                      // 0x00EC(0x0004)
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;                    // 0x00EC(0x0004)
	unsigned long                                      bEditorOnlyAddRefPoseToAdditiveAnimation : 1;             // 0x00EC(0x0004)
	float                                              CurrentTime;                                              // 0x00F0(0x0004)
	float                                              PreviousTime;                                             // 0x00F4(0x0004)
	class UAnimSequence*                               AnimSeq;                                                  // 0x00F8(0x0004)
	int                                                AnimLinkupIndex;                                          // 0x00FC(0x0004)
	float                                              NotificationWeightOverride;                               // 0x0100(0x0004)
	float                                              NotifyWeightThreshold;                                    // 0x0104(0x0004)
	struct FName                                       SynchGroupName;                                           // 0x0108(0x0008)
	float                                              SynchPosOffset;                                           // 0x0110(0x0004)
	class UTexture2D*                                  DebugTrack;                                               // 0x0114(0x0004)
	class UTexture2D*                                  DebugCarat;                                               // 0x0118(0x0004)
	class UCameraAnim*                                 CameraAnim;                                               // 0x011C(0x0004)
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                                 // 0x0120(0x0004)
	float                                              CameraAnimScale;                                          // 0x0124(0x0004)
	float                                              CameraAnimPlayRate;                                       // 0x0128(0x0004)
	TEnumAsByte<ERootBoneAxis>                         RootBoneOption[0x3];                                      // 0x012C(0x0001)
	TEnumAsByte<ERootRotationOption>                   RootRotationOption[0x3];                                  // 0x012F(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequence");
		return ptr;
	}


	void GetTimeLeft();
	void GetAnimPlaybackLength();
	void GetGlobalPlayRate();
	void GetGroupRelativePosition();
	void FindGroupPosition();
	void FindGroupRelativePosition();
	void GetNormalizedPosition();
	void SetPosition();
	void ReplayAnim();
	void StopAnim();
	void PlayAnim();
	void SetAnim();
};


// Class Engine.AnimNodeSequenceBlendBase
// 0x000E (0x0140 - 0x0132)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	TArray<struct FAnimBlendInfo>                      Anims;                                                    // 0x0134(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequenceBlendBase");
		return ptr;
	}

};


// Class Engine.AnimNodeSequenceBlendByAim
// 0x0070 (0x01B0 - 0x0140)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                                      // 0x0140(0x0008)
	struct FVector2D                                   PreviousAim;                                              // 0x0148(0x0008)
	struct FVector2D                                   HorizontalRange;                                          // 0x0150(0x0008)
	struct FVector2D                                   VerticalRange;                                            // 0x0158(0x0008)
	struct FVector2D                                   AngleOffset;                                              // 0x0160(0x0008)
	struct FName                                       AnimName_LU;                                              // 0x0168(0x0008)
	struct FName                                       AnimName_LC;                                              // 0x0170(0x0008)
	struct FName                                       AnimName_LD;                                              // 0x0178(0x0008)
	struct FName                                       AnimName_CU;                                              // 0x0180(0x0008)
	struct FName                                       AnimName_CC;                                              // 0x0188(0x0008)
	struct FName                                       AnimName_CD;                                              // 0x0190(0x0008)
	struct FName                                       AnimName_RU;                                              // 0x0198(0x0008)
	struct FName                                       AnimName_RC;                                              // 0x01A0(0x0008)
	struct FName                                       AnimName_RD;                                              // 0x01A8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequenceBlendByAim");
		return ptr;
	}


	void CheckAnimsUpToDate();
};


// Class Engine.MorphNodeBase
// 0x000C (0x006C - 0x0060)
class UMorphNodeBase : public UAnimObject
{
public:
	struct FName                                       NodeName;                                                 // 0x0060(0x0008)
	unsigned long                                      bDrawSlider : 1;                                          // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeBase");
		return ptr;
	}

};


// Class Engine.MorphNodeMultiPose
// 0x0024 (0x0090 - 0x006C)
class UMorphNodeMultiPose : public UMorphNodeBase
{
public:
	TArray<class UMorphTarget*>                        Targets;                                                  // 0x006C(0x000C)
	TArray<struct FName>                               MorphNames;                                               // 0x0078(0x000C)
	TArray<float>                                      Weights;                                                  // 0x0084(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeMultiPose");
		return ptr;
	}


	void UpdateMorphTarget();
	void RemoveMorphTarget();
	void AddMorphTarget();
};


// Class Engine.MorphNodePose
// 0x0010 (0x007C - 0x006C)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                                   // 0x006C(0x0004)
	struct FName                                       MorphName;                                                // 0x0070(0x0008)
	float                                              Weight;                                                   // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodePose");
		return ptr;
	}


	void SetMorphTarget();
};


// Class Engine.MorphNodeWeightBase
// 0x000C (0x0078 - 0x006C)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray<struct FMorphNodeConn>                      NodeConns;                                                // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeightBase");
		return ptr;
	}

};


// Class Engine.MorphNodeWeight
// 0x0004 (0x007C - 0x0078)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                               // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeight");
		return ptr;
	}


	void SetNodeWeight();
};


// Class Engine.MorphNodeWeightByBoneAngle
// 0x003C (0x00B4 - 0x0078)
class UMorphNodeWeightByBoneAngle : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                                    // 0x0078(0x0004)
	float                                              NodeWeight;                                               // 0x007C(0x0004)
	struct FName                                       BaseBoneName;                                             // 0x0080(0x0008)
	TEnumAsByte<EAxis>                                 BaseBoneAxis;                                             // 0x0088(0x0001)
	TEnumAsByte<EAxis>                                 AngleBoneAxis;                                            // 0x0089(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x008A(0x0002) MISSED OFFSET
	unsigned long                                      bInvertBaseBoneAxis : 1;                                  // 0x008C(0x0004)
	unsigned long                                      bInvertAngleBoneAxis : 1;                                 // 0x008C(0x0004)
	unsigned long                                      bControlMaterialParameter : 1;                            // 0x008C(0x0004)
	struct FName                                       AngleBoneName;                                            // 0x0090(0x0008)
	int                                                MaterialSlotId;                                           // 0x0098(0x0004)
	struct FName                                       ScalarParameterName;                                      // 0x009C(0x0008)
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                                 // 0x00A4(0x0004)
	TArray<struct FBoneAngleMorph>                     WeightArray;                                              // 0x00A8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeightByBoneAngle");
		return ptr;
	}

};


// Class Engine.MorphNodeWeightByBoneRotation
// 0x0034 (0x00AC - 0x0078)
class UMorphNodeWeightByBoneRotation : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                                    // 0x0078(0x0004)
	float                                              NodeWeight;                                               // 0x007C(0x0004)
	struct FName                                       BoneName;                                                 // 0x0080(0x0008)
	TEnumAsByte<EAxis>                                 BoneAxis;                                                 // 0x0088(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned long                                      bInvertBoneAxis : 1;                                      // 0x008C(0x0004)
	unsigned long                                      bControlMaterialParameter : 1;                            // 0x008C(0x0004)
	TArray<struct FBoneAngleMorph>                     WeightArray;                                              // 0x0090(0x000C)
	int                                                MaterialSlotId;                                           // 0x009C(0x0004)
	struct FName                                       ScalarParameterName;                                      // 0x00A0(0x0008)
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                                 // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeightByBoneRotation");
		return ptr;
	}

};


// Class Engine.SkelControlBase
// 0x0064 (0x00C4 - 0x0060)
class USkelControlBase : public UAnimObject
{
public:
	struct FName                                       ControlName;                                              // 0x0060(0x0008)
	float                                              ControlStrength;                                          // 0x0068(0x0004)
	float                                              BlendInTime;                                              // 0x006C(0x0004)
	float                                              BlendOutTime;                                             // 0x0070(0x0004)
	TEnumAsByte<EAlphaBlendType>                       BlendType;                                                // 0x0074(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	unsigned long                                      bPostPhysicsController : 1;                               // 0x0078(0x0004)
	unsigned long                                      bSetStrengthFromAnimNode : 1;                             // 0x0078(0x0004)
	unsigned long                                      bInitializedCachedNodeList : 1;                           // 0x0078(0x0004)
	unsigned long                                      bControlledByAnimMetada : 1;                              // 0x0078(0x0004)
	unsigned long                                      bPropagateSetActive : 1;                                  // 0x0078(0x0004)
	unsigned long                                      bIgnoreWhenNotRendered : 1;                               // 0x0078(0x0004)
	unsigned long                                      bShouldTickInScript : 1;                                  // 0x0078(0x0004)
	unsigned long                                      bEnableEaseInOut : 1;                                     // 0x0078(0x0004)
	float                                              StrengthTarget;                                           // 0x007C(0x0004)
	float                                              BlendTimeToGo;                                            // 0x0080(0x0004)
	TArray<struct FName>                               StrengthAnimNodeNameList;                                 // 0x0084(0x000C)
	TArray<class UAnimNode*>                           CachedNodeList;                                           // 0x0090(0x000C)
	float                                              AnimMetadataWeight;                                       // 0x009C(0x0004)
	TArray<class UAnimNodeSequence*>                   AnimMetadataCachedAnimNodeSeqList;                        // 0x00A0(0x000C)
	float                                              BoneScale;                                                // 0x00AC(0x0004)
	int                                                ControlTickTag;                                           // 0x00B0(0x0004)
	int                                                IgnoreAtOrAboveLOD;                                       // 0x00B4(0x0004)
	class USkelControlBase*                            NextControl;                                              // 0x00B8(0x0004)
	int                                                ControlPosX;                                              // 0x00BC(0x0004)
	int                                                ControlPosY;                                              // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlBase");
		return ptr;
	}


	void TickSkelControl();
	void SetSkelControlStrength();
	void SetSkelControlActive();
};


// Class Engine.SkelControl_CCD_IK
// 0x0048 (0x010C - 0x00C4)
class USkelControl_CCD_IK : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                         // 0x00C4(0x000C)
	TEnumAsByte<EBoneControlSpace>                     EffectorLocationSpace;                                    // 0x00D0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	struct FName                                       EffectorSpaceBoneName;                                    // 0x00D4(0x0008)
	struct FVector                                     EffectorTranslationFromBone;                              // 0x00DC(0x000C)
	int                                                NumBones;                                                 // 0x00E8(0x0004)
	int                                                MaxPerBoneIterations;                                     // 0x00EC(0x0004)
	int                                                IterationsCount;                                          // 0x00F0(0x0004)
	float                                              Precision;                                                // 0x00F4(0x0004)
	unsigned long                                      bStartFromTail : 1;                                       // 0x00F8(0x0004)
	unsigned long                                      bNoTurnOptimization : 1;                                  // 0x00F8(0x0004)
	TArray<float>                                      AngleConstraint;                                          // 0x00FC(0x000C)
	float                                              MaxAngleSteps;                                            // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControl_CCD_IK");
		return ptr;
	}

};


// Class Engine.SkelControl_TwistBone
// 0x000C (0x00D0 - 0x00C4)
class USkelControl_TwistBone : public USkelControlBase
{
public:
	struct FName                                       SourceBoneName;                                           // 0x00C4(0x0008)
	float                                              TwistAngleScale;                                          // 0x00CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControl_TwistBone");
		return ptr;
	}

};


// Class Engine.SkelControlLimb
// 0x0040 (0x0104 - 0x00C4)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                         // 0x00C4(0x000C)
	TEnumAsByte<EBoneControlSpace>                     EffectorLocationSpace;                                    // 0x00D0(0x0001)
	TEnumAsByte<EBoneControlSpace>                     JointTargetLocationSpace;                                 // 0x00D1(0x0001)
	TEnumAsByte<EAxis>                                 BoneAxis;                                                 // 0x00D2(0x0001)
	TEnumAsByte<EAxis>                                 JointAxis;                                                // 0x00D3(0x0001)
	struct FName                                       EffectorSpaceBoneName;                                    // 0x00D4(0x0008)
	struct FVector                                     JointTargetLocation;                                      // 0x00DC(0x000C)
	struct FName                                       JointTargetSpaceBoneName;                                 // 0x00E8(0x0008)
	unsigned long                                      bInvertBoneAxis : 1;                                      // 0x00F0(0x0004)
	unsigned long                                      bInvertJointAxis : 1;                                     // 0x00F0(0x0004)
	unsigned long                                      bMaintainEffectorRelRot : 1;                              // 0x00F0(0x0004)
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;                       // 0x00F0(0x0004)
	unsigned long                                      bAllowStretching : 1;                                     // 0x00F0(0x0004)
	struct FVector2D                                   StretchLimits;                                            // 0x00F4(0x0008)
	struct FName                                       StretchRollBoneName;                                      // 0x00FC(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlLimb");
		return ptr;
	}

};


// Class Engine.SkelControlFootPlacement
// 0x0024 (0x0128 - 0x0104)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                               // 0x0104(0x0004)
	TEnumAsByte<EAxis>                                 FootUpAxis;                                               // 0x0108(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	struct FRotator                                    FootRotOffset;                                            // 0x010C(0x000C)
	unsigned long                                      bInvertFootUpAxis : 1;                                    // 0x0118(0x0004)
	unsigned long                                      bOrientFootToGround : 1;                                  // 0x0118(0x0004)
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                           // 0x0118(0x0004)
	float                                              MaxUpAdjustment;                                          // 0x011C(0x0004)
	float                                              MaxDownAdjustment;                                        // 0x0120(0x0004)
	float                                              MaxFootOrientAdjust;                                      // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlFootPlacement");
		return ptr;
	}

};


// Class Engine.SkelControlLookAt
// 0x0074 (0x0138 - 0x00C4)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                           // 0x00C4(0x000C)
	TEnumAsByte<EBoneControlSpace>                     TargetLocationSpace;                                      // 0x00D0(0x0001)
	TEnumAsByte<EAxis>                                 LookAtAxis;                                               // 0x00D1(0x0001)
	TEnumAsByte<EAxis>                                 UpAxis;                                                   // 0x00D2(0x0001)
	TEnumAsByte<EBoneControlSpace>                     AllowRotationSpace;                                       // 0x00D3(0x0001)
	struct FName                                       TargetSpaceBoneName;                                      // 0x00D4(0x0008)
	unsigned long                                      bInvertLookAtAxis : 1;                                    // 0x00DC(0x0004)
	unsigned long                                      bDefineUpAxis : 1;                                        // 0x00DC(0x0004)
	unsigned long                                      bInvertUpAxis : 1;                                        // 0x00DC(0x0004)
	unsigned long                                      bEnableLimit : 1;                                         // 0x00DC(0x0004)
	unsigned long                                      bLimitBasedOnRefPose : 1;                                 // 0x00DC(0x0004)
	unsigned long                                      bDisableBeyondLimit : 1;                                  // 0x00DC(0x0004)
	unsigned long                                      bNotifyBeyondLimit : 1;                                   // 0x00DC(0x0004)
	unsigned long                                      bShowLimit : 1;                                           // 0x00DC(0x0004)
	unsigned long                                      bAllowRotationX : 1;                                      // 0x00DC(0x0004)
	unsigned long                                      bAllowRotationY : 1;                                      // 0x00DC(0x0004)
	unsigned long                                      bAllowRotationZ : 1;                                      // 0x00DC(0x0004)
	float                                              TargetLocationInterpSpeed;                                // 0x00E0(0x0004)
	struct FVector                                     DesiredTargetLocation;                                    // 0x00E4(0x000C)
	float                                              MaxAngle;                                                 // 0x00F0(0x0004)
	float                                              OuterMaxAngle;                                            // 0x00F4(0x0004)
	float                                              DeadZoneAngle;                                            // 0x00F8(0x0004)
	struct FName                                       AllowRotationOtherBoneName;                               // 0x00FC(0x0008)
	float                                              LookAtAlpha;                                              // 0x0104(0x0004)
	float                                              LookAtAlphaTarget;                                        // 0x0108(0x0004)
	float                                              LookAtAlphaBlendTimeToGo;                                 // 0x010C(0x0004)
	struct FVector                                     LimitLookDir;                                             // 0x0110(0x000C)
	struct FVector                                     BaseLookDir;                                              // 0x011C(0x000C)
	struct FVector                                     BaseBonePos;                                              // 0x0128(0x000C)
	float                                              LastCalcTime;                                             // 0x0134(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlLookAt");
		return ptr;
	}


	void CanLookAtPoint();
	void SetLookAtAlpha();
	void InterpolateTargetLocation();
	void SetTargetLocation();
};


// Class Engine.SkelControlSingleBone
// 0x0030 (0x00F4 - 0x00C4)
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                                    // 0x00C4(0x0004)
	unsigned long                                      bApplyRotation : 1;                                       // 0x00C4(0x0004)
	unsigned long                                      bAddTranslation : 1;                                      // 0x00C4(0x0004)
	unsigned long                                      bAddRotation : 1;                                         // 0x00C4(0x0004)
	unsigned long                                      bRemoveMeshRotation : 1;                                  // 0x00C4(0x0004)
	struct FVector                                     BoneTranslation;                                          // 0x00C8(0x000C)
	TEnumAsByte<EBoneControlSpace>                     BoneTranslationSpace;                                     // 0x00D4(0x0001)
	TEnumAsByte<EBoneControlSpace>                     BoneRotationSpace;                                        // 0x00D5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00D6(0x0002) MISSED OFFSET
	struct FName                                       TranslationSpaceBoneName;                                 // 0x00D8(0x0008)
	struct FRotator                                    BoneRotation;                                             // 0x00E0(0x000C)
	struct FName                                       RotationSpaceBoneName;                                    // 0x00EC(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlSingleBone");
		return ptr;
	}

};


// Class Engine.SkelControlHandlebars
// 0x0014 (0x0108 - 0x00F4)
class USkelControlHandlebars : public USkelControlSingleBone
{
public:
	TEnumAsByte<EAxis>                                 WheelRollAxis;                                            // 0x00F4(0x0001)
	TEnumAsByte<EAxis>                                 HandlebarRotateAxis;                                      // 0x00F5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00F6(0x0002) MISSED OFFSET
	struct FName                                       WheelBoneName;                                            // 0x00F8(0x0008)
	unsigned long                                      bInvertRotation : 1;                                      // 0x0100(0x0004)
	int                                                SteerWheelBoneIndex;                                      // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlHandlebars");
		return ptr;
	}

};


// Class Engine.SkelControlWheel
// 0x0018 (0x010C - 0x00F4)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                        // 0x00F4(0x0004)
	float                                              WheelMaxRenderDisplacement;                               // 0x00F8(0x0004)
	float                                              WheelRoll;                                                // 0x00FC(0x0004)
	TEnumAsByte<EAxis>                                 WheelRollAxis;                                            // 0x0100(0x0001)
	TEnumAsByte<EAxis>                                 WheelSteeringAxis;                                        // 0x0101(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0102(0x0002) MISSED OFFSET
	float                                              WheelSteering;                                            // 0x0104(0x0004)
	unsigned long                                      bInvertWheelRoll : 1;                                     // 0x0108(0x0004)
	unsigned long                                      bInvertWheelSteering : 1;                                 // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlWheel");
		return ptr;
	}

};


// Class Engine.SkelControlSpline
// 0x0014 (0x00D8 - 0x00C4)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                             // 0x00C4(0x0004)
	TEnumAsByte<EAxis>                                 SplineBoneAxis;                                           // 0x00C8(0x0001)
	TEnumAsByte<ESplineControlRotMode>                 BoneRotMode;                                              // 0x00C9(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00CA(0x0002) MISSED OFFSET
	unsigned long                                      bInvertSplineBoneAxis : 1;                                // 0x00CC(0x0004)
	float                                              EndSplineTension;                                         // 0x00D0(0x0004)
	float                                              StartSplineTension;                                       // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlSpline");
		return ptr;
	}

};


// Class Engine.SkelControlTrail
// 0x007C (0x0140 - 0x00C4)
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                              // 0x00C4(0x0004)
	TEnumAsByte<EAxis>                                 ChainBoneAxis;                                            // 0x00C8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	unsigned long                                      bInvertChainBoneAxis : 1;                                 // 0x00CC(0x0004)
	unsigned long                                      bLimitStretch : 1;                                        // 0x00CC(0x0004)
	unsigned long                                      bActorSpaceFakeVel : 1;                                   // 0x00CC(0x0004)
	unsigned long                                      bHadValidStrength : 1;                                    // 0x00CC(0x0004)
	float                                              TrailRelaxation;                                          // 0x00D0(0x0004)
	float                                              StretchLimit;                                             // 0x00D4(0x0004)
	struct FVector                                     FakeVelocity;                                             // 0x00D8(0x000C)
	float                                              ThisTimstep;                                              // 0x00E4(0x0004)
	TArray<struct FVector>                             TrailBoneLocations;                                       // 0x00E8(0x000C)
	unsigned char                                      UnknownData01[0xC];                                       // 0x00F4(0x000C) MISSED OFFSET
	struct FMatrix                                     OldLocalToWorld;                                          // 0x0100(0x0040)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlTrail");
		return ptr;
	}

};


// Class Engine.AnimSet
// 0x0048 (0x0084 - 0x003C)
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                                    // 0x003C(0x0004)
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0040(0x000C)
	TArray<class UAnimSequence*>                       Sequences;                                                // 0x004C(0x000C)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                              // 0x0058(0x000C)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x0064(0x000C)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                            // 0x0070(0x000C)
	struct FName                                       PreviewSkelMeshName;                                      // 0x007C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x001C (0x0058 - 0x003C)
class UMorphTarget : public UObject
{
public:
	TArray<int>                                        MorphLODModels;                                           // 0x003C(0x000C)
	int                                                MaterialSlotId;                                           // 0x0048(0x0004)
	struct FName                                       ScalarParameterName;                                      // 0x004C(0x0008)
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                                 // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}

};


// Class Engine.MorphTargetSet
// 0x001C (0x0058 - 0x003C)
class UMorphTargetSet : public UObject
{
public:
	TArray<class UMorphTarget*>                        Targets;                                                  // 0x003C(0x000C)
	class USkeletalMesh*                               BaseSkelMesh;                                             // 0x0048(0x0004)
	struct FArray_Mirror                               RawWedgePointIndices;                                     // 0x004C(0x000C) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTargetSet");
		return ptr;
	}


	void FindMorphTarget();
};


// Class Engine.MorphWeightSequence
// 0x0000 (0x003C - 0x003C)
class UMorphWeightSequence : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphWeightSequence");
		return ptr;
	}

};


// Class Engine.DecalActorBase
// 0x0004 (0x0220 - 0x021C)
class ADecalActorBase : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                    // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActorBase");
		return ptr;
	}

};


// Class Engine.DecalActor
// 0x0000 (0x0220 - 0x0220)
class ADecalActor : public ADecalActorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}

};


// Class Engine.DecalActorMovable
// 0x0000 (0x0220 - 0x0220)
class ADecalActorMovable : public ADecalActorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActorMovable");
		return ptr;
	}

};


// Class Engine.DecalManager
// 0x0030 (0x024C - 0x021C)
class ADecalManager : public AActor
{
public:
	class UDecalComponent*                             DecalTemplate;                                            // 0x021C(0x0004)
	TArray<class UDecalComponent*>                     PoolDecals;                                               // 0x0220(0x000C)
	int                                                MaxActiveDecals;                                          // 0x022C(0x0004)
	float                                              DecalLifeSpan;                                            // 0x0230(0x0004)
	float                                              DecalDepthBias;                                           // 0x0234(0x0004)
	struct FVector2D                                   DecalBlendRange;                                          // 0x0238(0x0008)
	TArray<struct FActiveDecalInfo>                    ActiveDecals;                                             // 0x0240(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalManager");
		return ptr;
	}


	void SpawnDecal();
	void GetPooledComponent();
	void STATIC_SetDecalParameters();
	void CanSpawnDecals();
	void DecalFinished();
	void STATIC_AreDynamicDecalsEnabled();
};


// Class Engine.DecalComponent
// 0x0128 (0x02EC - 0x01C4)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x01C4(0x0004)
	float                                              Width;                                                    // 0x01C8(0x0004)
	float                                              Height;                                                   // 0x01CC(0x0004)
	float                                              TileX;                                                    // 0x01D0(0x0004)
	float                                              TileY;                                                    // 0x01D4(0x0004)
	float                                              OffsetX;                                                  // 0x01D8(0x0004)
	float                                              OffsetY;                                                  // 0x01DC(0x0004)
	float                                              DecalRotation;                                            // 0x01E0(0x0004)
	float                                              FieldOfView;                                              // 0x01E4(0x0004)
	float                                              NearPlane;                                                // 0x01E8(0x0004)
	float                                              FarPlane;                                                 // 0x01EC(0x0004)
	struct FVector                                     Location;                                                 // 0x01F0(0x000C)
	struct FRotator                                    Orientation;                                              // 0x01FC(0x000C)
	struct FVector                                     HitLocation;                                              // 0x0208(0x000C)
	struct FVector                                     HitNormal;                                                // 0x0214(0x000C)
	struct FVector                                     HitTangent;                                               // 0x0220(0x000C)
	struct FVector                                     HitBinormal;                                              // 0x022C(0x000C)
	unsigned long                                      bNoClip : 1;                                              // 0x0238(0x0004)
	unsigned long                                      bStaticDecal : 1;                                         // 0x0238(0x0004)
	unsigned long                                      bProjectOnBackfaces : 1;                                  // 0x0238(0x0004)
	unsigned long                                      bProjectOnHidden : 1;                                     // 0x0238(0x0004)
	unsigned long                                      bProjectOnBSP : 1;                                        // 0x0238(0x0004)
	unsigned long                                      bProjectOnStaticMeshes : 1;                               // 0x0238(0x0004)
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                             // 0x0238(0x0004)
	unsigned long                                      bProjectOnTerrain : 1;                                    // 0x0238(0x0004)
	unsigned long                                      bFlipBackfaceDirection : 1;                               // 0x0238(0x0004)
	unsigned long                                      bMovableDecal : 1;                                        // 0x0238(0x0004)
	unsigned long                                      bHasBeenAttached : 1;                                     // 0x0238(0x0004)
	class UPrimitiveComponent*                         HitComponent;                                             // 0x023C(0x0004)
	struct FName                                       HitBone;                                                  // 0x0240(0x0008)
	int                                                HitNodeIndex;                                             // 0x0248(0x0004)
	int                                                HitLevelIndex;                                            // 0x024C(0x0004)
	int                                                FracturedStaticMeshComponentIndex;                        // 0x0250(0x0004)
	TArray<int>                                        HitNodeIndices;                                           // 0x0254(0x000C)
	TArray<struct FDecalReceiver>                      DecalReceivers;                                           // 0x0260(0x000C)
	TArray<struct FPointer>                            StaticReceivers;                                          // 0x026C(0x000C)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x0278(0x0004)
	TArray<struct FPlane>                              Planes;                                                   // 0x027C(0x000C)
	float                                              DepthBias;                                                // 0x0288(0x0004)
	float                                              SlopeScaleDepthBias;                                      // 0x028C(0x0004)
	int                                                SortOrder;                                                // 0x0290(0x0004)
	float                                              BackfaceAngle;                                            // 0x0294(0x0004)
	struct FVector2D                                   BlendRange;                                               // 0x0298(0x0008)
	TEnumAsByte<EDecalTransform>                       DecalTransform;                                           // 0x02A0(0x0001)
	TEnumAsByte<EFilterMode>                           FilterMode;                                               // 0x02A1(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02A2(0x0002) MISSED OFFSET
	TArray<class AActor*>                              Filter;                                                   // 0x02A4(0x000C)
	TArray<class UPrimitiveComponent*>                 ReceiverImages;                                           // 0x02B0(0x000C)
	struct FVector                                     ParentRelativeLocation;                                   // 0x02BC(0x000C)
	struct FRotator                                    ParentRelativeOrientation;                                // 0x02C8(0x000C)
	struct FVector                                     OriginalParentRelativeLocation;                           // 0x02D4(0x000C)
	struct FVector                                     OriginalParentRelativeOrientationVec;                     // 0x02E0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}


	void GetDecalMaterial();
	void SetDecalMaterial();
	void ResetToDefaults();
};


// Class Engine.ActorFactoryDecal
// 0x0004 (0x0060 - 0x005C)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDecal");
		return ptr;
	}

};


// Class Engine.DecalMaterial
// 0x0000 (0x0388 - 0x0388)
class UDecalMaterial : public UMaterial
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalMaterial");
		return ptr;
	}

};


// Class Engine.FogVolumeDensityInfo
// 0x000C (0x0228 - 0x021C)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                         // 0x021C(0x0004)
	class UStaticMeshComponent*                        AutomaticMeshComponent;                                   // 0x0220(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0224(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeDensityInfo");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
	void OnToggle();
	void ReplicatedEvent();
	void PostBeginPlay();
};


// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x0228 - 0x0228)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConeDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x0228 - 0x0228)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConstantDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0228 - 0x0228)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x0228 - 0x0228)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeSphericalDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeDensityComponent
// 0x003C (0x009C - 0x0060)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          FogMaterial;                                              // 0x0060(0x0004)
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                                 // 0x0064(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0068(0x0004)
	unsigned long                                      bAffectsTranslucency : 1;                                 // 0x0068(0x0004)
	struct FLinearColor                                SimpleLightColor;                                         // 0x006C(0x0010) (Const)
	struct FLinearColor                                ApproxFogLightColor;                                      // 0x007C(0x0010) (Const)
	float                                              StartDistance;                                            // 0x008C(0x0004) (Const)
	TArray<class AActor*>                              FogVolumeActors;                                          // 0x0090(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeDensityComponent");
		return ptr;
	}


	void SetEnabled();
};


// Class Engine.FogVolumeConeDensityComponent
// 0x0028 (0x00C4 - 0x009C)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                               // 0x009C(0x0004) (Const)
	struct FVector                                     ConeVertex;                                               // 0x00A0(0x000C) (Const)
	float                                              ConeRadius;                                               // 0x00AC(0x0004) (Const)
	struct FVector                                     ConeAxis;                                                 // 0x00B0(0x000C) (Const)
	float                                              ConeMaxAngle;                                             // 0x00BC(0x0004) (Const)
	class UDrawLightConeComponent*                     PreviewCone;                                              // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConeDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x00A0 - 0x009C)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                                  // 0x009C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConstantDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0014 (0x00B0 - 0x009C)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                                      // 0x009C(0x0004) (Const)
	struct FPlane                                      HalfspacePlane;                                           // 0x00A0(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeSphericalDensityComponent
// 0x0018 (0x00B4 - 0x009C)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                               // 0x009C(0x0004) (Const)
	struct FVector                                     SphereCenter;                                             // 0x00A0(0x000C)
	float                                              SphereRadius;                                             // 0x00AC(0x0004)
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                                      // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeSphericalDensityComponent");
		return ptr;
	}

};


// Class Engine.ActorFactoryFogVolumeConstantDensityInfo
// 0x0008 (0x0064 - 0x005C)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                         // 0x005C(0x0004)
	unsigned long                                      bNothingSelected : 1;                                     // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFogVolumeConstantDensityInfo");
		return ptr;
	}

};


// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo");
		return ptr;
	}

};


// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo
// 0x0000 (0x0064 - 0x0064)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFogVolumeSphericalDensityInfo");
		return ptr;
	}

};


// Class Engine.FracturedStaticMeshActor
// 0x0068 (0x0284 - 0x021C)
class AFracturedStaticMeshActor : public AActor
{
public:
	int                                                MaxPartsToSpawnAtOnce;                                    // 0x021C(0x0004)
	class UFracturedStaticMeshComponent*               FracturedStaticMeshComponent;                             // 0x0220(0x0004)
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                         // 0x0224(0x0004)
	TArray<int>                                        ChunkHealth;                                              // 0x0228(0x000C)
	unsigned long                                      bHasShownMissingSoundWarning : 1;                         // 0x0234(0x0004)
	unsigned long                                      bBreakChunksOnActorTouch : 1;                             // 0x0234(0x0004)
	TArray<class UClass*>                              FracturedByDamageType;                                    // 0x0238(0x000C)
	float                                              ChunkHealthScale;                                         // 0x0244(0x0004)
	TArray<class UParticleSystem*>                     OverrideFragmentDestroyEffects;                           // 0x0248(0x000C)
	float                                              FractureCullMinDistance;                                  // 0x0254(0x0004)
	float                                              FractureCullMaxDistance;                                  // 0x0258(0x0004)
	TArray<struct FDeferredPartToSpawn>                DeferredPartsToSpawn;                                     // 0x025C(0x000C)
	struct FPhysEffectInfo                             PartImpactEffect;                                         // 0x0268(0x0010)
	class USoundCue*                                   ExplosionFractureSound;                                   // 0x0278(0x0004)
	class USoundCue*                                   SingleChunkFractureSound;                                 // 0x027C(0x0004)
	class UMaterialInterface*                          MI_LoseChunkPreviousMaterial;                             // 0x0280(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshActor");
		return ptr;
	}


	void SetLoseChunkReplacementMaterial();
	void HideFragmentsToMaximizeMemoryUsage();
	void HideOneFragment();
	void ResetVisibility();
	void BreakOffPartsInRadius();
	void Explode();
	void TakeDamage();
	void RemoveDecals();
	void FractureEffectIsRelevant();
	void IsFracturedByDamageType();
	void SpawnDeferredParts();
	void BreakOffIsolatedIslands();
	void ResetHealth();
	void PostBeginPlay();
	void SpawnPartMulti();
	void SpawnPart();
};


// Class Engine.FracturedStaticMeshPart
// 0x0034 (0x02B8 - 0x0284)
class AFracturedStaticMeshPart : public AFracturedStaticMeshActor
{
public:
	float                                              DestroyPartRadiusFactor;                                  // 0x0284(0x0004)
	class AFracturedStaticMeshActor*                   BaseFracturedMeshActor;                                   // 0x0288(0x0004)
	unsigned long                                      bHasBeenRecycled : 1;                                     // 0x028C(0x0004)
	unsigned long                                      bChangeRBChannelWhenAsleep : 1;                           // 0x028C(0x0004)
	unsigned long                                      bCompositeThatExplodesOnImpact : 1;                       // 0x028C(0x0004)
	float                                              LastSpawnTime;                                            // 0x0290(0x0004)
	int                                                PartPoolIndex;                                            // 0x0294(0x0004)
	float                                              FracPartGravScale;                                        // 0x0298(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   AsleepRBChannel;                                          // 0x029C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x029D(0x0003) MISSED OFFSET
	struct FVector                                     OldVelocity;                                              // 0x02A0(0x000C)
	float                                              CurrentVibrationLevel;                                    // 0x02AC(0x0004)
	float                                              LastImpactSoundTime;                                      // 0x02B0(0x0004)
	float                                              RelativeScale;                                            // 0x02B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshPart");
		return ptr;
	}


	void BreakOffPartsInRadius();
	void Explode();
	void FellOutOfWorld();
	void TryToCleanUp();
	void TakeDamage();
	void RecyclePart();
	void Initialize();
};


// Class Engine.PhysXDestructible
// 0x004C (0x0088 - 0x003C)
class UPhysXDestructible : public UObject
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                                      // 0x003C(0x0004)
	TArray<class UPhysXDestructibleAsset*>             DestructibleAssets;                                       // 0x0040(0x000C)
	struct FPhysXDestructibleParameters                DestructibleParameters;                                   // 0x004C(0x0030)
	TArray<struct FVector>                             CookingScales;                                            // 0x007C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXDestructible");
		return ptr;
	}

};


// Class Engine.PhysXDestructibleActor
// 0x0085 (0x0309 - 0x0284)
class APhysXDestructibleActor : public AFracturedStaticMeshActor
{
public:
	class UPhysXDestructibleComponent*                 DestructibleComponent;                                    // 0x0284(0x0004)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0288(0x0004)
	class UPhysXDestructible*                          PhysXDestructible;                                        // 0x028C(0x0004)
	class UPhysXDestructibleStructure*                 Structure;                                                // 0x0290(0x0004)
	TArray<int>                                        PartFirstChunkIndices;                                    // 0x0294(0x000C)
	TArray<class APhysXDestructiblePart*>              Parts;                                                    // 0x02A0(0x000C)
	TArray<int>                                        Neighbors;                                                // 0x02AC(0x000C)
	struct FPhysXDestructibleParameters                DestructibleParameters;                                   // 0x02B8(0x0030)
	float                                              LinearSize;                                               // 0x02E8(0x0004)
	unsigned long                                      bPlayFractureSound : 1;                                   // 0x02EC(0x0004)
	unsigned long                                      bSupportChunksTouchWorld : 1;                             // 0x02EC(0x0004)
	unsigned long                                      bSupportChunksInSupportFragment : 1;                      // 0x02EC(0x0004)
	TArray<struct FSpawnBasis>                         EffectBases;                                              // 0x02F0(0x000C)
	struct FPointer                                    VolumeFill;                                               // 0x02FC(0x0004)
	int                                                PerFrameProcessBudget;                                    // 0x0300(0x0004)
	int                                                SupportDepth;                                             // 0x0304(0x0004)
	unsigned char                                      NumPartsRemaining;                                        // 0x0308(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXDestructibleActor");
		return ptr;
	}


	void Explode();
	void TakeRadiusDamage();
	void TakeDamage();
	void NativeTakeDamage();
	void NativeSpawnEffects();
	void Destroyed();
	void PostBeginPlay();
	void SpawnEffects();
	void Term();
	void Init();
};


// Class Engine.FractureManager
// 0x0038 (0x0254 - 0x021C)
class AFractureManager : public AActor
{
public:
	int                                                FSMPartPoolSize;                                          // 0x021C(0x0004)
	unsigned long                                      bEnableAntiVibration : 1;                                 // 0x0220(0x0004)
	unsigned long                                      bEnableSpawnChunkEffectForRadialDamage : 1;               // 0x0220(0x0004)
	float                                              DestroyVibrationLevel;                                    // 0x0224(0x0004)
	float                                              DestroyMinAngVel;                                         // 0x0228(0x0004)
	float                                              ExplosionVelScale;                                        // 0x022C(0x0004)
	TArray<class AFracturedStaticMeshPart*>            PartPool;                                                 // 0x0230(0x000C)
	TArray<int>                                        FreeParts;                                                // 0x023C(0x000C)
	TArray<class AFracturedStaticMeshActor*>           ActorsWithDeferredPartsToSpawn;                           // 0x0248(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FractureManager");
		return ptr;
	}


	void Tick();
	void SpawnDeferredParts();
	void ReturnPartActor();
	void SpawnPartActor();
	void GetFSMPart();
	void ResetPoolVisibility();
	void CreateFSMParts();
	void CleanUpFSMParts();
	void Destroyed();
	void PreBeginPlay();
	void GetFSMFractureCullDistanceScale();
	void GetFSMRadialSpawnChanceScale();
	void GetFSMDirectSpawnChanceScale();
	void GetNumFSMPartsScale();
	void SpawnChunkDestroyEffect();
};


// Class Engine.PhysXDestructiblePart
// 0x0031 (0x024D - 0x021C)
class APhysXDestructiblePart : public AActor
{
public:
	int                                                FirstChunk;                                               // 0x021C(0x0004)
	int                                                NumChunks;                                                // 0x0220(0x0004)
	class UPhysXDestructibleStructure*                 Structure;                                                // 0x0224(0x0004)
	class APhysXDestructibleActor*                     DestructibleActor;                                        // 0x0228(0x0004)
	class UPhysXDestructibleAsset*                     DestructibleAsset;                                        // 0x022C(0x0004)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0230(0x0004)
	TArray<class USkeletalMeshComponent*>              SkeletalMeshComponents;                                   // 0x0234(0x000C)
	TArray<unsigned char>                              NumChunksRemaining;                                       // 0x0240(0x000C)
	unsigned char                                      NumMeshesRemaining;                                       // 0x024C(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXDestructiblePart");
		return ptr;
	}


	void TakeRadiusDamage();
	void TakeDamage();
};


// Class Engine.FracturedBaseComponent
// 0x0024 (0x0254 - 0x0230)
class UFracturedBaseComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                                   // 0x0230(0x0004)
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                                    // 0x0234(0x0004)
	TArray<unsigned char>                              VisibleFragments;                                         // 0x0238(0x000C)
	unsigned long                                      bVisibilityHasChanged : 1;                                // 0x0244(0x0004)
	unsigned long                                      bVisibilityReset : 1;                                     // 0x0244(0x0004)
	unsigned long                                      bInitialVisibilityValue : 1;                              // 0x0244(0x0004)
	unsigned long                                      bUseDynamicIndexBuffer : 1;                               // 0x0244(0x0004)
	unsigned long                                      bUseDynamicIBWithHiddenFragments : 1;                     // 0x0244(0x0004)
	int                                                NumResourceIndices;                                       // 0x0248(0x0004)
	int                                                ComponentIndexBufferSize;                                 // 0x024C(0x0004)
	int                                                bResetStaticMesh;                                         // 0x0250(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedBaseComponent");
		return ptr;
	}


	void GetNumVisibleFragments();
	void GetNumFragments();
	void IsFragmentVisible();
	void GetVisibleFragments();
	void SetStaticMesh();
};


// Class Engine.FracturedSkinnedMeshComponent
// 0x0020 (0x0274 - 0x0254)
class UFracturedSkinnedMeshComponent : public UFracturedBaseComponent
{
public:
	struct FPointer                                    ComponentSkinResources;                                   // 0x0254(0x0004)
	TArray<struct FBoneTransform>                      FragmentTransforms;                                       // 0x0258(0x000C)
	TArray<class UFracturedStaticMeshComponent*>       DependentComponents;                                      // 0x0264(0x000C)
	unsigned long                                      bBecameVisible : 1;                                       // 0x0270(0x0004)
	unsigned long                                      bFragmentTransformsChanged : 1;                           // 0x0270(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedSkinnedMeshComponent");
		return ptr;
	}

};


// Class Engine.FracturedStaticMeshComponent
// 0x0040 (0x0294 - 0x0254)
class UFracturedStaticMeshComponent : public UFracturedBaseComponent
{
public:
	TArray<unsigned char>                              FragmentNeighborsVisible;                                 // 0x0254(0x000C)
	struct FBox                                        VisibleBox;                                               // 0x0260(0x001C)
	unsigned long                                      bUseSkinnedRendering : 1;                                 // 0x027C(0x0004)
	unsigned long                                      bUseVisibleVertsForBounds : 1;                            // 0x027C(0x0004)
	unsigned long                                      bTopFragmentsRootNonDestroyable : 1;                      // 0x027C(0x0004)
	unsigned long                                      bBottomFragmentsRootNonDestroyable : 1;                   // 0x027C(0x0004)
	float                                              TopBottomFragmentDistThreshold;                           // 0x0280(0x0004)
	class UMaterialInterface*                          LoseChunkOutsideMaterialOverride;                         // 0x0284(0x0004)
	float                                              FragmentBoundsMaxZ;                                       // 0x0288(0x0004)
	float                                              FragmentBoundsMinZ;                                       // 0x028C(0x0004)
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                         // 0x0290(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshComponent");
		return ptr;
	}


	void GetFracturedMeshPhysMaterial();
	void RecreatePhysState();
	void GetBoundaryHiddenFragments();
	void GetFragmentGroups();
	void GetCoreFragmentIndex();
	void GetFragmentAverageExteriorNormal();
	void GetFragmentBox();
	void IsNoPhysFragment();
	void IsRootFragment();
	void IsFragmentDestroyable();
	void SetVisibleFragments();
};


// Class Engine.InstancedStaticMeshComponent
// 0x0024 (0x0254 - 0x0230)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceData;                                          // 0x0230(0x000C)
	int                                                NumPendingLightmaps;                                      // 0x023C(0x0004)
	int                                                ComponentJoinKey;                                         // 0x0240(0x0004)
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                           // 0x0244(0x000C)
	int                                                InstancingRandomSeed;                                     // 0x0250(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		return ptr;
	}

};


// Class Engine.SplineMeshComponent
// 0x0068 (0x0298 - 0x0230)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                             // 0x0230(0x0058)
	struct FVector                                     SplineXDir;                                               // 0x0288(0x000C)
	unsigned long                                      bSmoothInterpRollScale : 1;                               // 0x0294(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineMeshComponent");
		return ptr;
	}

};


// Class Engine.PhysXDestructibleComponent
// 0x0028 (0x01EC - 0x01C4)
class UPhysXDestructibleComponent : public UPrimitiveComponent
{
public:
	class URB_BodySetup*                               DetailedCollision;                                        // 0x01C4(0x0004)
	TArray<unsigned char>                              Fragmented;                                               // 0x01C8(0x000C)
	TArray<int>                                        BoxElemStart;                                             // 0x01D4(0x000C)
	TArray<int>                                        ConvexElemStart;                                          // 0x01E0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXDestructibleComponent");
		return ptr;
	}

};


// Class Engine.PhysXDestructibleAsset
// 0x0028 (0x0064 - 0x003C)
class UPhysXDestructibleAsset : public UObject
{
public:
	TArray<struct FPhysXDestructibleAssetChunk>        ChunkTree;                                                // 0x003C(0x000C)
	TArray<class USkeletalMesh*>                       Meshes;                                                   // 0x0048(0x000C)
	TArray<class UPhysicsAsset*>                       Assets;                                                   // 0x0054(0x000C)
	int                                                MaxDepth;                                                 // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXDestructibleAsset");
		return ptr;
	}

};


// Class Engine.PhysXDestructibleStructure
// 0x009C (0x00D8 - 0x003C)
class UPhysXDestructibleStructure : public UObject
{
public:
	struct FPointer                                    Manager;                                                  // 0x003C(0x0004)
	TArray<class APhysXDestructibleActor*>             Actors;                                                   // 0x0040(0x000C)
	TArray<class APhysXDestructibleActor*>             ActorKillList;                                            // 0x004C(0x000C)
	TArray<struct FPhysXDestructibleChunk>             Chunks;                                                   // 0x0058(0x000C)
	TArray<struct FPhysXDestructibleOverlap>           Overlaps;                                                 // 0x0064(0x000C)
	TArray<int>                                        Active;                                                   // 0x0070(0x000C)
	TArray<int>                                        PseudoSupporterFifo;                                      // 0x007C(0x000C)
	int                                                PseudoSupporterFifoStart;                                 // 0x0088(0x0004)
	TArray<int>                                        FractureOriginFifo;                                       // 0x008C(0x000C)
	int                                                FractureOriginFifoStart;                                  // 0x0098(0x0004)
	TArray<int>                                        FractureOriginChunks;                                     // 0x009C(0x000C)
	TArray<int>                                        RouteUpdateArea;                                          // 0x00A8(0x000C)
	int                                                PerFrameProcessBudget;                                    // 0x00B4(0x0004)
	TArray<int>                                        PassiveFractureChunks;                                    // 0x00B8(0x000C)
	TArray<int>                                        RouteUpdateFifo;                                          // 0x00C4(0x000C)
	int                                                RouteUpdateFifoStart;                                     // 0x00D0(0x0004)
	int                                                SupportDepth;                                             // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXDestructibleStructure");
		return ptr;
	}


	void GetChunkCentroid();
	void GetChunkMatrix();
	void CrumbleChunk();
	void FractureChunk();
	void DamageChunk();
};


// Class Engine.InterpFilter
// 0x000C (0x0048 - 0x003C)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                  // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0010 (0x0058 - 0x0048)
class UInterpFilter_Classes : public UInterpFilter
{
public:
	class UClass*                                      ClassToFilterBy;                                          // 0x0048(0x0004) (ExportObject)
	TArray<class UClass*>                              TrackClasses;                                             // 0x004C(0x000C) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x000C (0x0054 - 0x0048)
class UInterpFilter_Custom : public UInterpFilter
{
public:
	TArray<class UInterpGroup*>                        GroupsToInclude;                                          // 0x0048(0x000C) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x002C (0x0068 - 0x003C)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                          // 0x003C(0x0004)
	TArray<class UInterpTrack*>                        InterpTracks;                                             // 0x0040(0x000C)
	struct FName                                       GroupName;                                                // 0x004C(0x0008)
	struct FColor                                      GroupColor;                                               // 0x0054(0x0004)
	TArray<class UAnimSet*>                            GroupAnimSets;                                            // 0x0058(0x000C)
	unsigned long                                      bCollapsed : 1;                                           // 0x0064(0x0004)
	unsigned long                                      bVisible : 1;                                             // 0x0064(0x0004)
	unsigned long                                      bIsFolder : 1;                                            // 0x0064(0x0004)
	unsigned long                                      bIsParented : 1;                                          // 0x0064(0x0004)
	unsigned long                                      bIsSelected : 1;                                          // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}

};


// Class Engine.InterpGroupAI
// 0x0018 (0x0080 - 0x0068)
class UInterpGroupAI : public UInterpGroup
{
public:
	class USkeletalMesh*                               PreviewSkeletalMesh;                                      // 0x0068(0x0004) (ExportObject)
	struct FName                                       StageMarkGroup;                                           // 0x006C(0x0008)
	unsigned long                                      Teleport : 1;                                             // 0x0074(0x0004)
	class AMatineePawn*                                PreviewPawn;                                              // 0x0078(0x0004) (ExportObject)
	class AActor*                                      StageMarkActor;                                           // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupAI");
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0068 - 0x0068)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0014 (0x0050 - 0x003C)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                    // 0x003C(0x0004)
	class AActor*                                      GroupActor;                                               // 0x0040(0x0004)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                // 0x0044(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}

};


// Class Engine.InterpGroupInstAI
// 0x0005 (0x0055 - 0x0050)
class UInterpGroupInstAI : public UInterpGroupInst
{
public:
	class UInterpGroupAI*                              AIGroup;                                                  // 0x0050(0x0004)
	TEnumAsByte<EPhysics>                              SavedPhysics;                                             // 0x0054(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstAI");
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0010 (0x006C - 0x005C)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                 // 0x005C(0x000C)
	unsigned long                                      bSimulateCameraCutsOnClients : 1;                         // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0010 (0x006C - 0x005C)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                               // 0x005C(0x000C)
	unsigned long                                      bFireEventsWhenForwards : 1;                              // 0x0068(0x0004)
	unsigned long                                      bFireEventsWhenBackwards : 1;                             // 0x0068(0x0004)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackFaceFX
// 0x0028 (0x0084 - 0x005C)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray<class UFaceFXAnimSet*>                      FaceFXAnimSets;                                           // 0x005C(0x000C)
	TArray<struct FFaceFXTrackKey>                     FaceFXSeqs;                                               // 0x0068(0x000C)
	class UFaceFXAsset*                                CachedActorFXAsset;                                       // 0x0074(0x0004)
	TArray<struct FFaceFXSoundCueKey>                  FaceFXSoundCueKeys;                                       // 0x0078(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFaceFX");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0014 (0x0070 - 0x005C)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x005C(0x0010)
	float                                              CurveTension;                                             // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x0070(0x000C)
	struct FName                                       SlotName;                                                 // 0x007C(0x0008)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                 // 0x0084(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0004 (0x0074 - 0x0070)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                         // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                            // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMorphWeight");
		return ptr;
	}

};


// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                          // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSkelControlScale");
		return ptr;
	}

};


// Class Engine.InterpTrackSlomo
// 0x0000 (0x0070 - 0x0070)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0014 (0x0070 - 0x005C)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                         // 0x005C(0x0010)
	float                                              CurveTension;                                             // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0042 (0x009E - 0x005C)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x005C(0x0010)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x006C(0x0010)
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x007C(0x000C)
	struct FName                                       LookAtGroupName;                                          // 0x0088(0x0008)
	float                                              LinCurveTension;                                          // 0x0090(0x0004)
	float                                              AngCurveTension;                                          // 0x0094(0x0004)
	unsigned long                                      bUseQuatInterpolation : 1;                                // 0x0098(0x0004)
	unsigned long                                      bShowArrowAtKeys : 1;                                     // 0x0098(0x0004)
	unsigned long                                      bDisableMovement : 1;                                     // 0x0098(0x0004)
	unsigned long                                      bShowTranslationOnCurveEd : 1;                            // 0x0098(0x0004)
	unsigned long                                      bShowRotationOnCurveEd : 1;                               // 0x0098(0x0004)
	unsigned long                                      bHide3DTrack : 1;                                         // 0x0098(0x0004)
	TEnumAsByte<EInterpTrackMoveFrame>                 MoveFrame;                                                // 0x009C(0x0001)
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x009D(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0014 (0x0070 - 0x005C)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                // 0x005C(0x000C)
	unsigned long                                      bIsCapturingReplay : 1;                                   // 0x0068(0x0004) (ExportObject)
	float                                              FixedTimeStep;                                            // 0x006C(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0010 (0x006C - 0x005C)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                              // 0x005C(0x000C)
	unsigned long                                      bActivateSystemEachUpdate : 1;                            // 0x0068(0x0004)
	unsigned long                                      bFireEventsWhenForwards : 1;                              // 0x0068(0x0004)
	unsigned long                                      bFireEventsWhenBackwards : 1;                             // 0x0068(0x0004)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0014 (0x0070 - 0x005C)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x005C(0x0010)
	float                                              CurveTension;                                             // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0070 - 0x0070)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0070 - 0x0070)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                   // 0x0070(0x000C)
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                           // 0x007C(0x0004)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	struct FName                                       ParamName;                                                // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0078 - 0x0070)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0010 (0x006C - 0x005C)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                          // 0x005C(0x000C)
	unsigned long                                      bFireEventsWhenForwards : 1;                              // 0x0068(0x0004)
	unsigned long                                      bFireEventsWhenBackwards : 1;                             // 0x0068(0x0004)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVisibility");
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                            // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFaceFX
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                         // 0x003C(0x0004)
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFaceFX");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMorphWeight");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0074 (0x00B0 - 0x003C)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x003C(0x000C)
	struct FRotator                                    ResetRotation;                                            // 0x0048(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0054(0x000C) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                                // 0x0060(0x0040)
	struct FQuat                                       InitialQuat;                                              // 0x00A0(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                                   // 0x003C(0x0004)
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                                // 0x0044(0x0004)
	struct FColor                                      ResetColor;                                               // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                                // 0x0044(0x0004)
	float                                              ResetFloat;                                               // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0014 (0x0058 - 0x0044)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                                // 0x0044(0x0004)
	struct FLinearColor                                ResetColor;                                               // 0x0048(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0010 (0x0054 - 0x0044)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                               // 0x0044(0x0004)
	struct FVector                                     ResetVector;                                              // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSkelControlScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                          // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)
	class UAudioComponent*                             PlayAudioComp;                                            // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x000C (0x0048 - 0x003C)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)
	unsigned long                                      bSavedActiveState : 1;                                    // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x000C (0x0048 - 0x003C)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	struct FVector                                     ResetVector;                                              // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                   // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAbs
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x0040 (0x00AC - 0x006C)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x006C(0x001C)
	struct FExpressionInput                            Height;                                                   // 0x0088(0x001C)
	float                                              HeightRatio;                                              // 0x00A4(0x0004)
	float                                              ReferencePlane;                                           // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x0054 (0x00C0 - 0x006C)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	struct FExpressionInput                            Min;                                                      // 0x0088(0x001C)
	struct FExpressionInput                            Max;                                                      // 0x00A4(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                                     // 0x006C(0x0004)
	int                                                PosY;                                                     // 0x0070(0x0004)
	int                                                SizeX;                                                    // 0x0074(0x0004)
	int                                                SizeY;                                                    // 0x0078(0x0004)
	struct FString                                     Text;                                                     // 0x007C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0020 (0x008C - 0x006C)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	unsigned long                                      R : 1;                                                    // 0x0088(0x0004)
	unsigned long                                      G : 1;                                                    // 0x0088(0x0004)
	unsigned long                                      B : 1;                                                    // 0x0088(0x0004)
	unsigned long                                      A : 1;                                                    // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCompound
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionCompound : public UMaterialExpression
{
public:
	TArray<class UMaterialExpression*>                 MaterialExpressions;                                      // 0x006C(0x000C)
	struct FString                                     Caption;                                                  // 0x0078(0x000C)
	unsigned long                                      bExpanded : 1;                                            // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCompound");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0004 (0x0070 - 0x006C)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0074 - 0x006C)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x006C(0x0004)
	float                                              G;                                                        // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x0078 - 0x006C)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x006C(0x0004)
	float                                              G;                                                        // 0x0070(0x0004)
	float                                              B;                                                        // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x007C - 0x006C)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x006C(0x0004)
	float                                              G;                                                        // 0x0070(0x0004)
	float                                              B;                                                        // 0x0074(0x0004)
	float                                              A;                                                        // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0024 (0x0090 - 0x006C)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	float                                              Bias;                                                     // 0x0088(0x0004)
	float                                              Scale;                                                    // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantClamp
// 0x0024 (0x0090 - 0x006C)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	float                                              Min;                                                      // 0x0088(0x0004)
	float                                              Max;                                                      // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0020 (0x008C - 0x006C)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	float                                              Period;                                                   // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0028 (0x0094 - 0x006C)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                     // 0x006C(0x000C) (ReturnParm)
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                               // 0x0078(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FString                                     Description;                                              // 0x007C(0x000C)
	TArray<struct FCustomInput>                        Inputs;                                                   // 0x0088(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomTexture
// 0x0004 (0x0070 - 0x006C)
class UMaterialExpressionCustomTexture : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomTexture");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0040 (0x00AC - 0x006C)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x006C(0x0004)
	float                                              BiasScale;                                                // 0x0070(0x0004)
	struct FExpressionInput                            Alpha;                                                    // 0x0074(0x001C)
	struct FExpressionInput                            Bias;                                                     // 0x0090(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedAlpha");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x005C (0x00C8 - 0x006C)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x006C(0x0004)
	float                                              BiasScale;                                                // 0x0070(0x0004)
	struct FExpressionInput                            RGB;                                                      // 0x0074(0x001C)
	struct FExpressionInput                            Alpha;                                                    // 0x0090(0x001C)
	struct FExpressionInput                            Bias;                                                     // 0x00AC(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                     // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0048 (0x00B4 - 0x006C)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	struct FExpressionInput                            Percent;                                                  // 0x0088(0x001C)
	struct FLinearColor                                LuminanceFactors;                                         // 0x00A4(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDestColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x0070 - 0x006C)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDestDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x000C (0x0078 - 0x006C)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                               // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshEmitterDynamicParameter
// 0x0000 (0x0078 - 0x0078)
class UMaterialExpressionMeshEmitterDynamicParameter : public UMaterialExpressionDynamicParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterDynamicParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFluidNormal
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFluidNormal");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFoliageImpulseDirection
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionFoliageImpulseDirection : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFoliageImpulseDirection");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionFoliageNormalizedRotationAxisAndAngle : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0008 (0x0074 - 0x006C)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                     // 0x006C(0x0004)
	int                                                FontTexturePage;                                          // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0018 (0x008C - 0x0074)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0074(0x0008)
	struct FGuid                                       ExpressionGUID;                                           // 0x007C(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x0020 (0x008C - 0x006C)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                                 // 0x006C(0x0004)
	struct FExpressionInput                            Normal;                                                   // 0x0070(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x008C (0x00F8 - 0x006C)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)
	struct FExpressionInput                            AGreaterThanB;                                            // 0x00A4(0x001C)
	struct FExpressionInput                            AEqualsB;                                                 // 0x00C0(0x001C)
	struct FExpressionInput                            ALessThanB;                                               // 0x00DC(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareIntensity");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareOcclusion");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRadialDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRayDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareSourceDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x006C(0x001C)
	struct FExpressionInput                            Lightmass;                                                // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x0054 (0x00C0 - 0x006C)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)
	struct FExpressionInput                            Alpha;                                                    // 0x00A4(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterVertexColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                              // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectWorldPosition
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionObjectWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionOcclusionPercentage
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionOcclusionPercentage : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionOcclusionPercentage");
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x0040 (0x00AC - 0x006C)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x006C(0x001C)
	struct FExpressionInput                            Time;                                                     // 0x0088(0x001C)
	float                                              SpeedX;                                                   // 0x00A4(0x0004)
	float                                              SpeedY;                                                   // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0018 (0x0084 - 0x006C)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x006C(0x0008)
	struct FGuid                                       ExpressionGUID;                                           // 0x0074(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0004 (0x0088 - 0x0084)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0024 (0x00A8 - 0x0084)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0084(0x001C)
	unsigned long                                      DefaultR : 1;                                             // 0x00A0(0x0004)
	unsigned long                                      DefaultG : 1;                                             // 0x00A0(0x0004)
	unsigned long                                      DefaultB : 1;                                             // 0x00A0(0x0004)
	unsigned long                                      DefaultA : 1;                                             // 0x00A0(0x0004)
	struct FPointer                                    InstanceOverride;                                         // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0040 (0x00C4 - 0x0084)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                         // 0x0084(0x0004)
	unsigned long                                      ExtendedCaptionDisplay : 1;                               // 0x0084(0x0004)
	struct FExpressionInput                            A;                                                        // 0x0088(0x001C)
	struct FExpressionInput                            B;                                                        // 0x00A4(0x001C)
	struct FPointer                                    InstanceOverride;                                         // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x0094 - 0x0084)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x0084(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0004 (0x0070 - 0x006C)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:
	unsigned long                                      bUseViewSpace : 1;                                        // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x0070 - 0x006C)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                     // 0x006C(0x001C)
	struct FExpressionInput                            Exponent;                                                 // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0054 (0x00C0 - 0x006C)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxisAndAngle;                           // 0x006C(0x001C)
	struct FExpressionInput                            PositionOnAxis;                                           // 0x0088(0x001C)
	struct FExpressionInput                            Position;                                                 // 0x00A4(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0044 (0x00B0 - 0x006C)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x006C(0x001C)
	struct FExpressionInput                            Time;                                                     // 0x0088(0x001C)
	float                                              CenterX;                                                  // 0x00A4(0x0004)
	float                                              CenterY;                                                  // 0x00A8(0x0004)
	float                                              Speed;                                                    // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0020 (0x008C - 0x006C)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x006C(0x001C)
	unsigned long                                      bNormalize : 1;                                           // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0024 (0x0090 - 0x006C)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x006C(0x001C)
	TEnumAsByte<ESceneTextureType>                     SceneTextureType;                                         // 0x0088(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned long                                      ScreenAlign : 1;                                          // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x0070 - 0x006C)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                          // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenScaleBias
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionScreenScaleBias : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenScaleBias");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0020 (0x008C - 0x006C)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	float                                              Period;                                                   // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x0040 (0x00AC - 0x006C)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)
	float                                              AttenuationRadius;                                        // 0x00A4(0x0004)
	float                                              HardnessPercent;                                          // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x001C (0x0088 - 0x006C)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0038 (0x00A4 - 0x006C)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x006C(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0088(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x007C - 0x006C)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x006C(0x0004)
	float                                              UTiling;                                                  // 0x0070(0x0004)
	float                                              VTiling;                                                  // 0x0074(0x0004)
	unsigned long                                      UnMirrorU : 1;                                            // 0x0078(0x0004)
	unsigned long                                      UnMirrorV : 1;                                            // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0020 (0x008C - 0x006C)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x006C(0x0004)
	struct FExpressionInput                            Coordinates;                                              // 0x0070(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0024 (0x00B0 - 0x008C)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x008C(0x0004)
	float                                              BiasScale;                                                // 0x0090(0x0004)
	struct FExpressionInput                            Bias;                                                     // 0x0094(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFlipBookSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshSubUVBlend
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionMeshSubUVBlend : public UMaterialExpressionMeshSubUV
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUVBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0018 (0x00A4 - 0x008C)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x008C(0x0008)
	struct FGuid                                       ExpressionGUID;                                           // 0x0094(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0005 (0x00A9 - 0x00A4)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x00A4(0x0004)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x00A8(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterMeshSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterMeshSubUVBlend : public UMaterialExpressionTextureSampleParameterMeshSubUV
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMovie");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterNormal
// 0x0004 (0x00A8 - 0x00A4)
class UMaterialExpressionTextureSampleParameterNormal : public UMaterialExpressionTextureSampleParameter
{
public:
	struct FPointer                                    InstanceOverride;                                         // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterNormal");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0004 (0x0070 - 0x006C)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                         // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x001E (0x008A - 0x006C)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                      // 0x0088(0x0001)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x0089(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x001D (0x0089 - 0x006C)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x006C(0x001C)
	TEnumAsByte<EMaterialPositionTransform>            TransformType;                                            // 0x0088(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWindDirectionAndSpeed
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionWindDirectionAndSpeed : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWindDirectionAndSpeed");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldNormal
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionWorldNormal : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldNormal");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x006C - 0x006C)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialInstance
// 0x0064 (0x00F0 - 0x008C)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x008C(0x0004)
	class UMaterialInterface*                          Parent;                                                   // 0x0090(0x0004)
	unsigned long                                      bHasStaticPermutationResource : 1;                        // 0x0094(0x0004)
	unsigned long                                      bStaticPermutationDirty : 1;                              // 0x0094(0x0004)
	unsigned long                                      ReentrantFlag : 1;                                        // 0x0094(0x0004)
	unsigned long                                      bTextureSizeWidthCacheValid : 1;                          // 0x0094(0x0004)
	unsigned long                                      bTextureSizeHeightCacheValid : 1;                         // 0x0094(0x0004)
	struct FPointer                                    StaticParameters[0x2];                                    // 0x0098(0x0004)
	struct FPointer                                    StaticPermutationResources[0x2];                          // 0x00A0(0x0004)
	struct FPointer                                    Resources[0x2];                                           // 0x00A8(0x0004)
	TArray<class UTexture*>                            ReferencedTextures;                                       // 0x00B0(0x000C)
	TArray<struct FGuid>                               ReferencedTextureGuids;                                   // 0x00BC(0x000C) (ExportObject)
	struct FGuid                                       ParentLightingGuid;                                       // 0x00C8(0x0010)
	struct FGuid                                       LastModifiedParentGUID;                                   // 0x00D8(0x0010)
	float                                              CachedMaxTextureWidth;                                    // 0x00E8(0x0004)
	float                                              CachedMaxTextureHeight;                                   // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}


	void IsInMapOrTransientPackage();
	void ClearParameterValues();
	void SetFontParameterValue();
	void SetTextureParameterValue();
	void SetScalarCurveParameterValue();
	void SetScalarParameterValue();
	void SetVectorParameterValue();
	void SetParent();
};


// Class Engine.MaterialInstanceConstant
// 0x0030 (0x0120 - 0x00F0)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x00F0(0x000C)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x00FC(0x000C)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0108(0x000C)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0114(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}


	void ClearParameterValues();
	void SetFontParameterValue();
	void SetVectorParameterValue();
	void SetTextureParameterValue();
	void SetScalarParameterValue();
	void SetParent();
};


// Class Engine.MaterialInstanceTimeVarying
// 0x0038 (0x0128 - 0x00F0)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                                     // 0x00F0(0x0004)
	float                                              Duration;                                                 // 0x00F4(0x0004)
	TArray<struct FFontParameterValueOverTime>         FontParameterValues;                                      // 0x00F8(0x000C)
	TArray<struct FScalarParameterValueOverTime>       ScalarParameterValues;                                    // 0x0104(0x000C)
	TArray<struct FTextureParameterValueOverTime>      TextureParameterValues;                                   // 0x0110(0x000C)
	TArray<struct FVectorParameterValueOverTime>       VectorParameterValues;                                    // 0x011C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceTimeVarying");
		return ptr;
	}


	void GetMaxDurationFromAllParameters();
	void ClearParameterValues();
	void SetFontParameterValue();
	void SetVectorStartTime();
	void SetVectorCurveParameterValue();
	void SetVectorParameterValue();
	void SetTextureParameterValue();
	void SetDuration();
	void SetScalarStartTime();
	void SetScalarCurveParameterValue();
	void SetScalarParameterValue();
	void SetParent();
};


// Class Engine.EmitterCameraLensEffectBase
// 0x0018 (0x0240 - 0x0228)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                          // 0x0228(0x0004)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                         // 0x022C(0x0004)
	float                                              BaseFOV;                                                  // 0x0230(0x0004)
	float                                              DistFromCamera;                                           // 0x0234(0x0004)
	unsigned long                                      bAllowMultipleInstances : 1;                              // 0x0238(0x0004) (Parm)
	class ACamera*                                     BaseCamera;                                               // 0x023C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		return ptr;
	}


	void UpdateLocation();
	void ActivateLensEffect();
	void PostBeginPlay();
	void NotifyRetriggered();
	void RegisterCamera();
	void Destroyed();
};


// Class Engine.PhysXEmitterSpawnable
// 0x0008 (0x0230 - 0x0228)
class APhysXEmitterSpawnable : public AEmitter
{
public:
	struct FPointer                                    VolumeFill;                                               // 0x0228(0x0004)
	class UParticleSystem*                             ParticleTemplate;                                         // 0x022C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXEmitterSpawnable");
		return ptr;
	}


	void ReplicatedEvent();
	void SetTemplate();
	void Destroyed();
	void Term();
};


// Class Engine.ParticleEventManager
// 0x0000 (0x021C - 0x021C)
class AParticleEventManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEventManager");
		return ptr;
	}


	void HandleParticleModuleEventSendToGame();
};


// Class Engine.ParticleSystemComponent
// 0x00F0 (0x02B4 - 0x01C4)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                                 // 0x01C4(0x0004)
	class UClass*                                      LightEnvironmentClass;                                    // 0x01C8(0x0004)
	TArray<struct FPointer>                            EmitterInstances;                                         // 0x01CC(0x000C)
	TArray<class UStaticMeshComponent*>                SMComponents;                                             // 0x01D8(0x000C)
	TArray<class UMaterialInterface*>                  SMMaterialInterfaces;                                     // 0x01E4(0x000C)
	TArray<struct FViewParticleEmitterInstanceMotionBlurInfo> ViewMBInfoArray;                                          // 0x01F0(0x000C)
	unsigned long                                      bAutoActivate : 1;                                        // 0x01FC(0x0004)
	unsigned long                                      bWasCompleted : 1;                                        // 0x01FC(0x0004)
	unsigned long                                      bSuppressSpawning : 1;                                    // 0x01FC(0x0004)
	unsigned long                                      bWasDeactivated : 1;                                      // 0x01FC(0x0004)
	unsigned long                                      bResetOnDetach : 1;                                       // 0x01FC(0x0004)
	unsigned long                                      bMoreAdvancedUpdateOnInit : 1;                            // 0x01FC(0x0004)
	unsigned long                                      bUpdateOnDedicatedServer : 1;                             // 0x01FC(0x0004)
	unsigned long                                      bJustAttached : 1;                                        // 0x01FC(0x0004)
	unsigned long                                      bIsActive : 1;                                            // 0x01FC(0x0004)
	unsigned long                                      bWarmingUp : 1;                                           // 0x01FC(0x0004)
	unsigned long                                      bIsCachedInPool : 1;                                      // 0x01FC(0x0004)
	unsigned long                                      bTriggerFinishedDelegateWhenInactive : 1;                 // 0x01FC(0x0004)
	unsigned long                                      bOverrideLODMethod : 1;                                   // 0x01FC(0x0004)
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x01FC(0x0004)
	unsigned long                                      bUpdateComponentInTick : 1;                               // 0x01FC(0x0004)
	unsigned long                                      bDeferredBeamUpdate : 1;                                  // 0x01FC(0x0004)
	unsigned long                                      bForcedInActive : 1;                                      // 0x01FC(0x0004)
	unsigned long                                      bIsWarmingUp : 1;                                         // 0x01FC(0x0004)
	unsigned long                                      bIsViewRelevanceDirty : 1;                                // 0x01FC(0x0004)
	unsigned long                                      bRecacheViewRelevance : 1;                                // 0x01FC(0x0004)
	unsigned long                                      bLODUpdatePending : 1;                                    // 0x01FC(0x0004)
	unsigned long                                      bSkipSpawnCountCheck : 1;                                 // 0x01FC(0x0004)
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x0200(0x000C)
	struct FVector                                     OldPosition;                                              // 0x020C(0x000C)
	struct FVector                                     PartSysVelocity;                                          // 0x0218(0x000C)
	float                                              WarmupTime;                                               // 0x0224(0x0004)
	int                                                LODLevel;                                                 // 0x0228(0x0004)
	float                                              SecondsBeforeInactive;                                    // 0x022C(0x0004)
	float                                              TimeSinceLastForceUpdateTransform;                        // 0x0230(0x0004)
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x0234(0x0004)
	int                                                EditorLODLevel;                                           // 0x0238(0x0004)
	float                                              AccumTickTime;                                            // 0x023C(0x0004)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0240(0x0001)
	TEnumAsByte<EParticleReplayState>                  ReplayState;                                              // 0x0241(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0242(0x0002) MISSED OFFSET
	TArray<struct FMaterialViewRelevance>              CachedViewRelevanceFlags;                                 // 0x0244(0x000C)
	TArray<class UParticleSystemReplay*>               ReplayClips;                                              // 0x0250(0x000C)
	int                                                ReplayClipIDNumber;                                       // 0x025C(0x0004)
	int                                                ReplayFrameIndex;                                         // 0x0260(0x0004)
	float                                              AccumLODDistanceCheckTime;                                // 0x0264(0x0004)
	TArray<struct FParticleEventSpawnData>             SpawnEvents;                                              // 0x0268(0x000C)
	TArray<struct FParticleEventDeathData>             DeathEvents;                                              // 0x0274(0x000C)
	TArray<struct FParticleEventCollideData>           CollisionEvents;                                          // 0x0280(0x000C)
	TArray<struct FParticleEventKismetData>            KismetEvents;                                             // 0x028C(0x000C)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x0298(0x0004)
	float                                              CustomTimeDilation;                                       // 0x029C(0x0004)
	float                                              EmitterDelay;                                             // 0x02A0(0x0004)
	float                                              EmitterLoopingDelayFactor;                                // 0x02A4(0x0004)
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                             // 0x02A8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}


	void SetStopSpawning();
	void ResetToDefaults();
	void SetActive();
	void ClearParameter();
	void GetMaterialParameter();
	void GetActorParameter();
	void GetColorParameter();
	void GetVectorParameter();
	void GetFloatParameter();
	void SetMaterialParameter();
	void SetActorParameter();
	void SetColorParameter();
	void SetVectorParameter();
	void SetFloatParameter();
	void GetEditorLODLevel();
	void GetLODLevel();
	void SetEditorLODLevel();
	void SetLODLevel();
	void DetermineLODLevelForLocation();
	void SetBeamTargetStrength();
	void SetBeamTargetTangent();
	void SetBeamTargetPoint();
	void SetBeamSourceStrength();
	void SetBeamSourceTangent();
	void SetBeamSourcePoint();
	void SetBeamDistance();
	void SetBeamEndPoint();
	void SetBeamTessellationFactor();
	void SetBeamType();
	void RewindEmitterInstances();
	void RewindEmitterInstance();
	void SetKillOnCompleted();
	void SetKillOnDeactivate();
	void GetSkipUpdateDynamicDataDuringTick();
	void SetSkipUpdateDynamicDataDuringTick();
	void KillParticlesForced();
	void DeactivateSystem();
	void ActivateSystem();
	void SetTemplate();
	void OnSystemFinished();
};


// Class Engine.DistributionFloatParticleParameter
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0001 (0x00A0 - 0x009F)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x009F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x002C (0x0068 - 0x003C)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x003C(0x0008)
	int                                                SubUVDataOffset;                                          // 0x0044(0x0004)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FColor                                      EmitterEditorColor;                                       // 0x004C(0x0004)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                // 0x0050(0x000C)
	unsigned long                                      ConvertedModules : 1;                                     // 0x005C(0x0004)
	unsigned long                                      bCollapsed : 1;                                           // 0x005C(0x0004) (ExportObject)
	unsigned long                                      bIsSoloing : 1;                                           // 0x005C(0x0004)
	unsigned long                                      bCookedOut : 1;                                           // 0x005C(0x0004)
	int                                                PeakActiveParticles;                                      // 0x0060(0x0004)
	int                                                InitialAllocationCount;                                   // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x0068 - 0x0068)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0064 (0x00A0 - 0x003C)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x003C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0040(0x0004)
	unsigned long                                      ConvertedModules : 1;                                     // 0x0040(0x0004)
	class UParticleModuleRequired*                     RequiredModule;                                           // 0x0044(0x0004)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x0048(0x000C)
	class UParticleModule*                             TypeDataModule;                                           // 0x0054(0x0004)
	class UParticleModuleSpawn*                        SpawnModule;                                              // 0x0058(0x0004)
	class UParticleModuleEventGenerator*               EventGenerator;                                           // 0x005C(0x0004)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                          // 0x0060(0x000C)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x006C(0x000C)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x0078(0x000C)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                             // 0x0084(0x000C)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                     // 0x0090(0x000C)
	int                                                PeakActiveParticles;                                      // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x000C (0x0048 - 0x003C)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                         // 0x003C(0x0004)
	unsigned long                                      bUpdateModule : 1;                                        // 0x003C(0x0004)
	unsigned long                                      bFinalUpdateModule : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bCurvesAsColor : 1;                                       // 0x003C(0x0004)
	unsigned long                                      b3DDrawMode : 1;                                          // 0x003C(0x0004)
	unsigned long                                      bSupported3DDrawMode : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x003C(0x0004)
	unsigned long                                      bEditable : 1;                                            // 0x003C(0x0004)
	unsigned long                                      LODDuplicate : 1;                                         // 0x003C(0x0004)
	unsigned char                                      LODValidity;                                              // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FColor                                      ModuleEditorColor;                                        // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned long                                      bAlwaysInWorldSpace : 1;                                  // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0020 (0x006C - 0x004C)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                             // 0x004C(0x001C)
	unsigned long                                      bApplyOwnerScale : 1;                                     // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x001C (0x0068 - 0x004C)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                            // 0x004C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0050 (0x0098 - 0x0048)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0048(0x000C)
	struct FVector                                     EndPoint1;                                                // 0x0054(0x000C)
	struct FRawDistributionFloat                       Range;                                                    // 0x0060(0x001C)
	struct FRawDistributionFloat                       Strength;                                                 // 0x007C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x004C (0x0094 - 0x0048)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0048(0x0008)
	struct FRawDistributionFloat                       Range;                                                    // 0x0050(0x001C)
	unsigned long                                      bStrengthByDistance : 1;                                  // 0x006C(0x0004)
	unsigned long                                      bAffectBaseVelocity : 1;                                  // 0x006C(0x0004)
	unsigned long                                      bRenewSource : 1;                                         // 0x006C(0x0004)
	unsigned long                                      bInheritSourceVel : 1;                                    // 0x006C(0x0004)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0070(0x001C)
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x008C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x0058 (0x00A0 - 0x0048)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                 // 0x0048(0x001C)
	struct FRawDistributionFloat                       Range;                                                    // 0x0064(0x001C)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0080(0x001C)
	unsigned long                                      StrengthByDistance : 1;                                   // 0x009C(0x0004)
	unsigned long                                      bAffectBaseVelocity : 1;                                  // 0x009C(0x0004)
	unsigned long                                      bOverrideVelocity : 1;                                    // 0x009C(0x0004)
	unsigned long                                      bUseWorldSpacePosition : 1;                               // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x0068 (0x00B0 - 0x0048)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                          // 0x004C(0x0004)
	struct FRawDistributionVector                      Position;                                                 // 0x0050(0x001C)
	struct FBeamModifierOptions                        TangentOptions;                                           // 0x006C(0x0004)
	struct FRawDistributionVector                      Tangent;                                                  // 0x0070(0x001C)
	unsigned long                                      bAbsoluteTangent : 1;                                     // 0x008C(0x0004)
	struct FBeamModifierOptions                        StrengthOptions;                                          // 0x0090(0x0004)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0094(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x00AC (0x00F4 - 0x0048)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                                     // 0x0048(0x0004)
	unsigned long                                      bNRScaleEmitterTime : 1;                                  // 0x0048(0x0004)
	unsigned long                                      bSmooth : 1;                                              // 0x0048(0x0004)
	unsigned long                                      bNoiseLock : 1;                                           // 0x0048(0x0004)
	unsigned long                                      bOscillate : 1;                                           // 0x0048(0x0004)
	unsigned long                                      bUseNoiseTangents : 1;                                    // 0x0048(0x0004)
	unsigned long                                      bTargetNoise : 1;                                         // 0x0048(0x0004)
	unsigned long                                      bApplyNoiseScale : 1;                                     // 0x0048(0x0004)
	int                                                Frequency;                                                // 0x004C(0x0004)
	int                                                Frequency_LowRange;                                       // 0x0050(0x0004)
	struct FRawDistributionVector                      NoiseRange;                                               // 0x0054(0x001C)
	struct FRawDistributionFloat                       NoiseRangeScale;                                          // 0x0070(0x001C)
	struct FRawDistributionVector                      NoiseSpeed;                                               // 0x008C(0x001C)
	float                                              NoiseLockRadius;                                          // 0x00A8(0x0004)
	float                                              NoiseLockTime;                                            // 0x00AC(0x0004)
	float                                              NoiseTension;                                             // 0x00B0(0x0004)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                     // 0x00B4(0x001C)
	int                                                NoiseTessellation;                                        // 0x00D0(0x0004)
	float                                              FrequencyDistance;                                        // 0x00D4(0x0004)
	struct FRawDistributionFloat                       NoiseScale;                                               // 0x00D8(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x0064 (0x00AC - 0x0048)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0048(0x0001)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x0049(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x004C(0x0008)
	unsigned long                                      bSourceAbsolute : 1;                                      // 0x0054(0x0004)
	unsigned long                                      bLockSource : 1;                                          // 0x0054(0x0004)
	unsigned long                                      bLockSourceTangent : 1;                                   // 0x0054(0x0004)
	unsigned long                                      bLockSourceStength : 1;                                   // 0x0054(0x0004)
	struct FRawDistributionVector                      Source;                                                   // 0x0058(0x001C)
	struct FRawDistributionVector                      SourceTangent;                                            // 0x0074(0x001C)
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0090(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x0068 (0x00B0 - 0x0048)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0048(0x0001)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x0049(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x004C(0x0008)
	struct FRawDistributionVector                      Target;                                                   // 0x0054(0x001C)
	unsigned long                                      bTargetAbsolute : 1;                                      // 0x0070(0x0004)
	unsigned long                                      bLockTarget : 1;                                          // 0x0070(0x0004)
	unsigned long                                      bLockTargetTangent : 1;                                   // 0x0070(0x0004)
	unsigned long                                      bLockTargetStength : 1;                                   // 0x0070(0x0004)
	struct FRawDistributionVector                      TargetTangent;                                            // 0x0074(0x001C)
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x0090(0x001C)
	float                                              LockRadius;                                               // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x009C (0x00E4 - 0x0048)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                            // 0x0048(0x001C)
	struct FRawDistributionVector                      DampingFactorRotation;                                    // 0x0064(0x001C)
	struct FRawDistributionFloat                       MaxCollisions;                                            // 0x0080(0x001C)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x009C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	unsigned long                                      bApplyPhysics : 1;                                        // 0x00A0(0x0004)
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                            // 0x00A0(0x0004)
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x00A0(0x0004)
	unsigned long                                      bDropDetail : 1;                                          // 0x00A0(0x0004)
	struct FRawDistributionFloat                       ParticleMass;                                             // 0x00A4(0x001C)
	float                                              DirScalar;                                                // 0x00C0(0x0004)
	float                                              VerticalFudgeFactor;                                      // 0x00C4(0x0004)
	struct FRawDistributionFloat                       DelayAmount;                                              // 0x00C8(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x003C (0x0084 - 0x0048)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                               // 0x0048(0x001C)
	struct FRawDistributionFloat                       StartAlpha;                                               // 0x0064(0x001C)
	unsigned long                                      bClampAlpha : 1;                                          // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorByParameter
// 0x000C (0x0054 - 0x0048)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                               // 0x0048(0x0008)
	struct FColor                                      DefaultColor;                                             // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorByParameter");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x003C (0x0084 - 0x0048)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0048(0x001C)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0064(0x001C)
	unsigned long                                      bClampAlpha : 1;                                          // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x003C (0x0084 - 0x0048)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0048(0x001C)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                       // 0x0064(0x001C)
	unsigned long                                      bEmitterTime : 1;                                         // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleEventBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x000C (0x0054 - 0x0048)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                   // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x000C (0x0054 - 0x0048)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x004C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0004 (0x0058 - 0x0054)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned long                                      bStopSpawning : 1;                                        // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0048 (0x009C - 0x0054)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0054(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x0058(0x0008)
	struct FRawDistributionFloat                       SpawnCount;                                               // 0x0060(0x001C)
	unsigned long                                      bUseParticleTime : 1;                                     // 0x007C(0x0004)
	unsigned long                                      bUsePSysLocation : 1;                                     // 0x007C(0x0004)
	unsigned long                                      bInheritVelocity : 1;                                     // 0x007C(0x0004)
	struct FRawDistributionVector                      InheritVelocityScale;                                     // 0x0080(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x003C (0x0084 - 0x0048)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                          // 0x0048(0x001C)
	struct FRawDistributionVector                      UpperRightCorner;                                         // 0x0064(0x001C)
	unsigned long                                      bAbsolute : 1;                                            // 0x0080(0x0004)
	unsigned long                                      bKillInside : 1;                                          // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                   // 0x0048(0x001C)
	unsigned long                                      bAbsolute : 1;                                            // 0x0064(0x0004)
	unsigned long                                      bFloor : 1;                                               // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x001C (0x0064 - 0x0048)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x001C (0x0064 - 0x0048)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                            // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x0070 (0x00B8 - 0x0048)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                 // 0x0048(0x001C)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0064(0x001C)
	struct FRawDistributionVector                      ScaleFactor;                                              // 0x0080(0x001C)
	struct FRawDistributionVector                      Direction;                                                // 0x009C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0018 (0x0060 - 0x0048)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0048(0x0008)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned long                                      InheritSourceVelocity : 1;                                // 0x0054(0x0004)
	unsigned long                                      bInheritSourceRotation : 1;                               // 0x0054(0x0004)
	float                                              InheritSourceVelocityScale;                               // 0x0058(0x0004)
	float                                              InheritSourceRotationScale;                               // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0050 - 0x0048)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0048(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x003C (0x0084 - 0x0048)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                           // 0x0048(0x0004)
	unsigned long                                      Positive_Y : 1;                                           // 0x0048(0x0004)
	unsigned long                                      Positive_Z : 1;                                           // 0x0048(0x0004)
	unsigned long                                      Negative_X : 1;                                           // 0x0048(0x0004)
	unsigned long                                      Negative_Y : 1;                                           // 0x0048(0x0004)
	unsigned long                                      Negative_Z : 1;                                           // 0x0048(0x0004)
	unsigned long                                      SurfaceOnly : 1;                                          // 0x0048(0x0004)
	unsigned long                                      Velocity : 1;                                             // 0x0048(0x0004)
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x004C(0x001C)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0068(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x003D (0x00C1 - 0x0084)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                                       // 0x0084(0x0004)
	struct FRawDistributionFloat                       StartRadius;                                              // 0x0088(0x001C)
	struct FRawDistributionFloat                       StartHeight;                                              // 0x00A4(0x001C)
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x00C0(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x001C (0x00A0 - 0x0084)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x0084(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                      // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialByParameter
// 0x0018 (0x0060 - 0x0048)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray<struct FName>                               MaterialParameters;                                       // 0x0048(0x000C)
	TArray<class UMaterialInterface*>                  DefaultMaterials;                                         // 0x0054(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialByParameter");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x000C (0x0054 - 0x0048)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                            // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                                      // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x0064 (0x00B0 - 0x004C)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x004C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                             // 0x0050(0x001C)
	struct FOrbitOptions                               OffsetOptions;                                            // 0x006C(0x0004)
	struct FRawDistributionVector                      RotationAmount;                                           // 0x0070(0x001C)
	struct FOrbitOptions                               RotationOptions;                                          // 0x008C(0x0004)
	struct FRawDistributionVector                      RotationRateAmount;                                       // 0x0090(0x001C)
	struct FOrbitOptions                               RotationRateOptions;                                      // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0049 - 0x0048)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0048(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x000C (0x0054 - 0x0048)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                            // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x007C (0x00C4 - 0x0048)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0048(0x0004)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x004C(0x0001)
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                 // 0x004D(0x0001)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x004E(0x0001)
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x004F(0x0001)
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                       // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned long                                      bUseLocalSpace : 1;                                       // 0x0054(0x0004)
	unsigned long                                      bKillOnDeactivate : 1;                                    // 0x0054(0x0004)
	unsigned long                                      bKillOnCompleted : 1;                                     // 0x0054(0x0004)
	unsigned long                                      bRequiresSorting : 1;                                     // 0x0054(0x0004)
	unsigned long                                      bUseLegacyEmitterTime : 1;                                // 0x0054(0x0004)
	unsigned long                                      bEmitterDurationUseRange : 1;                             // 0x0054(0x0004)
	unsigned long                                      bDurationRecalcEachLoop : 1;                              // 0x0054(0x0004)
	unsigned long                                      bEmitterDelayUseRange : 1;                                // 0x0054(0x0004)
	unsigned long                                      bDelayFirstLoopOnly : 1;                                  // 0x0054(0x0004)
	unsigned long                                      bUseSharedDelayFactor : 1;                                // 0x0054(0x0004)
	unsigned long                                      bScaleUV : 1;                                             // 0x0054(0x0004)
	unsigned long                                      bDirectUV : 1;                                            // 0x0054(0x0004)
	unsigned long                                      bUseMaxDrawCount : 1;                                     // 0x0054(0x0004)
	float                                              EmitterDuration;                                          // 0x0058(0x0004)
	float                                              EmitterDurationLow;                                       // 0x005C(0x0004)
	int                                                EmitterLoops;                                             // 0x0060(0x0004)
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x0064(0x001C)
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0080(0x000C)
	float                                              EmitterDelay;                                             // 0x008C(0x0004)
	float                                              EmitterDelayLow;                                          // 0x0090(0x0004)
	int                                                SubImages_Horizontal;                                     // 0x0094(0x0004)
	int                                                SubImages_Vertical;                                       // 0x0098(0x0004)
	float                                              RandomImageTime;                                          // 0x009C(0x0004)
	int                                                RandomImageChanges;                                       // 0x00A0(0x0004)
	int                                                MaxDrawCount;                                             // 0x00A4(0x0004)
	float                                              DownsampleThresholdScreenFraction;                        // 0x00A8(0x0004)
	struct FVector                                     NormalsSphereCenter;                                      // 0x00AC(0x000C)
	struct FVector                                     NormalsCylinderDirection;                                 // 0x00B8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                            // 0x0048(0x001C)
	unsigned long                                      bInheritParent : 1;                                       // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x001C (0x0064 - 0x0048)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                         // 0x0048(0x001C)
	unsigned long                                      Scale : 1;                                                // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x001C (0x0064 - 0x0048)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                        // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x001C (0x0064 - 0x0048)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x001C (0x0064 - 0x0048)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x001C (0x0064 - 0x0048)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                           // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0048(0x001C)
	unsigned long                                      MultiplyX : 1;                                            // 0x0064(0x0004)
	unsigned long                                      MultiplyY : 1;                                            // 0x0064(0x0004)
	unsigned long                                      MultiplyZ : 1;                                            // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                                       // 0x0048(0x001C)
	unsigned long                                      MultiplyX : 1;                                            // 0x0064(0x0004)
	unsigned long                                      MultiplyY : 1;                                            // 0x0064(0x0004)
	unsigned long                                      MultiplyZ : 1;                                            // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                // 0x0048(0x001C)
	unsigned long                                      EnableX : 1;                                              // 0x0064(0x0004)
	unsigned long                                      EnableY : 1;                                              // 0x0064(0x0004)
	unsigned long                                      EnableZ : 1;                                              // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleByTime
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSizeScaleByTime : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleByTime;                                          // 0x0048(0x001C)
	unsigned long                                      bEnableX : 1;                                             // 0x0064(0x0004)
	unsigned long                                      bEnableY : 1;                                             // 0x0064(0x0004)
	unsigned long                                      bEnableZ : 1;                                             // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleByTime");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                                    // 0x0048(0x0004)
	unsigned long                                      bProcessBurstList : 1;                                    // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x0048 (0x0094 - 0x004C)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                     // 0x004C(0x001C)
	struct FRawDistributionFloat                       RateScale;                                                // 0x0068(0x001C)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0088(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x002C (0x0078 - 0x004C)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                               // 0x004C(0x0004)
	struct FRawDistributionFloat                       SpawnPerUnit;                                             // 0x0050(0x001C)
	float                                              MaxSpawnPerSecond;                                        // 0x006C(0x0004)
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x0070(0x0004)
	float                                              MovementTolerance;                                        // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}

};


// Class Engine.ParticleModuleStoreSpawnTimeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleStoreSpawnTimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleStoreSpawnTimeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleStoreSpawnTime
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleStoreSpawnTime : public UParticleModuleStoreSpawnTimeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleStoreSpawnTime");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                            // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0024 (0x0088 - 0x0064)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned long                                      bUseEmitterTime : 1;                                      // 0x0064(0x0004)
	struct FRawDistributionFloat                       FrameRate;                                                // 0x0068(0x001C)
	int                                                StartingFrame;                                            // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVDirect
// 0x0038 (0x0080 - 0x0048)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                            // 0x0048(0x001C)
	struct FRawDistributionVector                      SubUVSize;                                                // 0x0064(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVSelect
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                           // 0x0048(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVSelect");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x003C (0x0084 - 0x0048)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0048(0x0001)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x0049(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x004C(0x0008)
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0054(0x001C)
	unsigned long                                      bLockSourceStength : 1;                                   // 0x0070(0x0004)
	unsigned long                                      bInheritRotation : 1;                                     // 0x0070(0x0004)
	int                                                SourceOffsetCount;                                        // 0x0074(0x0004)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0078(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSpawn
// 0x0008 (0x0050 - 0x0048)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                         // 0x0048(0x0004)
	float                                              MinSpawnVelocity;                                         // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailTaper
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrailTaperMethod>                     TaperMethod;                                              // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x004C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailTaper");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x001C (0x0064 - 0x0048)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	struct FName                                       ControlEdgeName;                                          // 0x0048(0x0008)
	int                                                SheetsPerTrail;                                           // 0x0050(0x0004)
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                              // 0x0054(0x0004)
	unsigned long                                      bClipSourceSegement : 1;                                  // 0x0054(0x0004)
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0054(0x0004)
	unsigned long                                      bTangentRecalculationEveryFrame : 1;                      // 0x0054(0x0004)
	unsigned long                                      bRenderGeometry : 1;                                      // 0x0054(0x0004)
	unsigned long                                      bRenderSpawnPoints : 1;                                   // 0x0054(0x0004)
	unsigned long                                      bRenderTangents : 1;                                      // 0x0054(0x0004)
	unsigned long                                      bRenderTessellation : 1;                                  // 0x0054(0x0004)
	float                                              TilingDistance;                                           // 0x0058(0x0004)
	float                                              DistanceTessellationStepSize;                             // 0x005C(0x0004)
	float                                              TangentTessellationScalar;                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam
// 0x009C (0x00E4 - 0x0048)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeamMethod>                           BeamMethod;                                               // 0x0048(0x0001)
	TEnumAsByte<EBeamEndPointMethod>                   EndPointMethod;                                           // 0x0049(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FRawDistributionFloat                       Distance;                                                 // 0x004C(0x001C)
	struct FRawDistributionVector                      EndPoint;                                                 // 0x0068(0x001C)
	int                                                TessellationFactor;                                       // 0x0084(0x0004)
	struct FRawDistributionFloat                       EmitterStrength;                                          // 0x0088(0x001C)
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x00A4(0x001C)
	struct FRawDistributionVector                      EndPointDirection;                                        // 0x00C0(0x001C)
	int                                                TextureTile;                                              // 0x00DC(0x0004)
	unsigned long                                      RenderGeometry : 1;                                       // 0x00E0(0x0004)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x00E0(0x0004)
	unsigned long                                      RenderLines : 1;                                          // 0x00E0(0x0004)
	unsigned long                                      RenderTessellation : 1;                                   // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x0080 (0x00C8 - 0x0048)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0048(0x0001)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x0049(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	int                                                TextureTile;                                              // 0x004C(0x0004)
	float                                              TextureTileDistance;                                      // 0x0050(0x0004)
	int                                                Sheets;                                                   // 0x0054(0x0004)
	int                                                MaxBeamCount;                                             // 0x0058(0x0004)
	float                                              Speed;                                                    // 0x005C(0x0004)
	int                                                InterpolationPoints;                                      // 0x0060(0x0004)
	unsigned long                                      bAlwaysOn : 1;                                            // 0x0064(0x0004)
	unsigned long                                      RenderGeometry : 1;                                       // 0x0064(0x0004)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x0064(0x0004)
	unsigned long                                      RenderLines : 1;                                          // 0x0064(0x0004)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0064(0x0004)
	int                                                UpVectorStepSize;                                         // 0x0068(0x0004)
	struct FName                                       BranchParentName;                                         // 0x006C(0x0008)
	struct FRawDistributionFloat                       Distance;                                                 // 0x0074(0x001C)
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x0090(0x001C)
	struct FRawDistributionFloat                       TaperScale;                                               // 0x00AC(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0018 (0x0060 - 0x0048)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0048(0x0004)
	unsigned long                                      CastShadows : 1;                                          // 0x004C(0x0004)
	unsigned long                                      DoCollisions : 1;                                         // 0x004C(0x0004)
	unsigned long                                      bAllowMotionBlur : 1;                                     // 0x004C(0x0004)
	unsigned long                                      bOverrideMaterial : 1;                                    // 0x004C(0x0004)
	unsigned long                                      bCameraFacing : 1;                                        // 0x004C(0x0004)
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x0050(0x0001)
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                           // 0x0051(0x0001)
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                 // 0x0052(0x0001)
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                       // 0x0053(0x0001)
	float                                              Pitch;                                                    // 0x0054(0x0004)
	float                                              Roll;                                                     // 0x0058(0x0004)
	float                                              Yaw;                                                      // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataPhysX
// 0x0014 (0x005C - 0x0048)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                              // 0x0048(0x0004)
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                              // 0x004C(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataPhysX");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                              // 0x0060(0x0004)
	TEnumAsByte<EPhysXMeshRotationMethod>              PhysXRotationMethod;                                      // 0x0064(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              FluidRotationCoefficient;                                 // 0x0068(0x0004)
	struct FPointer                                    RenderInstance;                                           // 0x006C(0x0004)
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                              // 0x0070(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMeshPhysX");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0028 (0x0070 - 0x0048)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0048(0x0004)
	int                                                SheetsPerTrail;                                           // 0x004C(0x0004)
	int                                                MaxTrailCount;                                            // 0x0050(0x0004)
	int                                                MaxParticleInTrailCount;                                  // 0x0054(0x0004)
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                              // 0x0058(0x0004)
	unsigned long                                      bClipSourceSegement : 1;                                  // 0x0058(0x0004)
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0058(0x0004)
	unsigned long                                      bTangentRecalculationEveryFrame : 1;                      // 0x0058(0x0004)
	unsigned long                                      bRenderGeometry : 1;                                      // 0x0058(0x0004)
	unsigned long                                      bRenderSpawnPoints : 1;                                   // 0x0058(0x0004)
	unsigned long                                      bRenderTangents : 1;                                      // 0x0058(0x0004)
	unsigned long                                      bRenderTessellation : 1;                                  // 0x0058(0x0004)
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                               // 0x005C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                                    // 0x0060(0x0004)
	float                                              TilingDistance;                                           // 0x0064(0x0004)
	float                                              DistanceTessellationStepSize;                             // 0x0068(0x0004)
	float                                              TangentTessellationScalar;                                // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataTrail
// 0x0030 (0x0078 - 0x0048)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                                       // 0x0048(0x0004)
	unsigned long                                      RenderLines : 1;                                          // 0x0048(0x0004)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0048(0x0004)
	unsigned long                                      Tapered : 1;                                              // 0x0048(0x0004)
	unsigned long                                      SpawnByDistance : 1;                                      // 0x0048(0x0004)
	int                                                TessellationFactor;                                       // 0x004C(0x0004)
	struct FRawDistributionFloat                       Tension;                                                  // 0x0050(0x001C)
	struct FVector                                     SpawnDistance;                                            // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataTrail2
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                                       // 0x0048(0x0004)
	float                                              TessellationFactorDistance;                               // 0x004C(0x0004)
	float                                              TessellationStrength;                                     // 0x0050(0x0004)
	int                                                TextureTile;                                              // 0x0054(0x0004)
	int                                                Sheets;                                                   // 0x0058(0x0004)
	int                                                MaxTrailCount;                                            // 0x005C(0x0004)
	int                                                MaxParticleInTrailCount;                                  // 0x0060(0x0004)
	unsigned long                                      bClipSourceSegement : 1;                                  // 0x0064(0x0004)
	unsigned long                                      RenderGeometry : 1;                                       // 0x0064(0x0004)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x0064(0x0004)
	unsigned long                                      RenderLines : 1;                                          // 0x0064(0x0004)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail2");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberBase
// 0x000C (0x0054 - 0x0048)
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray<struct FName>                               RequiredModules;                                          // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCL
// 0x00A8 (0x00FC - 0x0054)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x008C(0x001C)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00A8(0x001C)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C4(0x001C)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E0(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCL");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00C4 (0x0118 - 0x0054)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x008C(0x001C)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00A8(0x001C)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C4(0x001C)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E0(0x001C)
	struct FRawDistributionVector                      StartLocation;                                            // 0x00FC(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLIL");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x011C (0x0170 - 0x0054)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x008C(0x001C)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00A8(0x001C)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C4(0x001C)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E0(0x001C)
	struct FRawDistributionVector                      StartLocation;                                            // 0x00FC(0x001C)
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0118(0x001C)
	struct FRawDistributionVector                      SizeLifeMultiplier;                                       // 0x0134(0x001C)
	unsigned long                                      SizeMultiplyX : 1;                                        // 0x0150(0x0004)
	unsigned long                                      SizeMultiplyY : 1;                                        // 0x0150(0x0004)
	unsigned long                                      SizeMultiplyZ : 1;                                        // 0x0150(0x0004)
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0154(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainDrops
// 0x0088 (0x00DC - 0x0054)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                              // 0x0054(0x0004)
	float                                              LifetimeMax;                                              // 0x0058(0x0004)
	struct FVector                                     StartSizeMin;                                             // 0x005C(0x000C)
	struct FVector                                     StartSizeMax;                                             // 0x0068(0x000C)
	struct FVector                                     StartVelocityMin;                                         // 0x0074(0x000C)
	struct FVector                                     StartVelocityMax;                                         // 0x0080(0x000C)
	float                                              StartVelocityRadialMin;                                   // 0x008C(0x0004)
	float                                              StartVelocityRadialMax;                                   // 0x0090(0x0004)
	struct FVector                                     ColorOverLife;                                            // 0x0094(0x000C)
	float                                              AlphaOverLife;                                            // 0x00A0(0x0004)
	unsigned long                                      bIsUsingCylinder : 1;                                     // 0x00A4(0x0004)
	unsigned long                                      bPositive_X : 1;                                          // 0x00A4(0x0004)
	unsigned long                                      bPositive_Y : 1;                                          // 0x00A4(0x0004)
	unsigned long                                      bPositive_Z : 1;                                          // 0x00A4(0x0004)
	unsigned long                                      bNegative_X : 1;                                          // 0x00A4(0x0004)
	unsigned long                                      bNegative_Y : 1;                                          // 0x00A4(0x0004)
	unsigned long                                      bNegative_Z : 1;                                          // 0x00A4(0x0004)
	unsigned long                                      bSurfaceOnly : 1;                                         // 0x00A4(0x0004)
	unsigned long                                      bVelocity : 1;                                            // 0x00A4(0x0004)
	unsigned long                                      bRadialVelocity : 1;                                      // 0x00A4(0x0004)
	float                                              PC_VelocityScale;                                         // 0x00A8(0x0004)
	struct FVector                                     PC_StartLocation;                                         // 0x00AC(0x000C)
	float                                              PC_StartRadius;                                           // 0x00B8(0x0004)
	float                                              PC_StartHeight;                                           // 0x00BC(0x0004)
	TEnumAsByte<ECylinderHeightAxis>                   PC_HeightAxis;                                            // 0x00C0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	struct FVector                                     StartLocationMin;                                         // 0x00C4(0x000C)
	struct FVector                                     StartLocationMax;                                         // 0x00D0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainDrops");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainImpacts
// 0x0120 (0x0174 - 0x0054)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C)
	struct FRawDistributionVector                      StartRotation;                                            // 0x008C(0x001C)
	unsigned long                                      bInheritParent : 1;                                       // 0x00A8(0x0004)
	unsigned long                                      MultiplyX : 1;                                            // 0x00A8(0x0004)
	unsigned long                                      MultiplyY : 1;                                            // 0x00A8(0x0004)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00A8(0x0004)
	unsigned long                                      bIsUsingCylinder : 1;                                     // 0x00A8(0x0004)
	unsigned long                                      bPositive_X : 1;                                          // 0x00A8(0x0004)
	unsigned long                                      bPositive_Y : 1;                                          // 0x00A8(0x0004)
	unsigned long                                      bPositive_Z : 1;                                          // 0x00A8(0x0004)
	unsigned long                                      bNegative_X : 1;                                          // 0x00A8(0x0004)
	unsigned long                                      bNegative_Y : 1;                                          // 0x00A8(0x0004)
	unsigned long                                      bNegative_Z : 1;                                          // 0x00A8(0x0004)
	unsigned long                                      bSurfaceOnly : 1;                                         // 0x00A8(0x0004)
	unsigned long                                      bVelocity : 1;                                            // 0x00A8(0x0004)
	unsigned long                                      bRadialVelocity : 1;                                      // 0x00A8(0x0004)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00AC(0x001C)
	struct FRawDistributionFloat                       PC_VelocityScale;                                         // 0x00C8(0x001C)
	struct FRawDistributionVector                      PC_StartLocation;                                         // 0x00E4(0x001C)
	struct FRawDistributionFloat                       PC_StartRadius;                                           // 0x0100(0x001C)
	struct FRawDistributionFloat                       PC_StartHeight;                                           // 0x011C(0x001C)
	TEnumAsByte<ECylinderHeightAxis>                   PC_HeightAxis;                                            // 0x0138(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x013C(0x001C)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0158(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainImpacts");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainSplashA
// 0x00AC (0x0100 - 0x0054)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C)
	struct FRawDistributionVector                      StartRotation;                                            // 0x008C(0x001C)
	unsigned long                                      bInheritParent : 1;                                       // 0x00A8(0x0004)
	unsigned long                                      MultiplyX : 1;                                            // 0x00A8(0x0004)
	unsigned long                                      MultiplyY : 1;                                            // 0x00A8(0x0004)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00A8(0x0004)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00AC(0x001C)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C8(0x001C)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E4(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashA");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainSplashB
// 0x00AC (0x0100 - 0x0054)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x008C(0x001C)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00A8(0x001C)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00C4(0x001C)
	unsigned long                                      MultiplyX : 1;                                            // 0x00E0(0x0004)
	unsigned long                                      MultiplyY : 1;                                            // 0x00E0(0x0004)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00E0(0x0004)
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x00E4(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashB");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned long                                      bInWorldSpace : 1;                                        // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0038 (0x0084 - 0x004C)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                            // 0x004C(0x001C)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x0068(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x001C (0x0068 - 0x004C)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                    // 0x004C(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0020 (0x006C - 0x004C)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                              // 0x004C(0x001C)
	unsigned long                                      Absolute : 1;                                             // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x003C - 0x003C)
class UParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		return ptr;
	}


	void DoEvent();
};


// Class Engine.ParticleSystemReplay
// 0x0010 (0x004C - 0x003C)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x003C(0x0004)
	TArray<struct FParticleSystemReplayFrame>          Frames;                                                   // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemReplay");
		return ptr;
	}

};


// Class Engine.PhysXParticleSystem
// 0x0058 (0x0094 - 0x003C)
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles;                                             // 0x003C(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0040(0x0001)
	TEnumAsByte<ESimulationMethod>                     SimulationMethod;                                         // 0x0041(0x0001)
	TEnumAsByte<EPacketSizeMultiplier>                 PacketSizeMultiplier;                                     // 0x0042(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0043(0x0001) MISSED OFFSET
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                                    // 0x0044(0x0004)
	float                                              CollisionDistance;                                        // 0x0048(0x0004)
	float                                              RestitutionWithStaticShapes;                              // 0x004C(0x0004)
	float                                              RestitutionWithDynamicShapes;                             // 0x0050(0x0004)
	float                                              FrictionWithStaticShapes;                                 // 0x0054(0x0004)
	float                                              FrictionWithDynamicShapes;                                // 0x0058(0x0004)
	unsigned long                                      bDynamicCollision : 1;                                    // 0x005C(0x0004)
	unsigned long                                      bDisableGravity : 1;                                      // 0x005C(0x0004)
	unsigned long                                      bStaticCollision : 1;                                     // 0x005C(0x0004)
	unsigned long                                      bTwoWayCollision : 1;                                     // 0x005C(0x0004)
	unsigned long                                      bDestroy : 1;                                             // 0x005C(0x0004)
	unsigned long                                      bSyncFailed : 1;                                          // 0x005C(0x0004)
	unsigned long                                      bIsInGame : 1;                                            // 0x005C(0x0004)
	float                                              MaxMotionDistance;                                        // 0x0060(0x0004)
	float                                              Damping;                                                  // 0x0064(0x0004)
	struct FVector                                     ExternalAcceleration;                                     // 0x0068(0x000C)
	float                                              RestParticleDistance;                                     // 0x0074(0x0004)
	float                                              RestDensity;                                              // 0x0078(0x0004)
	float                                              KernelRadiusMultiplier;                                   // 0x007C(0x0004)
	float                                              Stiffness;                                                // 0x0080(0x0004)
	float                                              Viscosity;                                                // 0x0084(0x0004)
	float                                              CollisionResponseCoefficient;                             // 0x0088(0x0004)
	struct FPointer                                    CascadeScene;                                             // 0x008C(0x0004)
	struct FPointer                                    PSys;                                                     // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXParticleSystem");
		return ptr;
	}

};


// Class Engine.KActor
// 0x00B4 (0x0308 - 0x0254)
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x0254(0x0004)
	unsigned long                                      bWakeOnLevelStart : 1;                                    // 0x0254(0x0004) (Edit)
	unsigned long                                      bCurrentSlide : 1;                                        // 0x0254(0x0004)
	unsigned long                                      bSlideActive : 1;                                         // 0x0254(0x0004)
	unsigned long                                      bEnableStayUprightSpring : 1;                             // 0x0254(0x0004)
	unsigned long                                      bLimitMaxPhysicsVelocity : 1;                             // 0x0254(0x0004)
	unsigned long                                      bNeedsRBStateReplication : 1;                             // 0x0254(0x0004)
	unsigned long                                      bDisableClientSidePawnInteractions : 1;                   // 0x0254(0x0004)
	class UParticleSystemComponent*                    ImpactEffectComponent;                                    // 0x0258(0x0004)
	class UAudioComponent*                             ImpactSoundComponent;                                     // 0x025C(0x0004)
	class UAudioComponent*                             ImpactSoundComponent2;                                    // 0x0260(0x0004)
	float                                              LastImpactTime;                                           // 0x0264(0x0004)
	struct FPhysEffectInfo                             ImpactEffectInfo;                                         // 0x0268(0x0010)
	class UParticleSystemComponent*                    SlideEffectComponent;                                     // 0x0278(0x0004)
	class UAudioComponent*                             SlideSoundComponent;                                      // 0x027C(0x0004)
	float                                              LastSlideTime;                                            // 0x0280(0x0004)
	struct FPhysEffectInfo                             SlideEffectInfo;                                          // 0x0284(0x0010)
	float                                              StayUprightTorqueFactor;                                  // 0x0294(0x0004)
	float                                              StayUprightMaxTorque;                                     // 0x0298(0x0004)
	float                                              MaxPhysicsVelocity;                                       // 0x029C(0x0004)
	struct FRigidBodyState                             RBState;                                                  // 0x02A0(0x0040)
	float                                              AngErrorAccumulator;                                      // 0x02E0(0x0004)
	struct FVector                                     ReplicatedDrawScale3D;                                    // 0x02E4(0x000C) (Edit)
	struct FVector                                     InitialLocation;                                          // 0x02F0(0x000C)
	struct FRotator                                    InitialRotation;                                          // 0x02FC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActor");
		return ptr;
	}


	void Reset();
	void OnTeleport();
	void OnToggle();
	void TakeRadiusDamage();
	void TakeDamage();
	void ApplyImpulse();
	void ReplicatedEvent();
	void SpawnedByKismet();
	void SetPhysicalCollisionProperties();
	void Destroyed();
	void FellOutOfWorld();
	void PostBeginPlay();
	void ResolveRBState();
	void GetKActorPhysMaterial();
};


// Class Engine.KActorSpawnable
// 0x0004 (0x030C - 0x0308)
class AKActorSpawnable : public AKActor
{
public:
	unsigned long                                      bRecycleScaleToZero : 1;                                  // 0x0308(0x0004)
	unsigned long                                      bScalingToZero : 1;                                       // 0x0308(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActorSpawnable");
		return ptr;
	}


	void ResetComponents();
	void RecycleInternal();
	void Recycle();
	void Initialize();
	void Tick();
};


// Class Engine.KAsset
// 0x0010 (0x022C - 0x021C)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x021C(0x0004)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x0220(0x0004)
	unsigned long                                      bWakeOnLevelStart : 1;                                    // 0x0220(0x0004)
	unsigned long                                      bBlockPawns : 1;                                          // 0x0220(0x0004)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x0224(0x0004) (Edit)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                      // 0x0228(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KAsset");
		return ptr;
	}


	void DoKismetAttachment();
	void OnTeleport();
	void OnToggle();
	void TakeRadiusDamage();
	void TakeDamage();
	void ReplicatedEvent();
	void SetMeshAndPhysAsset();
	void PostBeginPlay();
};


// Class Engine.Pawn
// 0x026C (0x0488 - 0x021C)
class APawn : public AActor
{
public:
	float                                              MaxStepHeight;                                            // 0x021C(0x0004)
	float                                              MaxJumpHeight;                                            // 0x0220(0x0004)
	float                                              WalkableFloorZ;                                           // 0x0224(0x0004)
	float                                              LedgeCheckThreshold;                                      // 0x0228(0x0004)
	class AController*                                 Controller;                                               // 0x022C(0x0004) (Edit)
	class APawn*                                       NextPawn;                                                 // 0x0230(0x0004)
	float                                              NetRelevancyTime;                                         // 0x0234(0x0004)
	class APlayerController*                           LastRealViewer;                                           // 0x0238(0x0004)
	class AActor*                                      LastViewer;                                               // 0x023C(0x0004)
	unsigned long                                      bUpAndOut : 1;                                            // 0x0240(0x0004)
	unsigned long                                      bIsWalking : 1;                                           // 0x0240(0x0004)
	unsigned long                                      bWantsToCrouch : 1;                                       // 0x0240(0x0004)
	unsigned long                                      bIsCrouched : 1;                                          // 0x0240(0x0004)
	unsigned long                                      bTryToUncrouch : 1;                                       // 0x0240(0x0004)
	unsigned long                                      bCanCrouch : 1;                                           // 0x0240(0x0004)
	unsigned long                                      bAirBrakingAcceleration : 1;                              // 0x0240(0x0004)
	unsigned long                                      bCrawler : 1;                                             // 0x0240(0x0004)
	unsigned long                                      bReducedSpeed : 1;                                        // 0x0240(0x0004)
	unsigned long                                      bJumpCapable : 1;                                         // 0x0240(0x0004)
	unsigned long                                      bCanJump : 1;                                             // 0x0240(0x0004)
	unsigned long                                      bCanWalk : 1;                                             // 0x0240(0x0004)
	unsigned long                                      bCanSwim : 1;                                             // 0x0240(0x0004)
	unsigned long                                      bCanFly : 1;                                              // 0x0240(0x0004)
	unsigned long                                      bCanClimbLadders : 1;                                     // 0x0240(0x0004)
	unsigned long                                      bCanStrafe : 1;                                           // 0x0240(0x0004)
	unsigned long                                      bAvoidLedges : 1;                                         // 0x0240(0x0004)
	unsigned long                                      bStopAtLedges : 1;                                        // 0x0240(0x0004)
	unsigned long                                      bAllowLedgeOverhang : 1;                                  // 0x0240(0x0004)
	unsigned long                                      bSimulateGravity : 1;                                     // 0x0240(0x0004)
	unsigned long                                      bIgnoreForces : 1;                                        // 0x0240(0x0004)
	unsigned long                                      bCanWalkOffLedges : 1;                                    // 0x0240(0x0004)
	unsigned long                                      bCanBeBaseForPawns : 1;                                   // 0x0240(0x0004)
	unsigned long                                      bSimGravityDisabled : 1;                                  // 0x0240(0x0004)
	unsigned long                                      bDirectHitWall : 1;                                       // 0x0240(0x0004)
	unsigned long                                      bPushesRigidBodies : 1;                                   // 0x0240(0x0004)
	unsigned long                                      bForceFloorCheck : 1;                                     // 0x0240(0x0004)
	unsigned long                                      bForceKeepAnchor : 1;                                     // 0x0240(0x0004)
	unsigned long                                      bCanMantle : 1;                                           // 0x0240(0x0004)
	unsigned long                                      bCanClimbUp : 1;                                          // 0x0240(0x0004)
	unsigned long                                      bCanClimbCeilings : 1;                                    // 0x0240(0x0004)
	unsigned long                                      bCanSwatTurn : 1;                                         // 0x0240(0x0004)
	unsigned long                                      bCanLeap : 1;                                             // 0x0244(0x0004)
	unsigned long                                      bCanCoverSlip : 1;                                        // 0x0244(0x0004)
	unsigned long                                      useOptimizedMovementPhysics : 1;                          // 0x0244(0x0004)
	unsigned long                                      bDisplayPathErrors : 1;                                   // 0x0244(0x0004)
	unsigned long                                      bIsFemale : 1;                                            // 0x0244(0x0004)
	unsigned long                                      bCanPickupInventory : 1;                                  // 0x0244(0x0004)
	unsigned long                                      bAmbientCreature : 1;                                     // 0x0244(0x0004)
	unsigned long                                      bLOSHearing : 1;                                          // 0x0244(0x0004)
	unsigned long                                      bMuffledHearing : 1;                                      // 0x0244(0x0004)
	unsigned long                                      bDontPossess : 1;                                         // 0x0244(0x0004)
	unsigned long                                      bAutoFire : 1;                                            // 0x0244(0x0004)
	unsigned long                                      bRollToDesired : 1;                                       // 0x0244(0x0004)
	unsigned long                                      bStationary : 1;                                          // 0x0244(0x0004)
	unsigned long                                      bCachedRelevant : 1;                                      // 0x0244(0x0004)
	unsigned long                                      bSpecialHUD : 1;                                          // 0x0244(0x0004)
	unsigned long                                      bNoWeaponFiring : 1;                                      // 0x0244(0x0004)
	unsigned long                                      bCanUse : 1;                                              // 0x0244(0x0004)
	unsigned long                                      bModifyReachSpecCost : 1;                                 // 0x0244(0x0004)
	unsigned long                                      bModifyNavPointDest : 1;                                  // 0x0244(0x0004)
	unsigned long                                      bPathfindsAsVehicle : 1;                                  // 0x0244(0x0004)
	unsigned long                                      bRunPhysicsWithNoController : 1;                          // 0x0244(0x0004)
	unsigned long                                      bForceMaxAccel : 1;                                       // 0x0244(0x0004)
	unsigned long                                      bLimitFallAccel : 1;                                      // 0x0244(0x0004)
	unsigned long                                      bReplicateHealthToAll : 1;                                // 0x0244(0x0004)
	unsigned long                                      bReplicateAccelRate : 1;                                  // 0x0244(0x0004)
	unsigned long                                      bForceRMVelocity : 1;                                     // 0x0244(0x0004)
	unsigned long                                      bForceRegularVelocity : 1;                                // 0x0244(0x0004)
	unsigned long                                      bPlayedDeath : 1;                                         // 0x0244(0x0004)
	unsigned long                                      bDesiredRotationSet : 1;                                  // 0x0244(0x0004)
	unsigned long                                      bLockDesiredRotation : 1;                                 // 0x0244(0x0004)
	unsigned long                                      bUnlockWhenReached : 1;                                   // 0x0244(0x0004)
	unsigned long                                      bNeedsBaseTickedFirst : 1;                                // 0x0244(0x0004)
	unsigned long                                      bRootMotionFromInterpCurve : 1;                           // 0x0248(0x0004)
	unsigned long                                      bDebugShowCameraLocation : 1;                             // 0x0248(0x0004)
	unsigned long                                      bUseNavHandleForReachDestination : 1;                     // 0x0248(0x0004)
	float                                              UncrouchTime;                                             // 0x024C(0x0004)
	float                                              CrouchHeight;                                             // 0x0250(0x0004)
	float                                              CrouchRadius;                                             // 0x0254(0x0004)
	int                                                FullHeight;                                               // 0x0258(0x0004)
	float                                              NonPreferredVehiclePathMultiplier;                        // 0x025C(0x0004)
	TEnumAsByte<EPathSearchType>                       PathSearchType;                                           // 0x0260(0x0001)
	unsigned char                                      RemoteViewPitch;                                          // 0x0261(0x0001)
	unsigned char                                      FlashCount;                                               // 0x0262(0x0001) (Edit)
	unsigned char                                      FiringMode;                                               // 0x0263(0x0001) (Edit)
	TEnumAsByte<EPhysics>                              PhysicsToIgnoreMoveToward;                                // 0x0264(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0265(0x0003) MISSED OFFSET
	class UPathConstraint*                             PathConstraintList;                                       // 0x0268(0x0004)
	class UPathGoalEvaluator*                          PathGoalList;                                             // 0x026C(0x0004)
	float                                              DesiredSpeed;                                             // 0x0270(0x0004)
	float                                              MaxDesiredSpeed;                                          // 0x0274(0x0004)
	float                                              HearingThreshold;                                         // 0x0278(0x0004)
	float                                              Alertness;                                                // 0x027C(0x0004)
	float                                              SightRadius;                                              // 0x0280(0x0004)
	float                                              PeripheralVision;                                         // 0x0284(0x0004)
	float                                              AvgPhysicsTime;                                           // 0x0288(0x0004)
	float                                              Mass;                                                     // 0x028C(0x0004)
	float                                              Buoyancy;                                                 // 0x0290(0x0004)
	float                                              MeleeRange;                                               // 0x0294(0x0004)
	class ANavigationPoint*                            Anchor;                                                   // 0x0298(0x0004)
	int                                                AnchorItem;                                               // 0x029C(0x0004)
	class ANavigationPoint*                            LastAnchor;                                               // 0x02A0(0x0004)
	float                                              FindAnchorFailedTime;                                     // 0x02A4(0x0004)
	float                                              LastValidAnchorTime;                                      // 0x02A8(0x0004)
	float                                              DestinationOffset;                                        // 0x02AC(0x0004)
	float                                              NextPathRadius;                                           // 0x02B0(0x0004)
	struct FVector                                     SerpentineDir;                                            // 0x02B4(0x000C)
	float                                              SerpentineDist;                                           // 0x02C0(0x0004)
	float                                              SerpentineTime;                                           // 0x02C4(0x0004)
	float                                              SpawnTime;                                                // 0x02C8(0x0004)
	int                                                MaxPitchLimit;                                            // 0x02CC(0x0004)
	float                                              GroundSpeed;                                              // 0x02D0(0x0004)
	float                                              WaterSpeed;                                               // 0x02D4(0x0004)
	float                                              AirSpeed;                                                 // 0x02D8(0x0004)
	float                                              LadderSpeed;                                              // 0x02DC(0x0004)
	float                                              AccelRate;                                                // 0x02E0(0x0004)
	float                                              JumpZ;                                                    // 0x02E4(0x0004)
	float                                              OutofWaterZ;                                              // 0x02E8(0x0004)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x02EC(0x0004)
	float                                              AirControl;                                               // 0x02F0(0x0004)
	float                                              WalkingPct;                                               // 0x02F4(0x0004)
	float                                              CrouchedPct;                                              // 0x02F8(0x0004)
	float                                              MaxFallSpeed;                                             // 0x02FC(0x0004)
	float                                              AIMaxFallSpeedFactor;                                     // 0x0300(0x0004)
	float                                              BaseEyeHeight;                                            // 0x0304(0x0004)
	float                                              EyeHeight;                                                // 0x0308(0x0004)
	struct FVector                                     Floor;                                                    // 0x030C(0x000C)
	float                                              SplashTime;                                               // 0x0318(0x0004)
	float                                              OldZ;                                                     // 0x031C(0x0004)
	class APhysicsVolume*                              HeadVolume;                                               // 0x0320(0x0004)
	int                                                Health;                                                   // 0x0324(0x0004) (Edit)
	int                                                HealthMax;                                                // 0x0328(0x0004)
	float                                              BreathTime;                                               // 0x032C(0x0004)
	float                                              UnderWaterTime;                                           // 0x0330(0x0004)
	float                                              LastPainTime;                                             // 0x0334(0x0004)
	struct FVector                                     RMVelocity;                                               // 0x0338(0x000C)
	struct FVector                                     noise1spot;                                               // 0x0344(0x000C)
	float                                              noise1time;                                               // 0x0350(0x0004)
	class APawn*                                       noise1other;                                              // 0x0354(0x0004)
	float                                              noise1loudness;                                           // 0x0358(0x0004)
	struct FVector                                     noise2spot;                                               // 0x035C(0x000C)
	float                                              noise2time;                                               // 0x0368(0x0004)
	class APawn*                                       noise2other;                                              // 0x036C(0x0004)
	float                                              noise2loudness;                                           // 0x0370(0x0004)
	float                                              SoundDampening;                                           // 0x0374(0x0004)
	float                                              DamageScaling;                                            // 0x0378(0x0004)
	struct FString                                     MenuName;                                                 // 0x037C(0x000C)
	class UClass*                                      ControllerClass;                                          // 0x0388(0x0004)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x038C(0x0004) (Edit)
	class ALadderVolume*                               OnLadder;                                                 // 0x0390(0x0004)
	struct FName                                       LandMovementState;                                        // 0x0394(0x0008)
	struct FName                                       WaterMovementState;                                       // 0x039C(0x0008)
	class APlayerStart*                                LastStartSpot;                                            // 0x03A4(0x0004)
	float                                              LastStartTime;                                            // 0x03A8(0x0004)
	struct FVector                                     TakeHitLocation;                                          // 0x03AC(0x000C)
	class UClass*                                      HitDamageType;                                            // 0x03B8(0x0004)
	struct FVector                                     TearOffMomentum;                                          // 0x03BC(0x000C)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x03C8(0x0004)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x03CC(0x0004)
	float                                              RBPushRadius;                                             // 0x03D0(0x0004)
	float                                              RBPushStrength;                                           // 0x03D4(0x0004)
	class AVehicle*                                    DrivenVehicle;                                            // 0x03D8(0x0004) (Edit)
	float                                              AlwaysRelevantDistanceSquared;                            // 0x03DC(0x0004)
	float                                              VehicleCheckRadius;                                       // 0x03E0(0x0004)
	class AController*                                 LastHitBy;                                                // 0x03E4(0x0004)
	float                                              ViewPitchMin;                                             // 0x03E8(0x0004)
	float                                              ViewPitchMax;                                             // 0x03EC(0x0004)
	int                                                AllowedYawError;                                          // 0x03F0(0x0004)
	struct FRotator                                    DesiredRotation;                                          // 0x03F4(0x000C)
	class UClass*                                      InventoryManagerClass;                                    // 0x0400(0x0004)
	class AInventoryManager*                           InvManager;                                               // 0x0404(0x0004) (Edit)
	class AWeapon*                                     Weapon;                                                   // 0x0408(0x0004)
	struct FVector                                     FlashLocation;                                            // 0x040C(0x000C) (Edit)
	struct FVector                                     LastFiringFlashLocation;                                  // 0x0418(0x000C)
	int                                                ShotCount;                                                // 0x0424(0x0004)
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                             // 0x0428(0x0004)
	class URB_BodyInstance*                            PhysicsPushBody;                                          // 0x042C(0x0004)
	int                                                FailedLandingCount;                                       // 0x0430(0x0004)
	TArray<class UAnimNodeSlot*>                       SlotNodes;                                                // 0x0434(0x000C)
	TArray<class UInterpGroup*>                        InterpGroupList;                                          // 0x0440(0x000C)
	class UAudioComponent*                             FacialAudioComp;                                          // 0x044C(0x0004)
	class UMaterialInstanceConstant*                   MIC_PawnMat;                                              // 0x0450(0x0004)
	class UMaterialInstanceConstant*                   MIC_PawnHair;                                             // 0x0454(0x0004)
	struct FRootMotionCurve                            RootMotionInterpCurve;                                    // 0x0458(0x001C)
	float                                              RootMotionInterpRate;                                     // 0x0474(0x0004)
	float                                              RootMotionInterpCurrentTime;                              // 0x0478(0x0004)
	struct FVector                                     RootMotionInterpCurveLastValue;                           // 0x047C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}


	void SetDiedDamageCauser();
	void GetTrueController();
	void SetRootMotionInterpCurrentTime();
	void SetCinematicMode();
	void ZeroMovementVariables();
	void ClearPathStep();
	void DrawPathStep();
	void IncrementPathChild();
	void IncrementPathStep();
	void CreatePathGoalEvaluator();
	void CreatePathConstraint();
	void AddGoalEvaluator();
	void AddPathConstraint();
	void ClearConstraints();
	void SoakPause();
	void BecomeViewTarget();
	void AdjustCameraScale();
	void MessagePlayer();
	void EffectIsRelevant();
	void OnTeleport();
	void OnSetMaterial();
	void GetDamageScaling();
	void DoKismetAttachment();
	void SpawnedByKismet();
	void IsStationary();
	void GetCollisionExtent();
	void GetCollisionHeight();
	void GetCollisionRadius();
	void CheatFly();
	void CheatGhost();
	void CheatWalk();
	void PlayWeaponSwitch();
	void SetActiveWeapon();
	void TossInventory();
	void ThrowActiveWeapon();
	void DrawHUD();
	void FindInventoryType();
	void CreateInventory();
	void AddDefaultInventory();
	void StopDriving();
	void StartDriving();
	void CanThrowWeapon();
	void Suicide();
	void GetVehicleBase();
	void PlayLanded();
	void CannotJumpNow();
	void PlayFootStepSound();
	void TornOff();
	void PlayDying();
	void SetDyingPhysics();
	void TurnOff();
	void PlayHit();
	void PlayDyingSound();
	void DoJump();
	void CheckWaterJump();
	void TakeDrowningDamage();
	void BreathTimer();
	void IsInPain();
	void TouchingWaterVolume();
	void HeadVolumeChange();
	void Landed();
	void Falling();
	void Died();
	void ThrowWeaponOnDeath();
	void IsSameTeam();
	void GetTeam();
	void GetTeamNum();
	void TakeDamage();
	void SetKillInstigator();
	void NotifyTakeHit();
	void TakeRadiusDamageOnBones();
	void PruneDamagedBoneList();
	void HealDamage();
	void AdjustDamage();
	void SetMovementPhysics();
	void Gasp();
	void OnGiveInventory();
	void OnAssignController();
	void ReceivedNewEvent();
	void SpawnDefaultController();
	void PostBeginPlay();
	void PreBeginPlay();
	void Destroyed();
	void DetachFromController();
	void CrushedBy();
	void CanBeBaseForPawn();
	void BaseChange();
	void StuckOnPawn();
	void JumpOffPawn();
	void gibbedBy();
	void EncroachedBy();
	void EncroachingOn();
	void FaceRotation();
	void UpdatePawnRotation();
	void ClientSetRotation();
	void ClientSetLocation();
	void ClientRestart();
	void Restart();
	void TakeFallingDamage();
	void KilledBy();
	void AddVelocity();
	void HandleMomentum();
	void RestartPlayer();
	void StartCrouch();
	void EndCrouch();
	void ShouldCrouch();
	void UnCrouch();
	void OutsideWorldBounds();
	void FellOutOfWorld();
	void ModifyVelocity();
	void JumpOutOfWater();
	void FinishedInterpolation();
	void ClientMessage();
	void ReceiveLocalizedMessage();
	void HandlePickup();
	void AdjustedStrength();
	void LineOfSightTo();
	void SetMoveTarget();
	void GetMoveTarget();
	void NearMoveTarget();
	void AffectedByHitEffects();
	void InGodMode();
	void PawnCalcCamera();
	void SetViewRotation();
	void GetAdjustedAimFor();
	void InFreeCam();
	void GetBaseAimRotation();
	void GetWeaponStartTraceLocation();
	void GetPawnViewLocation();
	void GetViewRotation();
	void GetActorEyesViewPoint();
	void ProcessViewRotation();
	void IsFirstPerson();
	void WasPlayerPawn();
	void IsPlayerPawn();
	void IsLocallyControlled();
	void IsHumanControlled();
	void DisplayDebug();
	void ClimbLadder();
	void EndClimbLadder();
	void CanSplash();
	void SetWalking();
	void RangedAttackTime();
	void RecommendLongRangedAttack();
	void CanGrabLadder();
	void DropToGround();
	void GetDefaultCameraMode();
	void UnPossessed();
	void UpdateControllerOnPossess();
	void PossessedBy();
	void NotifyTeamChanged();
	void PlayTeleportEffect();
	void GetHumanReadableName();
	void NeedToTurn();
	void IsFiring();
	void HasRangedAttack();
	void FireOnRelease();
	void TooCloseToAttack();
	void CanAttack();
	void ChooseFireMode();
	void BotFire();
	void WeaponStoppedFiring();
	void WeaponFired();
	void FlashLocationUpdated();
	void Internal_ClearFlashLocation();
	void ClearFlashLocation();
	void Internal_SetFlashLocation();
	void SetFlashLocation();
	void Internal_ClearFlashCount();
	void ClearFlashCount();
	void FlashCountUpdated();
	void Internal_IncrementFlashCount();
	void IncrementFlashCount();
	void FiringModeUpdated();
	void Internal_SetFiringMode();
	void SetFiringMode();
	void GetWeaponFiringMode();
	void StopFire();
	void StartFire();
	void StopFiring();
	void Reset();
	void PlayerChangedTeam();
	void SetBaseEyeheight();
	void SpecialMoveThruEdge();
	void SpecialMoveTo();
	void TermRagdoll();
	void InitRagdoll();
	void IsValidEnemy();
	void SpecialCostForPath();
	void GetBoundingCylinder();
	void ReachedDesiredRotation();
	void SetPushesRigidBodies();
	void ForceCrouch();
	void ReachedPoint();
	void ReachedDestination();
	void GetBestAnchor();
	void SetAnchor();
	void SetRemoteViewPitch();
	void IsInvisible();
	void IsValidEnemyTargetFor();
	void IsValidTargetFor();
	void GetFallDuration();
	void SuggestJumpVelocity();
	void ValidAnchor();
	void AdjustDestination();
	void IsAliveAndWell();
	void ReplicatedEvent();
	void SetSkelControlScale();
	void SetMorphWeight();
	void GetActorFaceFXAsset();
	void FaceFXAudioFinished();
	void OnPlayFaceFXAnim();
	void CanActorPlayFaceFXAnim();
	void IsActorPlayingFaceFXAnim();
	void GetFaceFXAudioComponent();
	void StopActorFaceFXAnim();
	void PlayActorFaceFXAnim();
	void MAT_BeginAIGroup();
	void InterpolationFinished();
	void InterpolationStarted();
	void MAT_SetSkelControlScale();
	void MAT_SetMorphWeight();
	void MAT_SetAnimWeights();
	void MAT_SetAnimPosition();
	void SetAnimPosition();
	void MAT_FinishAnimControl();
	void FinishAnimControl();
	void MAT_BeginAnimControl();
	void BeginAnimControl();
	void RestoreAnimSetsToDefault();
	void AnimSetListUpdated();
	void AddAnimSets();
	void BuildScriptAnimSetList();
	void UpdateAnimSetList();
	void ClearAnimNodes();
	void CacheAnimNodes();
	void PostInitAnimTree();
	void IsDesiredRotationLocked();
	void IsDesiredRotationInUse();
	void CheckDesiredRotation();
	void ResetDesiredRotation();
	void LockDesiredRotation();
	void SetDesiredRotation();
};


// Class Engine.Vehicle
// 0x0074 (0x04FC - 0x0488)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                                   // 0x0488(0x0004) (Edit)
	unsigned long                                      bDriving : 1;                                             // 0x048C(0x0004) (Edit)
	unsigned long                                      bDriverIsVisible : 1;                                     // 0x048C(0x0004)
	unsigned long                                      bAttachDriver : 1;                                        // 0x048C(0x0004)
	unsigned long                                      bTurnInPlace : 1;                                         // 0x048C(0x0004)
	unsigned long                                      bSeparateTurretFocus : 1;                                 // 0x048C(0x0004)
	unsigned long                                      bFollowLookDir : 1;                                       // 0x048C(0x0004)
	unsigned long                                      bHasHandbrake : 1;                                        // 0x048C(0x0004)
	unsigned long                                      bScriptedRise : 1;                                        // 0x048C(0x0004)
	unsigned long                                      bDuckObstacles : 1;                                       // 0x048C(0x0004)
	unsigned long                                      bAvoidReversing : 1;                                      // 0x048C(0x0004)
	unsigned long                                      bRetryPathfindingWithDriver : 1;                          // 0x048C(0x0004)
	unsigned long                                      bIgnoreStallZ : 1;                                        // 0x048C(0x0004)
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                           // 0x048C(0x0004)
	TArray<struct FVector>                             ExitPositions;                                            // 0x0490(0x000C)
	float                                              ExitRadius;                                               // 0x049C(0x0004)
	struct FVector                                     ExitOffset;                                               // 0x04A0(0x000C)
	float                                              Steering;                                                 // 0x04AC(0x0004)
	float                                              Throttle;                                                 // 0x04B0(0x0004)
	float                                              Rise;                                                     // 0x04B4(0x0004)
	struct FVector                                     TargetLocationAdjustment;                                 // 0x04B8(0x000C)
	float                                              DriverDamageMult;                                         // 0x04C4(0x0004)
	float                                              MomentumMult;                                             // 0x04C8(0x0004)
	class UClass*                                      CrushedDamageType;                                        // 0x04CC(0x0004)
	float                                              MinCrushSpeed;                                            // 0x04D0(0x0004)
	float                                              ForceCrushPenetration;                                    // 0x04D4(0x0004)
	unsigned char                                      StuckCount;                                               // 0x04D8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04D9(0x0003) MISSED OFFSET
	float                                              ThrottleTime;                                             // 0x04DC(0x0004)
	float                                              StuckTime;                                                // 0x04E0(0x0004)
	float                                              OldSteering;                                              // 0x04E4(0x0004)
	float                                              OnlySteeringStartTime;                                    // 0x04E8(0x0004)
	float                                              OldThrottle;                                              // 0x04EC(0x0004)
	float                                              AIMoveCheckTime;                                          // 0x04F0(0x0004)
	float                                              VehicleMovingTime;                                        // 0x04F4(0x0004)
	float                                              TurnTime;                                                 // 0x04F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Vehicle");
		return ptr;
	}


	void ZeroMovementVariables();
	void NotifyDriverTakeHit();
	void ReplicatedEvent();
	void DrivingStatusChanged();
	void HandleDeadVehicleDriver();
	void SetDriving();
	void GetEntryLocation();
	void CrushedBy();
	void PancakeOther();
	void EncroachingOn();
	void GetCollisionDamageInstigator();
	void EncroachedBy();
	void FaceRotation();
	void GetDefaultCameraMode();
	void PlayDying();
	void DriverDied();
	void Died();
	void ThrowActiveWeapon();
	void AdjustDriverDamage();
	void TakeDamage();
	void SetKillInstigator();
	void UnPossessed();
	void TryExitPos();
	void FindAutoExit();
	void PlaceExitingDriver();
	void DriverLeft();
	void SetInputs();
	void DriverLeave();
	void GetExitRotation();
	void ContinueOnFoot();
	void DetachDriver();
	void AttachDriver();
	void EntryAnnouncement();
	void PossessedBy();
	void DriverEnter();
	void TryToDrive();
	void AnySeatAvailable();
	void CanEnterVehicle();
	void Destroyed_HandleDriver();
	void Destroyed();
	void CheatFly();
	void CheatGhost();
	void CheatWalk();
	void PostBeginPlay();
	void SetBaseEyeheight();
	void PlayerChangedTeam();
	void DriverRadiusDamage();
	void TakeRadiusDamage();
	void GetTargetLocation();
	void Suicide();
	void DisplayDebug();
	void NotifyTeamChanged();
};


// Class Engine.SVehicle
// 0x011C (0x0618 - 0x04FC)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                                   // 0x04FC(0x0004)
	TArray<class USVehicleWheel*>                      Wheels;                                                   // 0x0500(0x000C)
	struct FVector                                     COMOffset;                                                // 0x050C(0x000C)
	struct FVector                                     InertiaTensorMultiplier;                                  // 0x0518(0x000C)
	unsigned long                                      bStayUpright : 1;                                         // 0x0524(0x0004)
	unsigned long                                      bUseSuspensionAxis : 1;                                   // 0x0524(0x0004)
	unsigned long                                      bUpdateWheelShapes : 1;                                   // 0x0524(0x0004)
	unsigned long                                      bVehicleOnGround : 1;                                     // 0x0524(0x0004)
	unsigned long                                      bVehicleOnWater : 1;                                      // 0x0524(0x0004)
	unsigned long                                      bIsInverted : 1;                                          // 0x0524(0x0004)
	unsigned long                                      bChassisTouchingGround : 1;                               // 0x0524(0x0004)
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;                    // 0x0524(0x0004)
	unsigned long                                      bCanFlip : 1;                                             // 0x0524(0x0004)
	unsigned long                                      bFlipRight : 1;                                           // 0x0524(0x0004)
	unsigned long                                      bIsUprighting : 1;                                        // 0x0524(0x0004)
	unsigned long                                      bOutputHandbrake : 1;                                     // 0x0524(0x0004)
	unsigned long                                      bHoldingDownHandbrake : 1;                                // 0x0524(0x0004)
	float                                              StayUprightRollResistAngle;                               // 0x0528(0x0004)
	float                                              StayUprightPitchResistAngle;                              // 0x052C(0x0004)
	float                                              StayUprightStiffness;                                     // 0x0530(0x0004)
	float                                              StayUprightDamping;                                       // 0x0534(0x0004)
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                               // 0x0538(0x0004)
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                            // 0x053C(0x0004)
	float                                              HeavySuspensionShiftPercent;                              // 0x0540(0x0004)
	float                                              MaxSpeed;                                                 // 0x0544(0x0004)
	float                                              MaxAngularVelocity;                                       // 0x0548(0x0004)
	float                                              TimeOffGround;                                            // 0x054C(0x0004)
	float                                              UprightLiftStrength;                                      // 0x0550(0x0004)
	float                                              UprightTorqueStrength;                                    // 0x0554(0x0004)
	float                                              UprightTime;                                              // 0x0558(0x0004)
	float                                              UprightStartTime;                                         // 0x055C(0x0004)
	class UAudioComponent*                             EngineSound;                                              // 0x0560(0x0004)
	class UAudioComponent*                             SquealSound;                                              // 0x0564(0x0004)
	class USoundCue*                                   CollisionSound;                                           // 0x0568(0x0004)
	class USoundCue*                                   EnterVehicleSound;                                        // 0x056C(0x0004)
	class USoundCue*                                   ExitVehicleSound;                                         // 0x0570(0x0004)
	float                                              CollisionIntervalSecs;                                    // 0x0574(0x0004)
	float                                              SquealThreshold;                                          // 0x0578(0x0004)
	float                                              SquealLatThreshold;                                       // 0x057C(0x0004)
	float                                              LatAngleVolumeMult;                                       // 0x0580(0x0004)
	float                                              EngineStartOffsetSecs;                                    // 0x0584(0x0004)
	float                                              EngineStopOffsetSecs;                                     // 0x0588(0x0004)
	float                                              LastCollisionSoundTime;                                   // 0x058C(0x0004)
	float                                              OutputBrake;                                              // 0x0590(0x0004)
	float                                              OutputGas;                                                // 0x0594(0x0004)
	float                                              OutputSteering;                                           // 0x0598(0x0004)
	float                                              OutputRise;                                               // 0x059C(0x0004)
	float                                              ForwardVel;                                               // 0x05A0(0x0004)
	int                                                NumPoweredWheels;                                         // 0x05A4(0x0004)
	struct FVector                                     BaseOffset;                                               // 0x05A8(0x000C)
	float                                              CamDist;                                                  // 0x05B4(0x0004)
	int                                                DriverViewPitch;                                          // 0x05B8(0x0004)
	int                                                DriverViewYaw;                                            // 0x05BC(0x0004)
	struct FVehicleState                               VState;                                                   // 0x05C0(0x0050)
	float                                              AngErrorAccumulator;                                      // 0x0610(0x0004)
	float                                              RadialImpulseScaling;                                     // 0x0614(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicle");
		return ptr;
	}


	void SetAllWheelParticleSystem();
	void GetSVehicleDebug();
	void HermiteEval();
	void DisplayWheelsDebug();
	void DisplayDebug();
	void PostTeleport();
	void SuspensionHeavyShift();
	void RigidBodyCollision();
	void DrivingStatusChanged();
	void VehiclePlayExitSound();
	void VehiclePlayEnterSound();
	void StopEngineSoundTimed();
	void StopEngineSound();
	void StartEngineSoundTimed();
	void StartEngineSound();
	void HasWheelsOnGround();
	void TryToDrive();
	void GetDefaultCameraMode();
	void CalcCamera();
	void Died();
	void AddVelocity();
	void InitVehicleRagdoll();
	void TakeRadiusDamage();
	void StopVehicleSounds();
	void TurnOff();
	void Destroyed();
	void PostInitAnimTree();
	void PostBeginPlay();
	void SetWheelCollision();
	void IsSleeping();
	void AddTorque();
	void AddImpulse();
	void AddForce();
};


// Class Engine.RB_ConstraintActor
// 0x001C (0x0238 - 0x021C)
class ARB_ConstraintActor : public ARigidBodyBase
{
public:
	class AActor*                                      ConstraintActor1;                                         // 0x021C(0x0004)
	class AActor*                                      ConstraintActor2;                                         // 0x0220(0x0004)
	class URB_ConstraintSetup*                         ConstraintSetup;                                          // 0x0224(0x0004)
	class URB_ConstraintInstance*                      ConstraintInstance;                                       // 0x0228(0x0004)
	unsigned long                                      bDisableCollision : 1;                                    // 0x022C(0x0004)
	unsigned long                                      bUpdateActor1RefFrame : 1;                                // 0x022C(0x0004)
	unsigned long                                      bUpdateActor2RefFrame : 1;                                // 0x022C(0x0004)
	class AActor*                                      PulleyPivotActor1;                                        // 0x0230(0x0004)
	class AActor*                                      PulleyPivotActor2;                                        // 0x0234(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintActor");
		return ptr;
	}


	void OnToggleConstraintDrive();
	void OnToggle();
	void OnDestroy();
	void TermConstraint();
	void InitConstraint();
	void SetDisableCollision();
};


// Class Engine.RB_LineImpulseActor
// 0x0011 (0x022D - 0x021C)
class ARB_LineImpulseActor : public ARigidBodyBase
{
public:
	float                                              ImpulseStrength;                                          // 0x021C(0x0004)
	float                                              ImpulseRange;                                             // 0x0220(0x0004)
	unsigned long                                      bVelChange : 1;                                           // 0x0224(0x0004)
	unsigned long                                      bStopAtFirstHit : 1;                                      // 0x0224(0x0004)
	unsigned long                                      bCauseFracture : 1;                                       // 0x0224(0x0004)
	class UArrowComponent*                             Arrow;                                                    // 0x0228(0x0004)
	unsigned char                                      ImpulseCount;                                             // 0x022C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_LineImpulseActor");
		return ptr;
	}


	void ReplicatedEvent();
	void OnToggle();
	void FireLineImpulse();
};


// Class Engine.RB_RadialImpulseActor
// 0x0009 (0x0225 - 0x021C)
class ARB_RadialImpulseActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x021C(0x0004)
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                         // 0x0220(0x0004)
	unsigned char                                      ImpulseCount;                                             // 0x0224(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialImpulseActor");
		return ptr;
	}


	void ReplicatedEvent();
	void OnToggle();
};


// Class Engine.RB_Thruster
// 0x0008 (0x0224 - 0x021C)
class ARB_Thruster : public ARigidBodyBase
{
public:
	unsigned long                                      bThrustEnabled : 1;                                       // 0x021C(0x0004)
	float                                              ThrustStrength;                                           // 0x0220(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Thruster");
		return ptr;
	}


	void OnToggle();
};


// Class Engine.RB_ConstraintDrawComponent
// 0x0004 (0x01C8 - 0x01C4)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                            // 0x01C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintDrawComponent");
		return ptr;
	}

};


// Class Engine.RB_RadialImpulseComponent
// 0x0014 (0x01D8 - 0x01C4)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	TEnumAsByte<ERadialImpulseFalloff>                 ImpulseFalloff;                                           // 0x01C4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C5(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                          // 0x01C8(0x0004)
	float                                              ImpulseRadius;                                            // 0x01CC(0x0004)
	unsigned long                                      bVelChange : 1;                                           // 0x01D0(0x0004)
	unsigned long                                      bCauseFracture : 1;                                       // 0x01D0(0x0004)
	class UDrawSphereComponent*                        PreviewSphere;                                            // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialImpulseComponent");
		return ptr;
	}


	void FireImpulse();
};


// Class Engine.RB_Handle
// 0x0068 (0x00C8 - 0x0060)
class URB_Handle : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x0060(0x0004)
	struct FName                                       GrabbedBoneName;                                          // 0x0064(0x0008)
	int                                                SceneIndex;                                               // 0x006C(0x0004)
	unsigned long                                      bInHardware : 1;                                          // 0x0070(0x0004)
	unsigned long                                      bRotationConstrained : 1;                                 // 0x0070(0x0004)
	unsigned long                                      bInterpolating : 1;                                       // 0x0070(0x0004)
	struct FPointer                                    HandleData;                                               // 0x0074(0x0004)
	struct FPointer                                    KinActorData;                                             // 0x0078(0x0004)
	float                                              LinearDamping;                                            // 0x007C(0x0004)
	float                                              LinearStiffness;                                          // 0x0080(0x0004)
	struct FVector                                     LinearStiffnessScale3D;                                   // 0x0084(0x000C)
	struct FVector                                     LinearDampingScale3D;                                     // 0x0090(0x000C)
	float                                              AngularDamping;                                           // 0x009C(0x0004)
	float                                              AngularStiffness;                                         // 0x00A0(0x0004)
	struct FVector                                     Destination;                                              // 0x00A4(0x000C)
	struct FVector                                     StepSize;                                                 // 0x00B0(0x000C)
	struct FVector                                     Location;                                                 // 0x00BC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Handle");
		return ptr;
	}


	void GetOrientation();
	void SetOrientation();
	void UpdateSmoothLocation();
	void SetSmoothLocation();
	void SetLocation();
	void ReleaseComponent();
	void GrabComponent();
};


// Class Engine.RB_Spring
// 0x0050 (0x00B0 - 0x0060)
class URB_Spring : public UActorComponent
{
public:
	class UPrimitiveComponent*                         Component1;                                               // 0x0060(0x0004)
	struct FName                                       BoneName1;                                                // 0x0064(0x0008)
	class UPrimitiveComponent*                         Component2;                                               // 0x006C(0x0004)
	struct FName                                       BoneName2;                                                // 0x0070(0x0008)
	int                                                SceneIndex;                                               // 0x0078(0x0004)
	unsigned long                                      bInHardware : 1;                                          // 0x007C(0x0004)
	unsigned long                                      bEnableForceMassRatio : 1;                                // 0x007C(0x0004)
	struct FPointer                                    SpringData;                                               // 0x0080(0x0004)
	float                                              TimeSinceActivation;                                      // 0x0084(0x0004)
	float                                              MinBodyMass;                                              // 0x0088(0x0004)
	float                                              SpringSaturateDist;                                       // 0x008C(0x0004)
	float                                              SpringMaxForce;                                           // 0x0090(0x0004)
	float                                              MaxForceMassRatio;                                        // 0x0094(0x0004)
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                                  // 0x0098(0x0010)
	float                                              DampSaturateVel;                                          // 0x00A8(0x0004)
	float                                              DampMaxForce;                                             // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Spring");
		return ptr;
	}


	void Clear();
	void SetComponents();
};


// Class Engine.SVehicleSimBase
// 0x0038 (0x0098 - 0x0060)
class USVehicleSimBase : public UActorComponent
{
public:
	float                                              WheelSuspensionStiffness;                                 // 0x0060(0x0004)
	float                                              WheelSuspensionDamping;                                   // 0x0064(0x0004)
	float                                              WheelSuspensionBias;                                      // 0x0068(0x0004)
	float                                              WheelLongExtremumSlip;                                    // 0x006C(0x0004)
	float                                              WheelLongExtremumValue;                                   // 0x0070(0x0004)
	float                                              WheelLongAsymptoteSlip;                                   // 0x0074(0x0004)
	float                                              WheelLongAsymptoteValue;                                  // 0x0078(0x0004)
	float                                              WheelLatExtremumSlip;                                     // 0x007C(0x0004)
	float                                              WheelLatExtremumValue;                                    // 0x0080(0x0004)
	float                                              WheelLatAsymptoteSlip;                                    // 0x0084(0x0004)
	float                                              WheelLatAsymptoteValue;                                   // 0x0088(0x0004)
	float                                              WheelInertia;                                             // 0x008C(0x0004)
	unsigned long                                      bWheelSpeedOverride : 1;                                  // 0x0090(0x0004)
	unsigned long                                      bClampedFrictionModel : 1;                                // 0x0090(0x0004)
	unsigned long                                      bAutoDrive : 1;                                           // 0x0090(0x0004)
	float                                              AutoDriveSteer;                                           // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimBase");
		return ptr;
	}

};


// Class Engine.SVehicleSimCar
// 0x0034 (0x00CC - 0x0098)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                                       // 0x0098(0x0004)
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                                       // 0x009C(0x0010)
	float                                              SteerSpeed;                                               // 0x00AC(0x0004)
	float                                              ReverseThrottle;                                          // 0x00B0(0x0004)
	float                                              EngineBrakeFactor;                                        // 0x00B4(0x0004)
	float                                              MaxBrakeTorque;                                           // 0x00B8(0x0004)
	float                                              StopThreshold;                                            // 0x00BC(0x0004)
	unsigned long                                      bIsDriving : 1;                                           // 0x00C0(0x0004)
	float                                              ActualSteering;                                           // 0x00C4(0x0004)
	float                                              TimeSinceThrottle;                                        // 0x00C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimCar");
		return ptr;
	}

};


// Class Engine.SVehicleSimTank
// 0x0030 (0x00FC - 0x00CC)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                             // 0x00CC(0x0004)
	float                                              RightTrackVel;                                            // 0x00D0(0x0004)
	float                                              LeftTrackTorque;                                          // 0x00D4(0x0004)
	float                                              RightTrackTorque;                                         // 0x00D8(0x0004)
	float                                              MaxEngineTorque;                                          // 0x00DC(0x0004)
	float                                              EngineDamping;                                            // 0x00E0(0x0004)
	float                                              InsideTrackTorqueFactor;                                  // 0x00E4(0x0004)
	float                                              SteeringLatStiffnessFactor;                               // 0x00E8(0x0004)
	float                                              TurnInPlaceThrottle;                                      // 0x00EC(0x0004)
	float                                              TurnMaxGripReduction;                                     // 0x00F0(0x0004)
	float                                              TurnGripScaleRate;                                        // 0x00F4(0x0004)
	unsigned long                                      bTurnInPlaceOnSteer : 1;                                  // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimTank");
		return ptr;
	}

};


// Class Engine.PhysicalMaterial
// 0x0064 (0x00A0 - 0x003C)
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                            // 0x003C(0x0004)
	float                                              Friction;                                                 // 0x0040(0x0004)
	float                                              Restitution;                                              // 0x0044(0x0004)
	unsigned long                                      bForceConeFriction : 1;                                   // 0x0048(0x0004)
	unsigned long                                      bEnableAnisotropicFriction : 1;                           // 0x0048(0x0004)
	struct FVector                                     AnisoFrictionDir;                                         // 0x004C(0x000C)
	float                                              FrictionV;                                                // 0x0058(0x0004)
	float                                              Density;                                                  // 0x005C(0x0004)
	float                                              AngularDamping;                                           // 0x0060(0x0004)
	float                                              LinearDamping;                                            // 0x0064(0x0004)
	float                                              MagneticResponse;                                         // 0x0068(0x0004)
	float                                              WindResponse;                                             // 0x006C(0x0004)
	float                                              ImpactThreshold;                                          // 0x0070(0x0004)
	float                                              ImpactReFireDelay;                                        // 0x0074(0x0004)
	class UParticleSystem*                             ImpactEffect;                                             // 0x0078(0x0004)
	class USoundCue*                                   ImpactSound;                                              // 0x007C(0x0004)
	float                                              SlideThreshold;                                           // 0x0080(0x0004)
	float                                              SlideReFireDelay;                                         // 0x0084(0x0004)
	class UParticleSystem*                             SlideEffect;                                              // 0x0088(0x0004)
	class USoundCue*                                   SlideSound;                                               // 0x008C(0x0004)
	class USoundCue*                                   FractureSoundExplosion;                                   // 0x0090(0x0004)
	class USoundCue*                                   FractureSoundSingle;                                      // 0x0094(0x0004)
	class UPhysicalMaterial*                           Parent;                                                   // 0x0098(0x0004)
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                 // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		return ptr;
	}


	void GetPhysicalMaterialProperty();
	void FindFractureSounds();
	void FindPhysEffectInfo();
};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x003C - 0x003C)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x0068 (0x00A4 - 0x003C)
class UPhysicsAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                          // 0x003C(0x0004) (ExportObject)
	TArray<class URB_BodySetup*>                       BodySetup;                                                // 0x0040(0x000C)
	struct FMap_Mirror                                 BodySetupIndexMap;                                        // 0x004C(0x003C)
	TArray<int>                                        BoundsBodies;                                             // 0x0088(0x000C)
	TArray<class URB_ConstraintSetup*>                 ConstraintSetup;                                          // 0x0094(0x000C)
	class UPhysicsAssetInstance*                       DefaultInstance;                                          // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}


	void FindBodyIndex();
};


// Class Engine.PhysicsAssetInstance
// 0x0078 (0x00B4 - 0x003C)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004)
	int                                                RootBodyIndex;                                            // 0x0040(0x0004)
	TArray<class URB_BodyInstance*>                    Bodies;                                                   // 0x0044(0x000C)
	TArray<class URB_ConstraintInstance*>              Constraints;                                              // 0x0050(0x000C)
	struct FMap_Mirror                                 CollisionDisableTable;                                    // 0x005C(0x003C)
	float                                              LinearSpringScale;                                        // 0x0098(0x0004)
	float                                              LinearDampingScale;                                       // 0x009C(0x0004)
	float                                              LinearForceLimitScale;                                    // 0x00A0(0x0004)
	float                                              AngularSpringScale;                                       // 0x00A4(0x0004)
	float                                              AngularDampingScale;                                      // 0x00A8(0x0004)
	float                                              AngularForceLimitScale;                                   // 0x00AC(0x0004)
	unsigned long                                      bInitBodies : 1;                                          // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAssetInstance");
		return ptr;
	}


	void FindConstraintInstance();
	void FindBodyInstance();
	void SetFullAnimWeightBonesFixed();
	void SetFullAnimWeightBlockRigidBody();
	void SetNamedBodiesBlockRigidBody();
	void SetNamedRBBoneSprings();
	void SetNamedMotorsAngularVelocityDrive();
	void SetNamedMotorsAngularPositionDrive();
	void SetAllMotorsAngularDriveParams();
	void SetAllMotorsAngularVelocityDrive();
	void SetAllMotorsAngularPositionDrive();
	void ForceAllBodiesBelowUnfixed();
	void SetNamedBodiesFixed();
	void SetAllBodiesFixed();
	void GetTotalMassBelowBone();
	void SetAngularDriveScale();
	void SetLinearDriveScale();
};


// Class Engine.PhysicsLODVerticalDestructible
// 0x0008 (0x0044 - 0x003C)
class UPhysicsLODVerticalDestructible : public UObject
{
public:
	int                                                MaxDynamicChunkCount;                                     // 0x003C(0x0004)
	float                                              DebrisLifetime;                                           // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsLODVerticalDestructible");
		return ptr;
	}

};


// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x0040 - 0x003C)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsLODVerticalEmitter");
		return ptr;
	}

};


// Class Engine.RB_BodyInstance
// 0x0060 (0x009C - 0x003C)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                           // 0x003C(0x0004)
	int                                                BodyIndex;                                                // 0x0040(0x0004)
	struct FVector                                     Velocity;                                                 // 0x0044(0x000C)
	struct FVector                                     PreviousVelocity;                                         // 0x0050(0x000C)
	int                                                SceneIndex;                                               // 0x005C(0x0004)
	struct FPointer                                    BodyData;                                                 // 0x0060(0x0004)
	struct FPointer                                    BoneSpring;                                               // 0x0064(0x0004)
	struct FPointer                                    BoneSpringKinActor;                                       // 0x0068(0x0004)
	unsigned long                                      bEnableBoneSpringLinear : 1;                              // 0x006C(0x0004)
	unsigned long                                      bEnableBoneSpringAngular : 1;                             // 0x006C(0x0004)
	unsigned long                                      bDisableOnOverextension : 1;                              // 0x006C(0x0004)
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                          // 0x006C(0x0004)
	unsigned long                                      bTeleportOnOverextension : 1;                             // 0x006C(0x0004)
	unsigned long                                      bUseKinActorForBoneSpring : 1;                            // 0x006C(0x0004)
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;                  // 0x006C(0x0004)
	unsigned long                                      bOnlyCollideWithPawns : 1;                                // 0x006C(0x0004)
	unsigned long                                      bEnableCollisionResponse : 1;                             // 0x006C(0x0004)
	unsigned long                                      bPushBody : 1;                                            // 0x006C(0x0004)
	unsigned long                                      bForceUnfixed : 1;                                        // 0x006C(0x0004)
	unsigned long                                      bInstanceAlwaysFullAnimWeight : 1;                        // 0x006C(0x0004)
	float                                              BoneLinearSpring;                                         // 0x0070(0x0004)
	float                                              BoneLinearDamping;                                        // 0x0074(0x0004)
	float                                              BoneAngularSpring;                                        // 0x0078(0x0004)
	float                                              BoneAngularDamping;                                       // 0x007C(0x0004)
	float                                              OverextensionThreshold;                                   // 0x0080(0x0004)
	float                                              CustomGravityFactor;                                      // 0x0084(0x0004)
	float                                              LastEffectPlayedTime;                                     // 0x0088(0x0004)
	class UPhysicalMaterial*                           PhysMaterialOverride;                                     // 0x008C(0x0004)
	float                                              ContactReportForceThreshold;                              // 0x0090(0x0004)
	float                                              InstanceMassScale;                                        // 0x0094(0x0004)
	float                                              InstanceDampingScale;                                     // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BodyInstance");
		return ptr;
	}


	void UpdateDampingProperties();
	void UpdateMassProperties();
	void SetContactReportForceThreshold();
	void EnableCollisionResponse();
	void SetPhysMaterialOverride();
	void SetBlockRigidBody();
	void SetBoneSpringTarget();
	void SetBoneSpringParams();
	void EnableBoneSpring();
	void GetUnrealWorldVelocityAtPoint();
	void GetUnrealWorldAngularVelocity();
	void GetUnrealWorldVelocity();
	void GetUnrealWorldTM();
	void GetPhysicsAssetInstance();
	void IsValidBodyInstance();
	void IsFixed();
	void SetFixed();
	void GetBodyMass();
};


// Class Engine.RB_ConstraintInstance
// 0x0070 (0x00AC - 0x003C)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004)
	class UPrimitiveComponent*                         OwnerComponent;                                           // 0x0040(0x0004)
	int                                                ConstraintIndex;                                          // 0x0044(0x0004)
	int                                                SceneIndex;                                               // 0x0048(0x0004)
	unsigned long                                      bInHardware : 1;                                          // 0x004C(0x0004)
	unsigned long                                      bLinearXPositionDrive : 1;                                // 0x004C(0x0004)
	unsigned long                                      bLinearXVelocityDrive : 1;                                // 0x004C(0x0004)
	unsigned long                                      bLinearYPositionDrive : 1;                                // 0x004C(0x0004)
	unsigned long                                      bLinearYVelocityDrive : 1;                                // 0x004C(0x0004)
	unsigned long                                      bLinearZPositionDrive : 1;                                // 0x004C(0x0004)
	unsigned long                                      bLinearZVelocityDrive : 1;                                // 0x004C(0x0004)
	unsigned long                                      bSwingPositionDrive : 1;                                  // 0x004C(0x0004)
	unsigned long                                      bSwingVelocityDrive : 1;                                  // 0x004C(0x0004)
	unsigned long                                      bTwistPositionDrive : 1;                                  // 0x004C(0x0004)
	unsigned long                                      bTwistVelocityDrive : 1;                                  // 0x004C(0x0004)
	unsigned long                                      bAngularSlerpDrive : 1;                                   // 0x004C(0x0004)
	unsigned long                                      bTerminated : 1;                                          // 0x004C(0x0004)
	struct FPointer                                    ConstraintData;                                           // 0x0050(0x0004)
	struct FVector                                     LinearPositionTarget;                                     // 0x0054(0x000C)
	struct FVector                                     LinearVelocityTarget;                                     // 0x0060(0x000C)
	float                                              LinearDriveSpring;                                        // 0x006C(0x0004)
	float                                              LinearDriveDamping;                                       // 0x0070(0x0004)
	float                                              LinearDriveForceLimit;                                    // 0x0074(0x0004)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	struct FQuat                                       AngularPositionTarget;                                    // 0x0080(0x0010)
	struct FVector                                     AngularVelocityTarget;                                    // 0x0090(0x000C)
	float                                              AngularDriveSpring;                                       // 0x009C(0x0004)
	float                                              AngularDriveDamping;                                      // 0x00A0(0x0004)
	float                                              AngularDriveForceLimit;                                   // 0x00A4(0x0004)
	struct FPointer                                    DummyKinActor;                                            // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintInstance");
		return ptr;
	}


	void MoveKinActorTransform();
	void SetLinearLimitSize();
	void SetAngularDOFLimitScale();
	void SetAngularDriveParams();
	void SetAngularVelocityTarget();
	void SetAngularPositionTarget();
	void SetLinearDriveParams();
	void SetLinearVelocityTarget();
	void SetLinearPositionTarget();
	void SetAngularVelocityDrive();
	void SetAngularPositionDrive();
	void SetLinearVelocityDrive();
	void SetLinearPositionDrive();
	void GetConstraintLocation();
	void GetPhysicsAssetInstance();
	void TermConstraint();
	void InitConstraint();
};


// Class Engine.RB_ConstraintSetup
// 0x00C4 (0x0100 - 0x003C)
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                                // 0x003C(0x0008)
	struct FName                                       ConstraintBone1;                                          // 0x0044(0x0008)
	struct FName                                       ConstraintBone2;                                          // 0x004C(0x0008)
	struct FVector                                     Pos1;                                                     // 0x0054(0x000C)
	struct FVector                                     PriAxis1;                                                 // 0x0060(0x000C)
	struct FVector                                     SecAxis1;                                                 // 0x006C(0x000C)
	struct FVector                                     Pos2;                                                     // 0x0078(0x000C)
	struct FVector                                     PriAxis2;                                                 // 0x0084(0x000C)
	struct FVector                                     SecAxis2;                                                 // 0x0090(0x000C)
	struct FVector                                     PulleyPivot1;                                             // 0x009C(0x000C)
	struct FVector                                     PulleyPivot2;                                             // 0x00A8(0x000C)
	unsigned long                                      bEnableProjection : 1;                                    // 0x00B4(0x0004)
	unsigned long                                      bLinearLimitSoft : 1;                                     // 0x00B4(0x0004)
	unsigned long                                      bLinearBreakable : 1;                                     // 0x00B4(0x0004)
	unsigned long                                      bSwingLimited : 1;                                        // 0x00B4(0x0004)
	unsigned long                                      bTwistLimited : 1;                                        // 0x00B4(0x0004)
	unsigned long                                      bSwingLimitSoft : 1;                                      // 0x00B4(0x0004)
	unsigned long                                      bTwistLimitSoft : 1;                                      // 0x00B4(0x0004)
	unsigned long                                      bAngularBreakable : 1;                                    // 0x00B4(0x0004)
	unsigned long                                      bIsPulley : 1;                                            // 0x00B4(0x0004)
	unsigned long                                      bMaintainMinDistance : 1;                                 // 0x00B4(0x0004)
	struct FLinearDOFSetup                             LinearXSetup;                                             // 0x00B8(0x0008)
	struct FLinearDOFSetup                             LinearYSetup;                                             // 0x00C0(0x0008)
	struct FLinearDOFSetup                             LinearZSetup;                                             // 0x00C8(0x0008)
	float                                              LinearLimitStiffness;                                     // 0x00D0(0x0004)
	float                                              LinearLimitDamping;                                       // 0x00D4(0x0004)
	float                                              LinearBreakThreshold;                                     // 0x00D8(0x0004)
	float                                              Swing1LimitAngle;                                         // 0x00DC(0x0004)
	float                                              Swing2LimitAngle;                                         // 0x00E0(0x0004)
	float                                              TwistLimitAngle;                                          // 0x00E4(0x0004)
	float                                              SwingLimitStiffness;                                      // 0x00E8(0x0004)
	float                                              SwingLimitDamping;                                        // 0x00EC(0x0004)
	float                                              TwistLimitStiffness;                                      // 0x00F0(0x0004)
	float                                              TwistLimitDamping;                                        // 0x00F4(0x0004)
	float                                              AngularBreakThreshold;                                    // 0x00F8(0x0004)
	float                                              PulleyRatio;                                              // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintSetup");
		return ptr;
	}

};


// Class Engine.RB_BSJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BSJointSetup");
		return ptr;
	}

};


// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_DistanceJointSetup");
		return ptr;
	}

};


// Class Engine.RB_HingeSetup
// 0x0000 (0x0100 - 0x0100)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_HingeSetup");
		return ptr;
	}

};


// Class Engine.RB_PrismaticSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PrismaticSetup");
		return ptr;
	}

};


// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PulleyJointSetup");
		return ptr;
	}

};


// Class Engine.RB_SkelJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_SkelJointSetup");
		return ptr;
	}

};


// Class Engine.RB_StayUprightSetup
// 0x0000 (0x0100 - 0x0100)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_StayUprightSetup");
		return ptr;
	}

};


// Class Engine.SVehicleWheel
// 0x00CC (0x0114 - 0x0048)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                                    // 0x0048(0x0004)
	float                                              MotorTorque;                                              // 0x004C(0x0004)
	float                                              BrakeTorque;                                              // 0x0050(0x0004)
	float                                              ChassisTorque;                                            // 0x0054(0x0004)
	unsigned long                                      bPoweredWheel : 1;                                        // 0x0058(0x0004)
	unsigned long                                      bHoverWheel : 1;                                          // 0x0058(0x0004)
	unsigned long                                      bCollidesVehicles : 1;                                    // 0x0058(0x0004)
	unsigned long                                      bCollidesPawns : 1;                                       // 0x0058(0x0004)
	unsigned long                                      bIsSquealing : 1;                                         // 0x0058(0x0004)
	unsigned long                                      bWheelOnGround : 1;                                       // 0x0058(0x0004)
	float                                              SteerFactor;                                              // 0x005C(0x0004)
	struct FName                                       SkelControlName;                                          // 0x0060(0x0008)
	class USkelControlWheel*                           WheelControl;                                             // 0x0068(0x0004)
	struct FName                                       BoneName;                                                 // 0x006C(0x0008)
	struct FVector                                     BoneOffset;                                               // 0x0074(0x000C)
	float                                              WheelRadius;                                              // 0x0080(0x0004)
	float                                              SuspensionTravel;                                         // 0x0084(0x0004)
	float                                              SuspensionSpeed;                                          // 0x0088(0x0004)
	class UParticleSystem*                             WheelParticleSystem;                                      // 0x008C(0x0004)
	TEnumAsByte<EWheelSide>                            Side;                                                     // 0x0090(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              LongSlipFactor;                                           // 0x0094(0x0004)
	float                                              LatSlipFactor;                                            // 0x0098(0x0004)
	float                                              HandbrakeLongSlipFactor;                                  // 0x009C(0x0004)
	float                                              HandbrakeLatSlipFactor;                                   // 0x00A0(0x0004)
	float                                              ParkedSlipFactor;                                         // 0x00A4(0x0004)
	struct FVector                                     WheelPosition;                                            // 0x00A8(0x000C)
	float                                              SpinVel;                                                  // 0x00B4(0x0004)
	float                                              LongSlipRatio;                                            // 0x00B8(0x0004)
	float                                              LatSlipAngle;                                             // 0x00BC(0x0004)
	struct FVector                                     ContactNormal;                                            // 0x00C0(0x000C)
	struct FVector                                     LongDirection;                                            // 0x00CC(0x000C)
	struct FVector                                     LatDirection;                                             // 0x00D8(0x000C)
	float                                              ContactForce;                                             // 0x00E4(0x0004)
	float                                              LongImpulse;                                              // 0x00E8(0x0004)
	float                                              LatImpulse;                                               // 0x00EC(0x0004)
	float                                              DesiredSuspensionPosition;                                // 0x00F0(0x0004)
	float                                              SuspensionPosition;                                       // 0x00F4(0x0004)
	float                                              CurrentRotation;                                          // 0x00F8(0x0004)
	struct FPointer                                    WheelShape;                                               // 0x00FC(0x0004)
	int                                                WheelMaterialIndex;                                       // 0x0100(0x0004)
	class UClass*                                      WheelPSCClass;                                            // 0x0104(0x0004)
	class UParticleSystemComponent*                    WheelParticleComp;                                        // 0x0108(0x0004)
	struct FName                                       SlipParticleParamName;                                    // 0x010C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleWheel");
		return ptr;
	}

};


// Class Engine.NxGenericForceFieldBrush
// 0x00CC (0x0324 - 0x0258)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int                                                ExcludeChannel;                                           // 0x0258(0x0004)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x025C(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0260(0x0001)
	TEnumAsByte<EFFB_ForceFieldCoordinates>            Coordinates;                                              // 0x0261(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0262(0x0002) MISSED OFFSET
	struct FVector                                     Constant;                                                 // 0x0264(0x000C)
	struct FVector                                     PositionMultiplierX;                                      // 0x0270(0x000C)
	struct FVector                                     PositionMultiplierY;                                      // 0x027C(0x000C)
	struct FVector                                     PositionMultiplierZ;                                      // 0x0288(0x000C)
	struct FVector                                     PositionTarget;                                           // 0x0294(0x000C)
	struct FVector                                     VelocityMultiplierX;                                      // 0x02A0(0x000C)
	struct FVector                                     VelocityMultiplierY;                                      // 0x02AC(0x000C)
	struct FVector                                     VelocityMultiplierZ;                                      // 0x02B8(0x000C)
	struct FVector                                     VelocityTarget;                                           // 0x02C4(0x000C)
	struct FVector                                     Noise;                                                    // 0x02D0(0x000C)
	struct FVector                                     FalloffLinear;                                            // 0x02DC(0x000C)
	struct FVector                                     FalloffQuadratic;                                         // 0x02E8(0x000C)
	float                                              TorusRadius;                                              // 0x02F4(0x0004)
	struct FPointer                                    ForceField;                                               // 0x02F8(0x0004)
	TArray<struct FPointer>                            ConvexMeshes;                                             // 0x02FC(0x000C)
	TArray<struct FPointer>                            ExclusionShapes;                                          // 0x0308(0x000C)
	TArray<struct FPointer>                            ExclusionShapePoses;                                      // 0x0314(0x000C)
	struct FPointer                                    LinearKernel;                                             // 0x0320(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceFieldBrush");
		return ptr;
	}


	void StopsProjectile();
	void PostBeginPlay();
};


// Class Engine.RB_ForceFieldExcludeVolume
// 0x0004 (0x025C - 0x0258)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                        // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ForceFieldExcludeVolume");
		return ptr;
	}

};


// Class Engine.NxForceField
// 0x0040 (0x025C - 0x021C)
class ANxForceField : public AActor
{
public:
	int                                                ExcludeChannel;                                           // 0x021C(0x0004)
	unsigned long                                      bForceActive : 1;                                         // 0x0220(0x0004)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x0224(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0228(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	struct FPointer                                    ForceField;                                               // 0x022C(0x0004)
	TArray<struct FPointer>                            ConvexMeshes;                                             // 0x0230(0x000C)
	TArray<struct FPointer>                            ExclusionShapes;                                          // 0x023C(0x000C)
	TArray<struct FPointer>                            ExclusionShapePoses;                                      // 0x0248(0x000C)
	struct FPointer                                    U2NRotation;                                              // 0x0254(0x0004)
	int                                                SceneIndex;                                               // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceField");
		return ptr;
	}


	void OnToggle();
	void DoInitRBPhys();
};


// Class Engine.NxCylindricalForceField
// 0x002C (0x0288 - 0x025C)
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                           // 0x025C(0x0004) (Const)
	float                                              RotationalStrength;                                       // 0x0260(0x0004) (Const)
	float                                              LiftStrength;                                             // 0x0264(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0268(0x0004) (Const)
	float                                              ForceTopRadius;                                           // 0x026C(0x0004) (Const)
	float                                              LiftFalloffHeight;                                        // 0x0270(0x0004) (Const)
	float                                              EscapeVelocity;                                           // 0x0274(0x0004) (Const)
	float                                              ForceHeight;                                              // 0x0278(0x0004) (Const)
	float                                              HeightOffset;                                             // 0x027C(0x0004) (Const)
	unsigned long                                      UseSpecialRadialForce : 1;                                // 0x0280(0x0004)
	struct FPointer                                    Kernel;                                                   // 0x0284(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxCylindricalForceField");
		return ptr;
	}

};


// Class Engine.NxCylindricalForceFieldCapsule
// 0x0004 (0x028C - 0x0288)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x0288(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxCylindricalForceFieldCapsule");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxForceFieldGeneric
// 0x00B0 (0x030C - 0x025C)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                                    // 0x025C(0x0004)
	class UActorComponent*                             DrawComponent;                                            // 0x0260(0x0004)
	float                                              RoughExtentX;                                             // 0x0264(0x0004)
	float                                              RoughExtentY;                                             // 0x0268(0x0004)
	float                                              RoughExtentZ;                                             // 0x026C(0x0004)
	TEnumAsByte<EFFG_ForceFieldCoordinates>            Coordinates;                                              // 0x0270(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0271(0x0003) MISSED OFFSET
	struct FVector                                     Constant;                                                 // 0x0274(0x000C)
	struct FVector                                     PositionMultiplierX;                                      // 0x0280(0x000C)
	struct FVector                                     PositionMultiplierY;                                      // 0x028C(0x000C)
	struct FVector                                     PositionMultiplierZ;                                      // 0x0298(0x000C)
	struct FVector                                     PositionTarget;                                           // 0x02A4(0x000C)
	struct FVector                                     VelocityMultiplierX;                                      // 0x02B0(0x000C)
	struct FVector                                     VelocityMultiplierY;                                      // 0x02BC(0x000C)
	struct FVector                                     VelocityMultiplierZ;                                      // 0x02C8(0x000C)
	struct FVector                                     VelocityTarget;                                           // 0x02D4(0x000C)
	struct FVector                                     Noise;                                                    // 0x02E0(0x000C)
	struct FVector                                     FalloffLinear;                                            // 0x02EC(0x000C)
	struct FVector                                     FalloffQuadratic;                                         // 0x02F8(0x000C)
	float                                              TorusRadius;                                              // 0x0304(0x0004)
	struct FPointer                                    LinearKernel;                                             // 0x0308(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldGeneric");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxForceFieldRadial
// 0x001C (0x0278 - 0x025C)
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                                    // 0x025C(0x0004)
	class UActorComponent*                             DrawComponent;                                            // 0x0260(0x0004)
	float                                              ForceStrength;                                            // 0x0264(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0268(0x0004) (Const)
	float                                              SelfRotationStrength;                                     // 0x026C(0x0004) (Const)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x0270(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0271(0x0003) MISSED OFFSET
	struct FPointer                                    Kernel;                                                   // 0x0274(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldRadial");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxForceFieldTornado
// 0x0038 (0x0294 - 0x025C)
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                                    // 0x025C(0x0004)
	class UActorComponent*                             DrawComponent;                                            // 0x0260(0x0004)
	float                                              RadialStrength;                                           // 0x0264(0x0004) (Const)
	float                                              RotationalStrength;                                       // 0x0268(0x0004) (Const)
	float                                              LiftStrength;                                             // 0x026C(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0270(0x0004) (Const)
	float                                              ForceTopRadius;                                           // 0x0274(0x0004) (Const)
	float                                              LiftFalloffHeight;                                        // 0x0278(0x0004) (Const)
	float                                              EscapeVelocity;                                           // 0x027C(0x0004) (Const)
	float                                              ForceHeight;                                              // 0x0280(0x0004) (Const)
	float                                              HeightOffset;                                             // 0x0284(0x0004) (Const)
	unsigned long                                      BSpecialRadialForceMode : 1;                              // 0x0288(0x0004)
	float                                              SelfRotationStrength;                                     // 0x028C(0x0004) (Const)
	struct FPointer                                    Kernel;                                                   // 0x0290(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldTornado");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxGenericForceField
// 0x009C (0x02F8 - 0x025C)
class ANxGenericForceField : public ANxForceField
{
public:
	TEnumAsByte<EFFG_ForceFieldCoordinates>            Coordinates;                                              // 0x025C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x025D(0x0003) MISSED OFFSET
	struct FVector                                     Constant;                                                 // 0x0260(0x000C)
	struct FVector                                     PositionMultiplierX;                                      // 0x026C(0x000C)
	struct FVector                                     PositionMultiplierY;                                      // 0x0278(0x000C)
	struct FVector                                     PositionMultiplierZ;                                      // 0x0284(0x000C)
	struct FVector                                     PositionTarget;                                           // 0x0290(0x000C)
	struct FVector                                     VelocityMultiplierX;                                      // 0x029C(0x000C)
	struct FVector                                     VelocityMultiplierY;                                      // 0x02A8(0x000C)
	struct FVector                                     VelocityMultiplierZ;                                      // 0x02B4(0x000C)
	struct FVector                                     VelocityTarget;                                           // 0x02C0(0x000C)
	struct FVector                                     Noise;                                                    // 0x02CC(0x000C)
	struct FVector                                     FalloffLinear;                                            // 0x02D8(0x000C)
	struct FVector                                     FalloffQuadratic;                                         // 0x02E4(0x000C)
	float                                              TorusRadius;                                              // 0x02F0(0x0004)
	struct FPointer                                    LinearKernel;                                             // 0x02F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceField");
		return ptr;
	}

};


// Class Engine.NxGenericForceFieldBox
// 0x0010 (0x0308 - 0x02F8)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                                          // 0x02F8(0x0004)
	struct FVector                                     BoxExtent;                                                // 0x02FC(0x000C) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceFieldBox");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxGenericForceFieldCapsule
// 0x000C (0x0304 - 0x02F8)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x02F8(0x0004)
	float                                              CapsuleHeight;                                            // 0x02FC(0x0004)
	float                                              CapsuleRadius;                                            // 0x0300(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceFieldCapsule");
		return ptr;
	}

};


// Class Engine.NxRadialForceField
// 0x0014 (0x0270 - 0x025C)
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x025C(0x0004)
	float                                              ForceStrength;                                            // 0x0260(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0264(0x0004) (Const)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x0268(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	struct FPointer                                    LinearKernel;                                             // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxRadialForceField");
		return ptr;
	}

};


// Class Engine.NxRadialCustomForceField
// 0x0008 (0x0278 - 0x0270)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                                     // 0x0270(0x0004) (Const)
	struct FPointer                                    Kernel;                                                   // 0x0274(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxRadialCustomForceField");
		return ptr;
	}

};


// Class Engine.NxTornadoAngularForceField
// 0x0030 (0x028C - 0x025C)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                           // 0x025C(0x0004) (Const)
	float                                              RotationalStrength;                                       // 0x0260(0x0004) (Const)
	float                                              LiftStrength;                                             // 0x0264(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0268(0x0004) (Const)
	float                                              ForceTopRadius;                                           // 0x026C(0x0004) (Const)
	float                                              LiftFalloffHeight;                                        // 0x0270(0x0004) (Const)
	float                                              EscapeVelocity;                                           // 0x0274(0x0004) (Const)
	float                                              ForceHeight;                                              // 0x0278(0x0004) (Const)
	float                                              HeightOffset;                                             // 0x027C(0x0004) (Const)
	unsigned long                                      BSpecialRadialForceMode : 1;                              // 0x0280(0x0004)
	float                                              SelfRotationStrength;                                     // 0x0284(0x0004) (Const)
	struct FPointer                                    Kernel;                                                   // 0x0288(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoAngularForceField");
		return ptr;
	}

};


// Class Engine.NxTornadoAngularForceFieldCapsule
// 0x0004 (0x0290 - 0x028C)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x028C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoAngularForceFieldCapsule");
		return ptr;
	}

};


// Class Engine.NxTornadoForceField
// 0x002C (0x0288 - 0x025C)
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                           // 0x025C(0x0004) (Const)
	float                                              RotationalStrength;                                       // 0x0260(0x0004) (Const)
	float                                              LiftStrength;                                             // 0x0264(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0268(0x0004) (Const)
	float                                              ForceTopRadius;                                           // 0x026C(0x0004) (Const)
	float                                              LiftFalloffHeight;                                        // 0x0270(0x0004) (Const)
	float                                              EscapeVelocity;                                           // 0x0274(0x0004) (Const)
	float                                              ForceHeight;                                              // 0x0278(0x0004) (Const)
	float                                              HeightOffset;                                             // 0x027C(0x0004) (Const)
	unsigned long                                      BSpecialRadialForceMode : 1;                              // 0x0280(0x0004)
	struct FPointer                                    Kernel;                                                   // 0x0284(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoForceField");
		return ptr;
	}

};


// Class Engine.NxTornadoForceFieldCapsule
// 0x0004 (0x028C - 0x0288)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x0288(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoForceFieldCapsule");
		return ptr;
	}

};


// Class Engine.RB_CylindricalForceActor
// 0x0030 (0x024C - 0x021C)
class ARB_CylindricalForceActor : public ARigidBodyBase
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                          // 0x021C(0x0004)
	float                                              RadialStrength;                                           // 0x0220(0x0004) (Const)
	float                                              RotationalStrength;                                       // 0x0224(0x0004) (Const)
	float                                              LiftStrength;                                             // 0x0228(0x0004) (Const)
	float                                              LiftFalloffHeight;                                        // 0x022C(0x0004) (Const)
	float                                              EscapeVelocity;                                           // 0x0230(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0234(0x0004) (Const)
	float                                              ForceTopRadius;                                           // 0x0238(0x0004) (Const)
	float                                              ForceHeight;                                              // 0x023C(0x0004) (Const)
	float                                              HeightOffset;                                             // 0x0240(0x0004) (Const)
	unsigned long                                      bForceActive : 1;                                         // 0x0244(0x0004)
	unsigned long                                      bForceApplyToCloth : 1;                                   // 0x0244(0x0004)
	unsigned long                                      bForceApplyToFluid : 1;                                   // 0x0244(0x0004)
	unsigned long                                      bForceApplyToRigidBodies : 1;                             // 0x0244(0x0004)
	unsigned long                                      bForceApplyToProjectiles : 1;                             // 0x0244(0x0004)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x0248(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_CylindricalForceActor");
		return ptr;
	}


	void OnToggle();
};


// Class Engine.RB_RadialForceActor
// 0x0020 (0x023C - 0x021C)
class ARB_RadialForceActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x021C(0x0004)
	float                                              ForceStrength;                                            // 0x0220(0x0004) (Const)
	float                                              ForceRadius;                                              // 0x0224(0x0004) (Const)
	float                                              SwirlStrength;                                            // 0x0228(0x0004) (Const)
	float                                              SpinTorque;                                               // 0x022C(0x0004) (Const)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x0230(0x0001)
	TEnumAsByte<ERadialForceType>                      RadialForceMode;                                          // 0x0231(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0232(0x0002) MISSED OFFSET
	unsigned long                                      bForceActive : 1;                                         // 0x0234(0x0004)
	unsigned long                                      bForceApplyToCloth : 1;                                   // 0x0234(0x0004)
	unsigned long                                      bForceApplyToFluid : 1;                                   // 0x0234(0x0004)
	unsigned long                                      bForceApplyToRigidBodies : 1;                             // 0x0234(0x0004)
	unsigned long                                      bForceApplyToProjectiles : 1;                             // 0x0234(0x0004)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x0238(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialForceActor");
		return ptr;
	}


	void OnToggle();
};


// Class Engine.ForceFieldShape
// 0x0000 (0x003C - 0x003C)
class UForceFieldShape : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShape");
		return ptr;
	}


	void GetDrawComponent();
	void FillByCylinder();
	void FillByCapsule();
	void FillByBox();
	void FillBySphere();
};


// Class Engine.ForceFieldShapeBox
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                                    // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShapeBox");
		return ptr;
	}


	void GetDrawComponent();
	void FillByCylinder();
	void FillByCapsule();
	void FillByBox();
	void FillBySphere();
	void GetRadii();
};


// Class Engine.ForceFieldShapeCapsule
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                                    // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShapeCapsule");
		return ptr;
	}


	void GetDrawComponent();
	void FillByCylinder();
	void FillByCapsule();
	void FillByBox();
	void FillBySphere();
	void GetRadius();
	void GetHeight();
};


// Class Engine.ForceFieldShapeSphere
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                                    // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShapeSphere");
		return ptr;
	}


	void GetDrawComponent();
	void FillByCylinder();
	void FillByCapsule();
	void FillByBox();
	void FillBySphere();
	void GetRadius();
};


// Class Engine.PrefabInstance
// 0x00BC (0x02D8 - 0x021C)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                           // 0x021C(0x0004)
	int                                                TemplateVersion;                                          // 0x0220(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0224(0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	class UPrefabSequence*                             SequenceInstance;                                         // 0x0260(0x0004)
	int                                                PI_PackageVersion;                                        // 0x0264(0x0004)
	int                                                PI_LicenseePackageVersion;                                // 0x0268(0x0004)
	TArray<unsigned char>                              PI_Bytes;                                                 // 0x026C(0x000C)
	TArray<class UObject*>                             PI_CompleteObjects;                                       // 0x0278(0x000C)
	TArray<class UObject*>                             PI_ReferencedObjects;                                     // 0x0284(0x000C)
	TArray<struct FString>                             PI_SavedNames;                                            // 0x0290(0x000C)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x029C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrefabInstance");
		return ptr;
	}

};


// Class Engine.Prefab
// 0x0024 (0x0060 - 0x003C)
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                            // 0x003C(0x0004)
	TArray<class UObject*>                             PrefabArchetypes;                                         // 0x0040(0x000C)
	TArray<class UObject*>                             RemovedArchetypes;                                        // 0x004C(0x000C)
	class UPrefabSequence*                             PrefabSequence;                                           // 0x0058(0x0004)
	class UTexture2D*                                  PrefabPreview;                                            // 0x005C(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Prefab");
		return ptr;
	}

};


// Class Engine.SequenceFrame
// 0x0020 (0x00AC - 0x008C)
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                                    // 0x008C(0x0004)
	int                                                SizeY;                                                    // 0x0090(0x0004)
	int                                                BorderWidth;                                              // 0x0094(0x0004)
	unsigned long                                      bDrawBox : 1;                                             // 0x0098(0x0004)
	unsigned long                                      bFilled : 1;                                              // 0x0098(0x0004)
	unsigned long                                      bTileFill : 1;                                            // 0x0098(0x0004)
	struct FColor                                      BorderColor;                                              // 0x009C(0x0004)
	struct FColor                                      FillColor;                                                // 0x00A0(0x0004)
	class UTexture2D*                                  FillTexture;                                              // 0x00A4(0x0004) (ExportObject)
	class UMaterial*                                   FillMaterial;                                             // 0x00A8(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceFrame");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SequenceFrameWrapped
// 0x0000 (0x00AC - 0x00AC)
class USequenceFrameWrapped : public USequenceFrame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceFrameWrapped");
		return ptr;
	}

};


// Class Engine.Sequence
// 0x005C (0x012C - 0x00D0)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                                  // 0x00D0(0x0004)
	TArray<class USequenceObject*>                     SequenceObjects;                                          // 0x00D4(0x000C)
	TArray<class USequenceOp*>                         ActiveSequenceOps;                                        // 0x00E0(0x000C)
	TArray<class USequence*>                           NestedSequences;                                          // 0x00EC(0x000C)
	TArray<class USequenceEvent*>                      UnregisteredEvents;                                       // 0x00F8(0x000C)
	TArray<struct FActivateOp>                         DelayedActivatedOps;                                      // 0x0104(0x000C)
	unsigned long                                      bEnabled : 1;                                             // 0x0110(0x0004)
	TArray<struct FQueuedActivationInfo>               QueuedActivations;                                        // 0x0114(0x000C)
	int                                                DefaultViewX;                                             // 0x0120(0x0004)
	int                                                DefaultViewY;                                             // 0x0124(0x0004)
	float                                              DefaultViewZoom;                                          // 0x0128(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Sequence");
		return ptr;
	}


	void SetEnabled();
	void Reset();
	void FindSeqObjectsByName();
	void FindSeqObjectsByClass();
};


// Class Engine.PrefabSequence
// 0x0004 (0x0130 - 0x012C)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                              // 0x012C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrefabSequence");
		return ptr;
	}


	void GetOwnerPrefab();
	void SetOwnerPrefab();
};


// Class Engine.PrefabSequenceContainer
// 0x0000 (0x012C - 0x012C)
class UPrefabSequenceContainer : public USequence
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrefabSequenceContainer");
		return ptr;
	}

};


// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x00E8(0x0004)
	struct FName                                       EventName;                                                // 0x00EC(0x0008)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActivateRemoteEvent");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_AndGate
// 0x001C (0x0104 - 0x00E8)
class USeqAct_AndGate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x00E8(0x0004)
	TArray<unsigned long>                              LinkedOutputFiredStatus;                                  // 0x00EC(0x000C)
	TArray<struct FPointer>                            LinkedOutputs;                                            // 0x00F8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AndGate");
		return ptr;
	}

};


// Class Engine.SeqAct_ApplySoundNode
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                                // 0x00E8(0x0004)
	class USoundNode*                                  ApplyNode;                                                // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ApplySoundNode");
		return ptr;
	}

};


// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                                    // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AttachToEvent");
		return ptr;
	}

};


// Class Engine.SeqAct_CameraFade
// 0x0028 (0x0110 - 0x00E8)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                                // 0x00E8(0x0004)
	struct FVector2D                                   FadeAlpha;                                                // 0x00EC(0x0008)
	float                                              FadeOpacity;                                              // 0x00F4(0x0004)
	float                                              FadeTime;                                                 // 0x00F8(0x0004)
	unsigned long                                      bPersistFade : 1;                                         // 0x00FC(0x0004)
	float                                              FadeTimeRemaining;                                        // 0x0100(0x0004)
	TArray<class APlayerController*>                   CachedPCs;                                                // 0x0104(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraFade");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_CameraLookAt
// 0x0034 (0x011C - 0x00E8)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                        // 0x00E8(0x0004)
	unsigned long                                      bAlwaysFocus : 1;                                         // 0x00E8(0x0004)
	unsigned long                                      bAdjustCamera : 1;                                        // 0x00E8(0x0004)
	unsigned long                                      bTurnInPlace : 1;                                         // 0x00E8(0x0004)
	unsigned long                                      bIgnoreTrace : 1;                                         // 0x00E8(0x0004)
	unsigned long                                      bAffectHead : 1;                                          // 0x00E8(0x0004)
	unsigned long                                      bRotatePlayerWithCamera : 1;                              // 0x00E8(0x0004)
	unsigned long                                      bToggleGodMode : 1;                                       // 0x00E8(0x0004)
	unsigned long                                      bLeaveCameraRotation : 1;                                 // 0x00E8(0x0004)
	unsigned long                                      bDisableInput : 1;                                        // 0x00E8(0x0004)
	unsigned long                                      bUsedTimer : 1;                                           // 0x00E8(0x0004)
	unsigned long                                      bCheckLineOfSight : 1;                                    // 0x00E8(0x0004)
	struct FVector2D                                   InterpSpeedRange;                                         // 0x00EC(0x0008)
	struct FVector2D                                   InFocusFOV;                                               // 0x00F4(0x0008)
	struct FName                                       FocusBoneName;                                            // 0x00FC(0x0008)
	struct FString                                     TextDisplay;                                              // 0x0104(0x000C)
	float                                              TotalTime;                                                // 0x0110(0x0004)
	float                                              CameraFOV;                                                // 0x0114(0x0004)
	float                                              RemainingTime;                                            // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraLookAt");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_CameraShake
// 0x0020 (0x0108 - 0x00E8)
class USeqAct_CameraShake : public USequenceAction
{
public:
	class UCameraShake*                                Shake;                                                    // 0x00E8(0x0004) (Parm)
	float                                              ShakeScale;                                               // 0x00EC(0x0004) (Parm)
	unsigned long                                      bDoControllerVibration : 1;                               // 0x00F0(0x0004) (Parm)
	unsigned long                                      bRadialShake : 1;                                         // 0x00F0(0x0004) (Parm)
	unsigned long                                      bOrientTowardRadialEpicenter : 1;                         // 0x00F0(0x0004) (Parm)
	float                                              RadialShake_InnerRadius;                                  // 0x00F4(0x0004) (Parm)
	float                                              RadialShake_OuterRadius;                                  // 0x00F8(0x0004) (Parm)
	float                                              RadialShake_Falloff;                                      // 0x00FC(0x0004) (Parm)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0100(0x0001) (Parm)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	class AActor*                                      LocationActor;                                            // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraShake");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x00ED - 0x00E8)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                                       // 0x00E8(0x0004)
	unsigned long                                      bBlockActors : 1;                                         // 0x00E8(0x0004)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x00E8(0x0004)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x00EC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ChangeCollision");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CommitMapChange");
		return ptr;
	}

};


// Class Engine.SeqAct_ConvertToString
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_ConvertToString : public USequenceAction
{
public:
	unsigned long                                      bIncludeVarComment : 1;                                   // 0x00E8(0x0004)
	struct FString                                     VarSeparator;                                             // 0x00EC(0x000C)
	int                                                NumberOfInputs;                                           // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ConvertToString");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_DrawText
// 0x0030 (0x0118 - 0x00E8)
class USeqAct_DrawText : public USequenceAction
{
public:
	float                                              DisplayTimeSeconds;                                       // 0x00E8(0x0004)
	unsigned long                                      bDisplayOnObject : 1;                                     // 0x00EC(0x0004)
	struct FKismetDrawTextInfo                         DrawTextInfo;                                             // 0x00F0(0x0028)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DrawText");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_FinishSequence
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                              // 0x00E8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_FinishSequence");
		return ptr;
	}

};


// Class Engine.SeqAct_Gate
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x00E8(0x0004)
	int                                                AutoCloseCount;                                           // 0x00EC(0x0004)
	int                                                CurrentCloseCount;                                        // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Gate");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_GetDistance
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                                 // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetDistance");
		return ptr;
	}

};


// Class Engine.SeqAct_GetLocationAndRotation
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_GetLocationAndRotation : public USequenceAction
{
public:
	struct FVector                                     Location;                                                 // 0x00E8(0x000C)
	struct FVector                                     RotationVector;                                           // 0x00F4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetLocationAndRotation");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_GetProperty
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                             // 0x00E8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetProperty");
		return ptr;
	}

};


// Class Engine.SeqAct_GetVectorComponents
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_GetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     InVector;                                                 // 0x00E8(0x000C)
	float                                              X;                                                        // 0x00F4(0x0004)
	float                                              Y;                                                        // 0x00F8(0x0004)
	float                                              Z;                                                        // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetVectorComponents");
		return ptr;
	}

};


// Class Engine.SeqAct_GetVelocity
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              VelocityMag;                                              // 0x00E8(0x0004)
	struct FVector                                     VelocityVect;                                             // 0x00EC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetVelocity");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                                  // 0x00E8(0x0004)
	unsigned long                                      bObjectFound : 1;                                         // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_IsInObjectList");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_Latent
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_Latent : public USequenceAction
{
public:
	TArray<class AActor*>                              LatentActors;                                             // 0x00E8(0x000C)
	unsigned long                                      bAborted : 1;                                             // 0x00F4(0x0004)
	unsigned long                                      bAutoActivateLatentOutputs : 1;                           // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Latent");
		return ptr;
	}


	void Update();
	void AbortFor();
};


// Class Engine.SeqAct_ActorFactory
// 0x0048 (0x0140 - 0x00F8)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x00F8(0x0004)
	unsigned long                                      bIsSpawning : 1;                                          // 0x00F8(0x0004)
	unsigned long                                      bCheckSpawnCollision : 1;                                 // 0x00F8(0x0004)
	class UActorFactory*                               Factory;                                                  // 0x00FC(0x0004)
	TEnumAsByte<EPointSelection>                       PointSelection;                                           // 0x0100(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	TArray<class AActor*>                              SpawnPoints;                                              // 0x0104(0x000C)
	TArray<struct FVector>                             SpawnLocations;                                           // 0x0110(0x000C)
	TArray<struct FVector>                             SpawnOrientations;                                        // 0x011C(0x000C)
	int                                                SpawnCount;                                               // 0x0128(0x0004)
	float                                              SpawnDelay;                                               // 0x012C(0x0004)
	class AActor*                                      ActorArchetype;                                           // 0x0130(0x0004)
	int                                                LastSpawnIdx;                                             // 0x0134(0x0004)
	int                                                SpawnedCount;                                             // 0x0138(0x0004)
	float                                              RemainingDelay;                                           // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActorFactory");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ActorFactoryEx
// 0x0000 (0x0140 - 0x0140)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActorFactoryEx");
		return ptr;
	}

};


// Class Engine.SeqAct_AIMoveToActor
// 0x001C (0x0114 - 0x00F8)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                                       // 0x00F8(0x0004)
	unsigned long                                      bPickClosest : 1;                                         // 0x00F8(0x0004)
	TArray<class AActor*>                              Destination;                                              // 0x00FC(0x000C)
	float                                              MovementSpeedModifier;                                    // 0x0108(0x0004)
	class AActor*                                      LookAt;                                                   // 0x010C(0x0004)
	int                                                LastDestinationChoice;                                    // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AIMoveToActor");
		return ptr;
	}


	void PickDestination();
	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_Delay
// 0x0014 (0x010C - 0x00F8)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                         // 0x00F8(0x0004)
	unsigned long                                      bStartWillRestart : 1;                                    // 0x00F8(0x0004)
	float                                              DefaultDuration;                                          // 0x00FC(0x0004)
	float                                              Duration;                                                 // 0x0100(0x0004)
	float                                              LastUpdateTime;                                           // 0x0104(0x0004)
	float                                              RemainingTime;                                            // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Delay");
		return ptr;
	}


	void ResetDelayActive();
	void Reset();
	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                                // 0x00F8(0x0004)
	int                                                CurrentIdx;                                               // 0x00FC(0x0004)
	float                                              SwitchDelay;                                              // 0x0100(0x0004)
	float                                              NextLinkTime;                                             // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DelaySwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ForceGarbageCollection");
		return ptr;
	}

};


// Class Engine.SeqAct_Interp
// 0x00C0 (0x01B8 - 0x00F8)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00F8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorTransforms
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0134(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorVisibilities
	float                                              PlayRate;                                                 // 0x0170(0x0004)
	float                                              Position;                                                 // 0x0174(0x0004)
	float                                              ForceStartPosition;                                       // 0x0178(0x0004)
	unsigned long                                      bIsPlaying : 1;                                           // 0x017C(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x017C(0x0004)
	unsigned long                                      bIsBeingEdited : 1;                                       // 0x017C(0x0004)
	unsigned long                                      bLooping : 1;                                             // 0x017C(0x0004)
	unsigned long                                      bRewindOnPlay : 1;                                        // 0x017C(0x0004)
	unsigned long                                      bNoResetOnRewind : 1;                                     // 0x017C(0x0004)
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                              // 0x017C(0x0004)
	unsigned long                                      bReversePlayback : 1;                                     // 0x017C(0x0004)
	unsigned long                                      bInterpForPathBuilding : 1;                               // 0x017C(0x0004)
	unsigned long                                      bForceStartPos : 1;                                       // 0x017C(0x0004)
	unsigned long                                      bClientSideOnly : 1;                                      // 0x017C(0x0004)
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                              // 0x017C(0x0004)
	unsigned long                                      bIsSkippable : 1;                                         // 0x017C(0x0004)
	unsigned long                                      bShouldShowGore : 1;                                      // 0x017C(0x0004)
	TArray<class ACoverLink*>                          LinkedCover;                                              // 0x0180(0x000C)
	class UInterpData*                                 InterpData;                                               // 0x018C(0x0004)
	TArray<class UInterpGroupInst*>                    GroupInst;                                                // 0x0190(0x000C)
	class UClass*                                      ReplicatedActorClass;                                     // 0x019C(0x0004)
	class AMatineeActor*                               ReplicatedActor;                                          // 0x01A0(0x0004)
	int                                                PreferredSplitScreenNum;                                  // 0x01A4(0x0004)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                               // 0x01A8(0x000C)
	float                                              TerminationTime;                                          // 0x01B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Interp");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void Reset();
	void AddPlayerToDirectorTracks();
	void Stop();
	void SetPosition();
};


// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                                // 0x00F8(0x0004)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelStreamingBase");
		return ptr;
	}

};


// Class Engine.SeqAct_LevelStreaming
// 0x0010 (0x010C - 0x00FC)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                                    // 0x00FC(0x0004)
	struct FName                                       LevelName;                                                // 0x0100(0x0008)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelStreaming");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiLevelStreaming
// 0x0010 (0x010C - 0x00FC)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray<struct FLevelStreamingNameCombo>            Levels;                                                   // 0x00FC(0x000C)
	unsigned long                                      bUnloadAllOtherLevels : 1;                                // 0x0108(0x0004)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiLevelStreaming");
		return ptr;
	}

};


// Class Engine.SeqAct_LevelVisibility
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                                    // 0x00F8(0x0004)
	struct FName                                       LevelName;                                                // 0x00FC(0x0008)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelVisibility");
		return ptr;
	}

};


// Class Engine.SeqAct_PlaySound
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                                // 0x00F8(0x0004)
	float                                              ExtraDelay;                                               // 0x00FC(0x0004)
	float                                              SoundDuration;                                            // 0x0100(0x0004)
	float                                              FadeInTime;                                               // 0x0104(0x0004)
	float                                              FadeOutTime;                                              // 0x0108(0x0004)
	float                                              VolumeMultiplier;                                         // 0x010C(0x0004)
	float                                              PitchMultiplier;                                          // 0x0110(0x0004)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x0114(0x0004)
	unsigned long                                      bGlobalSound : 1;                                         // 0x0114(0x0004)
	unsigned long                                      bReplicate : 1;                                           // 0x0114(0x0004)
	unsigned long                                      bStopped : 1;                                             // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlaySound");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_PrepareMapChange
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                            // 0x00F8(0x0008)
	TArray<struct FName>                               InitiallyLoadedSecondaryLevelNames;                       // 0x0100(0x000C)
	unsigned long                                      bIsHighPriority : 1;                                      // 0x010C(0x0004)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PrepareMapChange");
		return ptr;
	}

};


// Class Engine.SeqAct_SetDOFParams
// 0x0058 (0x0150 - 0x00F8)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                          // 0x00F8(0x0004)
	float                                              BlurKernelSize;                                           // 0x00FC(0x0004)
	float                                              MaxNearBlurAmount;                                        // 0x0100(0x0004)
	float                                              MaxFarBlurAmount;                                         // 0x0104(0x0004)
	struct FColor                                      ModulateBlurColor;                                        // 0x0108(0x0004)
	float                                              FocusInnerRadius;                                         // 0x010C(0x0004)
	float                                              FocusDistance;                                            // 0x0110(0x0004)
	struct FVector                                     FocusPosition;                                            // 0x0114(0x000C)
	float                                              InterpolateSeconds;                                       // 0x0120(0x0004)
	float                                              InterpolateElapsed;                                       // 0x0124(0x0004)
	float                                              OldFalloffExponent;                                       // 0x0128(0x0004)
	float                                              OldBlurKernelSize;                                        // 0x012C(0x0004)
	float                                              OldMaxNearBlurAmount;                                     // 0x0130(0x0004)
	float                                              OldMaxFarBlurAmount;                                      // 0x0134(0x0004)
	struct FColor                                      OldModulateBlurColor;                                     // 0x0138(0x0004)
	float                                              OldFocusInnerRadius;                                      // 0x013C(0x0004)
	float                                              OldFocusDistance;                                         // 0x0140(0x0004)
	struct FVector                                     OldFocusPosition;                                         // 0x0144(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetDOFParams");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                         // 0x00F8(0x0004)
	float                                              InterpolateSeconds;                                       // 0x00FC(0x0004)
	float                                              InterpolateElapsed;                                       // 0x0100(0x0004)
	float                                              OldMotionBlurAmount;                                      // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMotionBlurParams");
		return ptr;
	}

};


// Class Engine.SeqAct_StreamInTextures
// 0x0024 (0x011C - 0x00F8)
class USeqAct_StreamInTextures : public USeqAct_Latent
{
public:
	unsigned long                                      bLocationBased : 1;                                       // 0x00F8(0x0004)
	unsigned long                                      bStreamingActive : 1;                                     // 0x00F8(0x0004)
	float                                              Seconds;                                                  // 0x00FC(0x0004)
	float                                              StopTimestamp;                                            // 0x0100(0x0004)
	TArray<class UObject*>                             LocationActors;                                           // 0x0104(0x000C)
	TArray<class UMaterialInterface*>                  ForceMaterials;                                           // 0x0110(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_StreamInTextures");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray<struct FName>                               LevelNames;                                               // 0x00F8(0x000C)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_WaitForLevelsVisible");
		return ptr;
	}

};


// Class Engine.SeqAct_Log
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                                      // 0x00E8(0x0004)
	unsigned long                                      bIncludeObjComment : 1;                                   // 0x00E8(0x0004)
	float                                              TargetDuration;                                           // 0x00EC(0x0004)
	struct FVector                                     TargetOffset;                                             // 0x00F0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Log");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_ModifyCover
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray<int>                                        Slots;                                                    // 0x00E8(0x000C)
	TEnumAsByte<ECoverType>                            ManualCoverType;                                          // 0x00F4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	unsigned long                                      bManualAdjustPlayersOnly : 1;                             // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyCover");
		return ptr;
	}

};


// Class Engine.SeqAct_ModifyHealth
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_ModifyHealth : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                               // 0x00E8(0x0004)
	float                                              Momentum;                                                 // 0x00EC(0x0004)
	float                                              Amount;                                                   // 0x00F0(0x0004)
	float                                              Radius;                                                   // 0x00F4(0x0004)
	unsigned long                                      bHeal : 1;                                                // 0x00F8(0x0004)
	unsigned long                                      bRadial : 1;                                              // 0x00F8(0x0004)
	unsigned long                                      bFalloff : 1;                                             // 0x00F8(0x0004)
	class AActor*                                      Instigator;                                               // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyHealth");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ParticleEventGenerator
// 0x0048 (0x0130 - 0x00E8)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x00E8(0x0004)
	unsigned long                                      bUseEmitterLocation : 1;                                  // 0x00E8(0x0004)
	class AActor*                                      Instigator;                                               // 0x00EC(0x0004)
	TArray<struct FString>                             EventNames;                                               // 0x00F0(0x000C)
	float                                              EventTime;                                                // 0x00FC(0x0004)
	struct FVector                                     EventLocation;                                            // 0x0100(0x000C)
	struct FVector                                     EventDirection;                                           // 0x010C(0x000C)
	struct FVector                                     EventVelocity;                                            // 0x0118(0x000C)
	struct FVector                                     EventNormal;                                              // 0x0124(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ParticleEventGenerator");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_PlayCameraAnim
// 0x0020 (0x0108 - 0x00E8)
class USeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x00E8(0x0004)
	unsigned long                                      bLoop : 1;                                                // 0x00EC(0x0004)
	unsigned long                                      bRandomStartTime : 1;                                     // 0x00EC(0x0004)
	float                                              BlendInTime;                                              // 0x00F0(0x0004)
	float                                              BlendOutTime;                                             // 0x00F4(0x0004)
	float                                              Rate;                                                     // 0x00F8(0x0004)
	float                                              IntensityScale;                                           // 0x00FC(0x0004)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0100(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	class AActor*                                      UserDefinedSpaceActor;                                    // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayCameraAnim");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_PlayFaceFXAnim
// 0x0020 (0x0108 - 0x00E8)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x00E8(0x0004)
	struct FString                                     FaceFXGroupName;                                          // 0x00EC(0x000C)
	struct FString                                     FaceFXAnimName;                                           // 0x00F8(0x000C)
	class USoundCue*                                   SoundCueToPlay;                                           // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayFaceFXAnim");
		return ptr;
	}

};


// Class Engine.SeqAct_PlayMusicTrack
// 0x0024 (0x010C - 0x00E8)
class USeqAct_PlayMusicTrack : public USequenceAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                               // 0x00E8(0x0024)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayMusicTrack");
		return ptr;
	}

};


// Class Engine.SeqAct_Possess
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                            // 0x00E8(0x0004)
	unsigned long                                      bKillOldPawn : 1;                                         // 0x00EC(0x0004)
	unsigned long                                      bTryToLeaveVehicle : 1;                                   // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Possess");
		return ptr;
	}

};


// Class Engine.SeqAct_RangeSwitch
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	TArray<struct FSwitchRange>                        Ranges;                                                   // 0x00E8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_RangeSwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetBlockRigidBody");
		return ptr;
	}

};


// Class Engine.SeqAct_SetCameraTarget
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                             // 0x00E8(0x0004)
	struct FViewTargetTransitionParams                 TransitionParams;                                         // 0x00EC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetCameraTarget");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetMaterial
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                              // 0x00E8(0x0004)
	int                                                MaterialIndex;                                            // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMaterial");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00E8(0x0004)
	struct FName                                       ParamName;                                                // 0x00EC(0x0008)
	float                                              ScalarValue;                                              // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstScalarParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstTexParam
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00E8(0x0004)
	class UTexture*                                    NewTexture;                                               // 0x00EC(0x0004)
	struct FName                                       ParamName;                                                // 0x00F0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstTexParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstVectorParam
// 0x001C (0x0104 - 0x00E8)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00E8(0x0004)
	struct FName                                       ParamName;                                                // 0x00EC(0x0008)
	struct FLinearColor                                VectorValue;                                              // 0x00F4(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstVectorParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMesh
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                          // 0x00E8(0x0004)
	class UStaticMesh*                                 NewStaticMesh;                                            // 0x00EC(0x0004)
	TEnumAsByte<EMeshType>                             MeshType;                                                 // 0x00F0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned long                                      bIsAllowedToMove : 1;                                     // 0x00F4(0x0004)
	unsigned long                                      bAllowDecalsToReattach : 1;                               // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMesh");
		return ptr;
	}

};


// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00E9 - 0x00E8)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	TEnumAsByte<EPhysics>                              newPhysics;                                               // 0x00E8(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetPhysics");
		return ptr;
	}

};


// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetRigidBodyIgnoreVehicles");
		return ptr;
	}

};


// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSequenceVariable");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_AccessObjectList
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_AccessObjectList : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     OutputObject;                                             // 0x00E8(0x0004)
	int                                                ObjectIndex;                                              // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AccessObjectList");
		return ptr;
	}

};


// Class Engine.SeqAct_AddFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00E8(0x0004)
	float                                              ValueB;                                                   // 0x00EC(0x0004)
	float                                              FloatResult;                                              // 0x00F0(0x0004)
	int                                                IntResult;                                                // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_AddInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00E8(0x0004)
	int                                                ValueB;                                                   // 0x00EC(0x0004)
	float                                              FloatResult;                                              // 0x00F0(0x0004)
	int                                                IntResult;                                                // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddInt");
		return ptr;
	}

};


// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                                    // 0x00E8(0x0004)
	float                                              FloatResult;                                              // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CastToFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_CastToInt
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                            // 0x00E8(0x0004)
	float                                              Value;                                                    // 0x00EC(0x0004)
	int                                                IntResult;                                                // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CastToInt");
		return ptr;
	}

};


// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00E8(0x0004)
	float                                              ValueB;                                                   // 0x00EC(0x0004)
	float                                              FloatResult;                                              // 0x00F0(0x0004)
	int                                                IntResult;                                                // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DivideFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_DivideInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00E8(0x0004)
	int                                                ValueB;                                                   // 0x00EC(0x0004)
	float                                              FloatResult;                                              // 0x00F0(0x0004)
	int                                                IntResult;                                                // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DivideInt");
		return ptr;
	}

};


// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                         // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyObjectList");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiplyFloat
// 0x001C (0x0104 - 0x00E8)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00E8(0x0004)
	float                                              ValueB;                                                   // 0x00EC(0x0004)
	unsigned long                                      bUseClamp : 1;                                            // 0x00F0(0x0004)
	float                                              MinValue;                                                 // 0x00F4(0x0004)
	float                                              MaxValue;                                                 // 0x00F8(0x0004)
	float                                              FloatResult;                                              // 0x00FC(0x0004)
	int                                                IntResult;                                                // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiplyFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00E8(0x0004)
	int                                                ValueB;                                                   // 0x00EC(0x0004)
	float                                              FloatResult;                                              // 0x00F0(0x0004)
	int                                                IntResult;                                                // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiplyInt");
		return ptr;
	}

};


// Class Engine.SeqAct_SetBool
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                         // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetBool");
		return ptr;
	}

};


// Class Engine.SeqAct_SetFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                                   // 0x00E8(0x0004)
	TArray<float>                                      Value;                                                    // 0x00EC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetFloat");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                                   // 0x00E8(0x0004)
	TArray<int>                                        Value;                                                    // 0x00EC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetInt");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetLocation
// 0x0020 (0x0108 - 0x00E8)
class USeqAct_SetLocation : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bSetLocation : 1;                                         // 0x00E8(0x0004)
	unsigned long                                      bSetRotation : 1;                                         // 0x00E8(0x0004)
	struct FVector                                     LocationValue;                                            // 0x00EC(0x000C)
	struct FRotator                                    RotationValue;                                            // 0x00F8(0x000C)
	class UObject*                                     Target;                                                   // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetLocation");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetObject
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                             // 0x00E8(0x0004)
	class UObject*                                     Value;                                                    // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetObject");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetString
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                                   // 0x00E8(0x000C)
	struct FString                                     Value;                                                    // 0x00F4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetString");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00E8(0x0004)
	float                                              ValueB;                                                   // 0x00EC(0x0004)
	float                                              FloatResult;                                              // 0x00F0(0x0004)
	int                                                IntResult;                                                // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SubtractFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00E8(0x0004)
	int                                                ValueB;                                                   // 0x00EC(0x0004)
	float                                              FloatResult;                                              // 0x00F0(0x0004)
	int                                                IntResult;                                                // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SubtractInt");
		return ptr;
	}

};


// Class Engine.SeqAct_SetVectorComponents
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_SetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     OutVector;                                                // 0x00E8(0x000C)
	float                                              X;                                                        // 0x00F4(0x0004)
	float                                              Y;                                                        // 0x00F8(0x0004)
	float                                              Z;                                                        // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetVectorComponents");
		return ptr;
	}

};


// Class Engine.SeqAct_Switch
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                                // 0x00E8(0x0004)
	int                                                IncrementAmount;                                          // 0x00EC(0x0004)
	unsigned long                                      bLooping : 1;                                             // 0x00F0(0x0004)
	unsigned long                                      bAutoDisableLinks : 1;                                    // 0x00F0(0x0004)
	TArray<int>                                        Indices;                                                  // 0x00F4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Switch");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_RandomSwitch
// 0x000C (0x010C - 0x0100)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray<int>                                        AutoDisabledIndices;                                      // 0x0100(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_RandomSwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_Timer
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                           // 0x00E8(0x0004)
	float                                              Time;                                                     // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Timer");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_Toggle
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_Toggle : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Toggle");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_Trace
// 0x003C (0x0124 - 0x00E8)
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                         // 0x00E8(0x0004)
	unsigned long                                      bTraceWorld : 1;                                          // 0x00E8(0x0004)
	struct FVector                                     TraceExtent;                                              // 0x00EC(0x000C)
	struct FVector                                     StartOffset;                                              // 0x00F8(0x000C)
	struct FVector                                     EndOffset;                                                // 0x0104(0x000C)
	class UObject*                                     HitObject;                                                // 0x0110(0x0004)
	float                                              Distance;                                                 // 0x0114(0x0004)
	struct FVector                                     HitLocation;                                              // 0x0118(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Trace");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SequenceCondition
// 0x0000 (0x00D0 - 0x00D0)
class USequenceCondition : public USequenceOp
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceCondition");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqCond_CompareBool
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_CompareBool : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareBool");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x00D8 - 0x00D0)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                                   // 0x00D0(0x0004)
	float                                              ValueB;                                                   // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareFloat");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareInt
// 0x0008 (0x00D8 - 0x00D0)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                                   // 0x00D0(0x0004)
	int                                                ValueB;                                                   // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareInt");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareObject
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_CompareObject : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareObject");
		return ptr;
	}

};


// Class Engine.SeqCond_GetServerType
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_GetServerType : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_GetServerType");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqCond_Increment
// 0x000C (0x00DC - 0x00D0)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                          // 0x00D0(0x0004)
	int                                                ValueA;                                                   // 0x00D4(0x0004)
	int                                                ValueB;                                                   // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_Increment");
		return ptr;
	}

};


// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x00DC - 0x00D0)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                          // 0x00D0(0x0004)
	float                                              ValueA;                                                   // 0x00D4(0x0004)
	float                                              ValueB;                                                   // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IncrementFloat");
		return ptr;
	}

};


// Class Engine.SeqCond_IsAlive
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsAlive : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsAlive");
		return ptr;
	}

};


// Class Engine.SeqCond_IsConsole
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsConsole : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsConsole");
		return ptr;
	}

};


// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsInCombat");
		return ptr;
	}

};


// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x00D4 - 0x00D0)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                        // 0x00D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsLoggedIn");
		return ptr;
	}


	void CheckLogins();
};


// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsSameTeam");
		return ptr;
	}

};


// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x00D0 - 0x00D0)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchBase");
		return ptr;
	}


	void RemoveValueEntry();
	void InsertValueEntry();
	void IsFallThruEnabled();
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchClass
// 0x000C (0x00DC - 0x00D0)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchClassInfo>                    ClassArray;                                               // 0x00D0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchClass");
		return ptr;
	}


	void RemoveValueEntry();
	void InsertValueEntry();
	void IsFallThruEnabled();
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchObject
// 0x0010 (0x00E0 - 0x00D0)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchObjectCase>                   SupportedValues;                                          // 0x00D0(0x000C)
	class UClass*                                      MetaClass;                                                // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchObject");
		return ptr;
	}


	void RemoveValueEntry();
	void InsertValueEntry();
	void IsFallThruEnabled();
	void VerifyDefaultCaseValue();
};


// Class Engine.SequenceEvent
// 0x0030 (0x0100 - 0x00D0)
class USequenceEvent : public USequenceOp
{
public:
	TArray<class USequenceEvent*>                      DuplicateEvts;                                            // 0x00D0(0x000C)
	class AActor*                                      Originator;                                               // 0x00DC(0x0004)
	class AActor*                                      Instigator;                                               // 0x00E0(0x0004)
	float                                              ActivationTime;                                           // 0x00E4(0x0004)
	int                                                TriggerCount;                                             // 0x00E8(0x0004)
	int                                                MaxTriggerCount;                                          // 0x00EC(0x0004)
	float                                              ReTriggerDelay;                                           // 0x00F0(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x00F4(0x0004)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x00F4(0x0004)
	unsigned long                                      bRegistered : 1;                                          // 0x00F4(0x0004)
	unsigned long                                      bClientSideOnly : 1;                                      // 0x00F4(0x0004)
	unsigned char                                      Priority;                                                 // 0x00F8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                MaxWidth;                                                 // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceEvent");
		return ptr;
	}


	void Toggled();
	void Reset();
	void CheckActivate();
	void RegisterEvent();
};


// Class Engine.SeqEvent_AISeeEnemy
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                         // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AISeeEnemy");
		return ptr;
	}

};


// Class Engine.SeqEvent_AnimNotify
// 0x0008 (0x0108 - 0x0100)
class USeqEvent_AnimNotify : public USequenceEvent
{
public:
	struct FName                                       NotifyName;                                               // 0x0100(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AnimNotify");
		return ptr;
	}

};


// Class Engine.SeqEvent_Console
// 0x0014 (0x0114 - 0x0100)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                         // 0x0100(0x0008)
	struct FString                                     EventDesc;                                                // 0x0108(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Console");
		return ptr;
	}

};


// Class Engine.SeqEvent_ConstraintBroken
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ConstraintBroken");
		return ptr;
	}

};


// Class Engine.SeqEvent_Destroyed
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Destroyed");
		return ptr;
	}

};


// Class Engine.SeqEvent_GetInventory
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_GetInventory");
		return ptr;
	}

};


// Class Engine.SeqEvent_LevelBeginning
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelBeginning");
		return ptr;
	}

};


// Class Engine.SeqEvent_LevelLoaded
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelLoaded");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_LevelStartup
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelStartup");
		return ptr;
	}

};


// Class Engine.SeqEvent_Mover
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                             // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Mover");
		return ptr;
	}


	void NotifyFinishedOpen();
	void NotifyDetached();
	void NotifyAttached();
	void NotifyEncroachingOn();
	void RegisterEvent();
};


// Class Engine.SeqEvent_ParticleEvent
// 0x0034 (0x0134 - 0x0100)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	TEnumAsByte<EParticleEventOutputType>              EventType;                                                // 0x0100(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	struct FVector                                     EventPosition;                                            // 0x0104(0x000C)
	float                                              EventEmitterTime;                                         // 0x0110(0x0004)
	struct FVector                                     EventVelocity;                                            // 0x0114(0x000C)
	float                                              EventParticleTime;                                        // 0x0120(0x0004)
	struct FVector                                     EventNormal;                                              // 0x0124(0x000C)
	unsigned long                                      UseRelfectedImpactVector : 1;                             // 0x0130(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ParticleEvent");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_ProjectileLanded
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                              // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ProjectileLanded");
		return ptr;
	}

};


// Class Engine.SeqEvent_RemoteEvent
// 0x000C (0x010C - 0x0100)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                                // 0x0100(0x0008)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_RemoteEvent");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_RigidBodyCollision
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                                     // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_RigidBodyCollision");
		return ptr;
	}

};


// Class Engine.SeqEvent_SeeDeath
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_SeeDeath");
		return ptr;
	}

};


// Class Engine.SeqEvent_SequenceActivated
// 0x000C (0x010C - 0x0100)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                               // 0x0100(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_SequenceActivated");
		return ptr;
	}

};


// Class Engine.SeqEvent_TakeDamage
// 0x0028 (0x0128 - 0x0100)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                          // 0x0100(0x0004)
	float                                              DamageThreshold;                                          // 0x0104(0x0004)
	TArray<class UClass*>                              DamageTypes;                                              // 0x0108(0x000C)
	TArray<class UClass*>                              IgnoreDamageTypes;                                        // 0x0114(0x000C)
	float                                              CurrentDamage;                                            // 0x0120(0x0004)
	unsigned long                                      bResetDamageOnToggle : 1;                                 // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_TakeDamage");
		return ptr;
	}


	void Toggled();
	void STATIC_GetObjClassVersion();
	void Reset();
	void HandleDamage();
	void IsValidDamageType();
};


// Class Engine.SeqEvent_Touch
// 0x0028 (0x0128 - 0x0100)
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray<class UClass*>                              ClassProximityTypes;                                      // 0x0100(0x000C)
	TArray<class UClass*>                              IgnoredClassProximityTypes;                               // 0x010C(0x000C)
	unsigned long                                      bForceOverlapping : 1;                                    // 0x0118(0x0004)
	unsigned long                                      bUseInstigator : 1;                                       // 0x0118(0x0004)
	unsigned long                                      bAllowDeadPawns : 1;                                      // 0x0118(0x0004)
	TArray<class AActor*>                              TouchedList;                                              // 0x011C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Touch");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void NotifyTouchingPawnDied();
	void Toggled();
	void CheckUnTouchActivate();
	void CheckTouchActivate();
};


// Class Engine.SeqEvent_Used
// 0x0030 (0x0130 - 0x0100)
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                                       // 0x0100(0x0004)
	float                                              InteractDistance;                                         // 0x0104(0x0004)
	struct FString                                     InteractText;                                             // 0x0108(0x000C)
	class UTexture2D*                                  InteractIcon;                                             // 0x0114(0x0004)
	TArray<class UClass*>                              ClassProximityTypes;                                      // 0x0118(0x000C)
	TArray<class UClass*>                              IgnoredClassProximityTypes;                               // 0x0124(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Used");
		return ptr;
	}

};


// Class Engine.SequenceVariable
// 0x0008 (0x0094 - 0x008C)
class USequenceVariable : public USequenceObject
{
public:
	struct FName                                       VarName;                                                  // 0x008C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceVariable");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.InterpData
// 0x0040 (0x00D4 - 0x0094)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                             // 0x0094(0x0004)
	float                                              PathBuildTime;                                            // 0x0098(0x0004)
	TArray<class UInterpGroup*>                        InterpGroups;                                             // 0x009C(0x000C)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x00A8(0x0004)
	TArray<class UInterpFilter*>                       InterpFilters;                                            // 0x00AC(0x000C) (ExportObject)
	class UInterpFilter*                               SelectedFilter;                                           // 0x00B8(0x0004) (ExportObject)
	TArray<class UInterpFilter*>                       DefaultFilters;                                           // 0x00BC(0x000C) (ExportObject)
	float                                              EdSectionStart;                                           // 0x00C8(0x0004)
	float                                              EdSectionEnd;                                             // 0x00CC(0x0004)
	unsigned long                                      bShouldBakeAndPrune : 1;                                  // 0x00D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}

};


// Class Engine.SeqVar_Bool
// 0x0004 (0x0098 - 0x0094)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                                   // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Bool");
		return ptr;
	}

};


// Class Engine.SeqVar_External
// 0x0010 (0x00A4 - 0x0094)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                             // 0x0094(0x0004)
	struct FString                                     VariableLabel;                                            // 0x0098(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_External");
		return ptr;
	}

};


// Class Engine.SeqVar_Float
// 0x0004 (0x0098 - 0x0094)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                               // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Float");
		return ptr;
	}

};


// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x00A0 - 0x0098)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                                      // 0x0098(0x0004)
	float                                              Max;                                                      // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_RandomFloat");
		return ptr;
	}

};


// Class Engine.SeqVar_Int
// 0x0004 (0x0098 - 0x0094)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                                 // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Int");
		return ptr;
	}

};


// Class Engine.SeqVar_RandomInt
// 0x0008 (0x00A0 - 0x0098)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                                      // 0x0098(0x0004)
	int                                                Max;                                                      // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_RandomInt");
		return ptr;
	}

};


// Class Engine.SeqVar_Named
// 0x0010 (0x00A4 - 0x0094)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                             // 0x0094(0x0004)
	struct FName                                       FindVarName;                                              // 0x0098(0x0008)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Named");
		return ptr;
	}

};


// Class Engine.SeqVar_Object
// 0x001C (0x00B0 - 0x0094)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                                 // 0x0094(0x0004)
	struct FVector                                     ActorLocation;                                            // 0x0098(0x000C)
	TArray<class UClass*>                              SupportedClasses;                                         // 0x00A4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Object");
		return ptr;
	}


	void SetObjectValue();
	void GetObjectValue();
};


// Class Engine.SeqVar_Character
// 0x0004 (0x00B4 - 0x00B0)
class USeqVar_Character : public USeqVar_Object
{
public:
	class UClass*                                      PawnClass;                                                // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Character");
		return ptr;
	}

};


// Class Engine.SeqVar_Group
// 0x0018 (0x00C8 - 0x00B0)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                                // 0x00B0(0x0008)
	unsigned long                                      bCachedList : 1;                                          // 0x00B8(0x0004)
	TArray<class UObject*>                             Actors;                                                   // 0x00BC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Group");
		return ptr;
	}

};


// Class Engine.SeqVar_ObjectList
// 0x000C (0x00BC - 0x00B0)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray<class UObject*>                             ObjList;                                                  // 0x00B0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_ObjectList");
		return ptr;
	}


	void SetObjectValue();
	void GetObjectValue();
};


// Class Engine.SeqVar_ObjectVolume
// 0x0020 (0x00D0 - 0x00B0)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                           // 0x00B0(0x0004)
	TArray<class UObject*>                             ContainedObjects;                                         // 0x00B4(0x000C)
	TArray<class UClass*>                              ExcludeClassList;                                         // 0x00C0(0x000C)
	unsigned long                                      bCollidingOnly : 1;                                       // 0x00CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_ObjectVolume");
		return ptr;
	}

};


// Class Engine.SeqVar_Player
// 0x0014 (0x00C4 - 0x00B0)
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray<class UObject*>                             Players;                                                  // 0x00B0(0x000C)
	unsigned long                                      bAllPlayers : 1;                                          // 0x00BC(0x0004)
	int                                                PlayerIdx;                                                // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Player");
		return ptr;
	}


	void GetObjectValue();
	void UpdatePlayersList();
};


// Class Engine.SeqVar_String
// 0x000C (0x00A0 - 0x0094)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                                 // 0x0094(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_String");
		return ptr;
	}

};


// Class Engine.SeqVar_Vector
// 0x000C (0x00A0 - 0x0094)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                                // 0x0094(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Vector");
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x0224 - 0x021C)
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                            // 0x021C(0x0004)
	unsigned long                                      bIsPlaying : 1;                                           // 0x021C(0x0004)
	class UAudioComponent*                             AudioComponent;                                           // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}

};


// Class Engine.AmbientSoundMovable
// 0x0000 (0x0224 - 0x0224)
class AAmbientSoundMovable : public AAmbientSound
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundMovable");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimple
// 0x000C (0x0230 - 0x0224)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                        // 0x0224(0x0004)
	class USoundCue*                                   SoundCueInstance;                                         // 0x0228(0x0004)
	class USoundNodeAmbient*                           SoundNodeInstance;                                        // 0x022C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimple");
		return ptr;
	}

};


// Class Engine.AmbientSoundNonLoop
// 0x0000 (0x0230 - 0x0230)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundNonLoop");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimpleToggleable
// 0x0014 (0x0244 - 0x0230)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	unsigned long                                      bCurrentlyPlaying : 1;                                    // 0x0230(0x0004) (Edit)
	unsigned long                                      bFadeOnToggle : 1;                                        // 0x0230(0x0004)
	float                                              FadeInDuration;                                           // 0x0234(0x0004)
	float                                              FadeInVolumeLevel;                                        // 0x0238(0x0004)
	float                                              FadeOutDuration;                                          // 0x023C(0x0004)
	float                                              FadeOutVolumeLevel;                                       // 0x0240(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimpleToggleable");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void OnToggle();
	void StopPlaying();
	void StartPlaying();
	void ReplicatedEvent();
	void PostBeginPlay();
};


// Class Engine.DistributionFloatSoundParameter
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatSoundParameter");
		return ptr;
	}

};


// Class Engine.SoundNode
// 0x0010 (0x004C - 0x003C)
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                           // 0x003C(0x0004)
	TArray<class USoundNode*>                          ChildNodes;                                               // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}

};


// Class Engine.SoundNodeAmbient
// 0x00E4 (0x0130 - 0x004C)
class USoundNodeAmbient : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                           // 0x004C(0x0004)
	unsigned long                                      bSpatialize : 1;                                          // 0x004C(0x0004)
	unsigned long                                      bAttenuateWithLPF : 1;                                    // 0x004C(0x0004)
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                          // 0x004C(0x0004)
	float                                              dBAttenuationAtMax;                                       // 0x0050(0x0004)
	TEnumAsByte<ESoundDistanceModel>                   DistanceModel;                                            // 0x0054(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              RadiusMin;                                                // 0x0058(0x0004)
	float                                              RadiusMax;                                                // 0x005C(0x0004)
	float                                              LPFRadiusMin;                                             // 0x0060(0x0004)
	float                                              LPFRadiusMax;                                             // 0x0064(0x0004)
	float                                              PitchMin;                                                 // 0x0068(0x0004)
	float                                              PitchMax;                                                 // 0x006C(0x0004)
	float                                              VolumeMin;                                                // 0x0070(0x0004)
	float                                              VolumeMax;                                                // 0x0074(0x0004)
	TArray<struct FAmbientSoundSlot>                   SoundSlots;                                               // 0x0078(0x000C)
	class USoundNodeWave*                              Wave;                                                     // 0x0084(0x0004)
	struct FRawDistributionFloat                       MinRadius;                                                // 0x0088(0x001C)
	struct FRawDistributionFloat                       MaxRadius;                                                // 0x00A4(0x001C)
	struct FRawDistributionFloat                       LPFMinRadius;                                             // 0x00C0(0x001C)
	struct FRawDistributionFloat                       LPFMaxRadius;                                             // 0x00DC(0x001C)
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x00F8(0x001C)
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x0114(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAmbient");
		return ptr;
	}

};


// Class Engine.SoundNodeAmbientNonLoop
// 0x0024 (0x0154 - 0x0130)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	float                                              DelayMin;                                                 // 0x0130(0x0004)
	float                                              DelayMax;                                                 // 0x0134(0x0004)
	struct FRawDistributionFloat                       DelayTime;                                                // 0x0138(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoop");
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x008C (0x00D8 - 0x004C)
class USoundNodeAttenuation : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                           // 0x004C(0x0004)
	unsigned long                                      bSpatialize : 1;                                          // 0x004C(0x0004)
	unsigned long                                      bAttenuateWithLPF : 1;                                    // 0x004C(0x0004)
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                          // 0x004C(0x0004)
	float                                              dBAttenuationAtMax;                                       // 0x0050(0x0004)
	TEnumAsByte<ESoundDistanceModel>                   DistanceAlgorithm;                                        // 0x0054(0x0001)
	TEnumAsByte<ESoundDistanceCalc>                    DistanceType;                                             // 0x0055(0x0001)
	TEnumAsByte<ESoundDistanceModel>                   DistanceModel;                                            // 0x0056(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0057(0x0001) MISSED OFFSET
	float                                              RadiusMin;                                                // 0x0058(0x0004)
	float                                              RadiusMax;                                                // 0x005C(0x0004)
	float                                              LPFRadiusMin;                                             // 0x0060(0x0004)
	float                                              LPFRadiusMax;                                             // 0x0064(0x0004)
	struct FRawDistributionFloat                       MinRadius;                                                // 0x0068(0x001C)
	struct FRawDistributionFloat                       MaxRadius;                                                // 0x0084(0x001C)
	struct FRawDistributionFloat                       LPFMinRadius;                                             // 0x00A0(0x001C)
	struct FRawDistributionFloat                       LPFMaxRadius;                                             // 0x00BC(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x000C (0x0058 - 0x004C)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x004C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0024 (0x0070 - 0x004C)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                 // 0x004C(0x0004)
	float                                              DelayMax;                                                 // 0x0050(0x0004)
	struct FRawDistributionFloat                       DelayDuration;                                            // 0x0054(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x000C (0x0058 - 0x004C)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                           // 0x004C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0028 (0x0074 - 0x004C)
class USoundNodeLooping : public USoundNode
{
public:
	unsigned long                                      bLoopIndefinitely : 1;                                    // 0x004C(0x0004)
	float                                              LoopCountMin;                                             // 0x0050(0x0004)
	float                                              LoopCountMax;                                             // 0x0054(0x0004)
	struct FRawDistributionFloat                       LoopCount;                                                // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x004C - 0x004C)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x000C (0x0058 - 0x004C)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x004C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0048 (0x0094 - 0x004C)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                 // 0x004C(0x0004)
	float                                              PitchMax;                                                 // 0x0050(0x0004)
	float                                              VolumeMin;                                                // 0x0054(0x0004)
	float                                              VolumeMax;                                                // 0x0058(0x0004)
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x005C(0x001C)
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x0078(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0038 (0x0084 - 0x004C)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x004C(0x001C)
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x0068(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0094 (0x00E0 - 0x004C)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned long                                      bModulateVolume : 1;                                      // 0x004C(0x0004)
	unsigned long                                      bModulatePitch : 1;                                       // 0x004C(0x0004)
	float                                              AmplitudeMin;                                             // 0x0050(0x0004)
	float                                              AmplitudeMax;                                             // 0x0054(0x0004)
	float                                              FrequencyMin;                                             // 0x0058(0x0004)
	float                                              FrequencyMax;                                             // 0x005C(0x0004)
	float                                              OffsetMin;                                                // 0x0060(0x0004)
	float                                              OffsetMax;                                                // 0x0064(0x0004)
	float                                              CenterMin;                                                // 0x0068(0x0004)
	float                                              CenterMax;                                                // 0x006C(0x0004)
	struct FRawDistributionFloat                       Amplitude;                                                // 0x0070(0x001C)
	struct FRawDistributionFloat                       Frequency;                                                // 0x008C(0x001C)
	struct FRawDistributionFloat                       Offset;                                                   // 0x00A8(0x001C)
	struct FRawDistributionFloat                       Center;                                                   // 0x00C4(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0030 (0x007C - 0x004C)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x004C(0x000C)
	unsigned long                                      bRandomizeWithoutReplacement : 1;                         // 0x0058(0x0004)
	unsigned long                                      bDontPlayNodesConsecutive : 1;                            // 0x0058(0x0004)
	int                                                NumOfConsecutiveRemembered;                               // 0x005C(0x0004)
	TArray<int>                                        UsedOrder;                                                // 0x0060(0x000C)
	TArray<unsigned long>                              HasBeenUsed;                                              // 0x006C(0x000C)
	int                                                NumRandomUsed;                                            // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}

};


// Class Engine.SoundNodeWave
// 0x0154 (0x01A0 - 0x004C)
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                                       // 0x004C(0x0004)
	unsigned long                                      bForceRealTimeDecompression : 1;                          // 0x0050(0x0004)
	unsigned long                                      bLoopingSound : 1;                                        // 0x0050(0x0004)
	unsigned long                                      bDynamicResource : 1;                                     // 0x0050(0x0004)
	unsigned long                                      bUseTTS : 1;                                              // 0x0050(0x0004)
	unsigned long                                      bProcedural : 1;                                          // 0x0050(0x0004)
	unsigned long                                      bMature : 1;                                              // 0x0050(0x0004)
	unsigned long                                      bManualWordWrap : 1;                                      // 0x0050(0x0004)
	unsigned long                                      bUseOnAndroid : 1;                                        // 0x0050(0x0004)
	TEnumAsByte<ETTSSpeaker>                           TTSSpeaker;                                               // 0x0054(0x0001)
	TEnumAsByte<EDecompressionType>                    DecompressionType;                                        // 0x0055(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0056(0x0002) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0058(0x000C)
	float                                              Volume;                                                   // 0x0064(0x0004)
	float                                              Pitch;                                                    // 0x0068(0x0004)
	float                                              Duration;                                                 // 0x006C(0x0004)
	int                                                NumChannels;                                              // 0x0070(0x0004)
	int                                                SampleRate;                                               // 0x0074(0x0004)
	TArray<int>                                        ChannelOffsets;                                           // 0x0078(0x000C)
	TArray<int>                                        ChannelSizes;                                             // 0x0084(0x000C)
	struct FUntypedBulkData_Mirror                     RawData;                                                  // 0x0090(0x0034)
	struct FPointer                                    VorbisDecompressor;                                       // 0x00C4(0x0004)
	struct FPointer                                    RawPCMData;                                               // 0x00C8(0x0004)
	int                                                RawPCMDataSize;                                           // 0x00CC(0x0004)
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                         // 0x00D0(0x0034)
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                                    // 0x0104(0x0034)
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                        // 0x0138(0x0034)
	int                                                ResourceID;                                               // 0x016C(0x0004)
	int                                                ResourceSize;                                             // 0x0170(0x0004)
	struct FPointer                                    ResourceData;                                             // 0x0174(0x0004)
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x0178(0x000C)
	struct FString                                     Comment;                                                  // 0x0184(0x000C) (ExportObject)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                                       // 0x0190(0x000C)
	int                                                CookingMobilePriority;                                    // 0x019C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWave");
		return ptr;
	}


	void GeneratePCMData();
};


// Class Engine.SoundNodeWaveStreaming
// 0x000C (0x01AC - 0x01A0)
class USoundNodeWaveStreaming : public USoundNodeWave
{
public:
	TArray<unsigned char>                              QueuedAudio;                                              // 0x01A0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWaveStreaming");
		return ptr;
	}


	void GeneratePCMData();
	void AvailableAudioBytes();
	void ResetAudio();
	void QueueAudio();
};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0054 - 0x004C)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x004C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}

};


// Class Engine.Terrain
// 0x0114 (0x0330 - 0x021C)
class ATerrain : public AInfo
{
public:
	TArray<struct FTerrainHeight>                      Heights;                                                  // 0x021C(0x000C)
	TArray<struct FTerrainInfoData>                    InfoData;                                                 // 0x0228(0x000C)
	TArray<struct FTerrainLayer>                       Layers;                                                   // 0x0234(0x000C)
	int                                                NormalMapLayer;                                           // 0x0240(0x0004)
	TArray<struct FTerrainDecoLayer>                   DecoLayers;                                               // 0x0244(0x000C)
	TArray<struct FAlphaMap>                           AlphaMaps;                                                // 0x0250(0x000C)
	TArray<class UTerrainComponent*>                   TerrainComponents;                                        // 0x025C(0x000C) (Input)
	int                                                NumSectionsX;                                             // 0x0268(0x0004)
	int                                                NumSectionsY;                                             // 0x026C(0x0004)
	int                                                SectionSize;                                              // 0x0270(0x0004)
	TArray<struct ATerrain_FTerrainWeightedMaterial>   WeightedMaterials;                                        // 0x0274(0x000C)
	TArray<class UTerrainWeightMapTexture*>            WeightedTextureMaps;                                      // 0x0280(0x000C)
	TArray<unsigned char>                              CachedDisplacements;                                      // 0x028C(0x000C)
	float                                              MaxCollisionDisplacement;                                 // 0x0298(0x0004)
	int                                                MaxTesselationLevel;                                      // 0x029C(0x0004)
	int                                                MinTessellationLevel;                                     // 0x02A0(0x0004)
	float                                              TesselationDistanceScale;                                 // 0x02A4(0x0004)
	float                                              TessellationCheckDistance;                                // 0x02A8(0x0004)
	int                                                CollisionTesselationLevel;                                // 0x02AC(0x0004)
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[0x2];                              // 0x02B0(0x000C)
	int                                                NumVerticesX;                                             // 0x02C8(0x0004)
	int                                                NumVerticesY;                                             // 0x02CC(0x0004)
	int                                                NumPatchesX;                                              // 0x02D0(0x0004)
	int                                                NumPatchesY;                                              // 0x02D4(0x0004)
	int                                                MaxComponentSize;                                         // 0x02D8(0x0004)
	int                                                StaticLightingResolution;                                 // 0x02DC(0x0004)
	unsigned long                                      bIsOverridingLightResolution : 1;                         // 0x02E0(0x0004)
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;                    // 0x02E0(0x0004)
	unsigned long                                      bCastShadow : 1;                                          // 0x02E0(0x0004)
	unsigned long                                      bForceDirectLightMap : 1;                                 // 0x02E0(0x0004)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x02E0(0x0004)
	unsigned long                                      bEnableSpecular : 1;                                      // 0x02E0(0x0004)
	unsigned long                                      bBlockRigidBody : 1;                                      // 0x02E0(0x0004)
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                            // 0x02E0(0x0004)
	unsigned long                                      bAcceptsDynamicLights : 1;                                // 0x02E0(0x0004)
	unsigned long                                      bMorphingEnabled : 1;                                     // 0x02E0(0x0004)
	unsigned long                                      bMorphingGradientsEnabled : 1;                            // 0x02E0(0x0004)
	unsigned long                                      bLocked : 1;                                              // 0x02E0(0x0004)
	unsigned long                                      bHeightmapLocked : 1;                                     // 0x02E0(0x0004)
	unsigned long                                      bShowingCollision : 1;                                    // 0x02E0(0x0004)
	unsigned long                                      bShowWireframe : 1;                                       // 0x02E0(0x0004)
	class UPhysicalMaterial*                           TerrainPhysMaterialOverride;                              // 0x02E4(0x0004)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x02E8(0x0004)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x02EC(0x001C)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x0308(0x0004)
	int                                                EditorTessellationLevel;                                  // 0x030C(0x0004)
	TArray<struct FSelectedTerrainVertex>              SelectedVertices;                                         // 0x0310(0x000C)
	struct FColor                                      WireframeColor;                                           // 0x031C(0x0004)
	struct FGuid                                       LightingGuid;                                             // 0x0320(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Terrain");
		return ptr;
	}


	void PostBeginPlay();
	void CalcLayerBounds();
};


// Class Engine.TerrainComponent
// 0x0094 (0x0258 - 0x01C4)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray<class UShadowMap2D*>                        ShadowMaps;                                               // 0x01C4(0x000C)
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x01D0(0x000C)
	struct FPointer                                    TerrainObject;                                            // 0x01DC(0x0004)
	int                                                SectionBaseX;                                             // 0x01E0(0x0004)
	int                                                SectionBaseY;                                             // 0x01E4(0x0004)
	int                                                SectionSizeX;                                             // 0x01E8(0x0004)
	int                                                SectionSizeY;                                             // 0x01EC(0x0004)
	int                                                TrueSectionSizeX;                                         // 0x01F0(0x0004)
	int                                                TrueSectionSizeY;                                         // 0x01F4(0x0004)
	struct FPointer                                    LightMap;                                                 // 0x01F8(0x0004)
	TArray<int>                                        PatchBounds;                                              // 0x01FC(0x000C)
	TArray<int>                                        PatchBatches;                                             // 0x0208(0x000C)
	TArray<int>                                        BatchMaterials;                                           // 0x0214(0x000C)
	int                                                FullBatch;                                                // 0x0220(0x0004)
	struct FPointer                                    PatchBatchOffsets;                                        // 0x0224(0x0004)
	struct FPointer                                    WorkingOffsets;                                           // 0x0228(0x0004)
	struct FPointer                                    PatchBatchTriangles;                                      // 0x022C(0x0004)
	struct FPointer                                    PatchCachedTessellationValues;                            // 0x0230(0x0004)
	struct FPointer                                    TesselationLevels;                                        // 0x0234(0x0004)
	struct FTerrainBVTree                              BVTree;                                                   // 0x0238(0x000C)
	TArray<struct FVector>                             CollisionVertices;                                        // 0x0244(0x000C)
	struct FPointer                                    RBHeightfield;                                            // 0x0250(0x0004)
	unsigned long                                      bDisplayCollisionLevel : 1;                               // 0x0254(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainComponent");
		return ptr;
	}

};


// Class Engine.TerrainWeightMapTexture
// 0x0010 (0x0194 - 0x0184)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                            // 0x0184(0x0004)
	TArray<struct FPointer>                            WeightedMaterials;                                        // 0x0188(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainWeightMapTexture");
		return ptr;
	}

};


// Class Engine.TerrainLayerSetup
// 0x000C (0x0048 - 0x003C)
class UTerrainLayerSetup : public UObject
{
public:
	TArray<struct FTerrainFilteredMaterial>            Materials;                                                // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainLayerSetup");
		return ptr;
	}


	void PostBeginPlay();
	void SetMaterials();
};


// Class Engine.TerrainMaterial
// 0x0070 (0x00AC - 0x003C)
class UTerrainMaterial : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToMapping;                                           // 0x0040(0x0040)
	TEnumAsByte<ETerrainMappingType>                   MappingType;                                              // 0x0080(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              MappingScale;                                             // 0x0084(0x0004)
	float                                              MappingRotation;                                          // 0x0088(0x0004)
	float                                              MappingPanU;                                              // 0x008C(0x0004)
	float                                              MappingPanV;                                              // 0x0090(0x0004)
	class UMaterialInterface*                          Material;                                                 // 0x0094(0x0004)
	class UTexture2D*                                  DisplacementMap;                                          // 0x0098(0x0004)
	float                                              DisplacementScale;                                        // 0x009C(0x0004)
	TArray<struct FTerrainFoliageMesh>                 FoliageMeshes;                                            // 0x00A0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainMaterial");
		return ptr;
	}

};


// Class Engine.UIRoot
// 0x0000 (0x003C - 0x003C)
class UUIRoot : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIRoot");
		return ptr;
	}


	void STATIC_GetOnlinePlayerInterfaceEx();
	void STATIC_GetOnlinePlayerInterface();
	void STATIC_GetOnlineGameInterface();
	void STATIC_ConvertWidgetIDToString();
	void STATIC_GetDataStoreStringValue();
	void STATIC_GetDataStoreFieldValue();
	void STATIC_SetDataStoreStringValue();
	void STATIC_SetDataStoreFieldValue();
	void STATIC_StaticResolveDataStore();
	void STATIC_GetPrimitiveTransform();
	void STATIC_SetMouseCaptureOverride();
	void STATIC_GetCursorSize();
	void STATIC_GetCursorPosition();
	void STATIC_GetFaceOrientation();
	void STATIC_GetSceneClient();
	void STATIC_GetCurrentUIController();
	void STATIC_IsEditor();
	void STATIC_IsConsole();
	void STATIC_GetInputPlatformType();
};


// Class Engine.UIAnimation
// 0x0000 (0x003C - 0x003C)
class UUIAnimation : public UUIRoot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAnimation");
		return ptr;
	}

};


// Class Engine.UIScreenObject
// 0x01A0 (0x01DC - 0x003C)
class UUIScreenObject : public UUIRoot
{
public:
	struct FUIScreenValue_Bounds                       Position;                                                 // 0x003C(0x001C)
	float                                              ZDepth;                                                   // 0x0058(0x0004)
	unsigned long                                      bHidden : 1;                                              // 0x005C(0x0004)
	unsigned long                                      bInitialized : 1;                                         // 0x005C(0x0004)
	unsigned long                                      bNeverFocus : 1;                                          // 0x005C(0x0004)
	unsigned long                                      RestrictFocusToOwner : 1;                                 // 0x005C(0x0004)
	unsigned long                                      AcceptGamepadNavigation : 1;                              // 0x005C(0x0004)
	unsigned long                                      bSupportsFocusHint : 1;                                   // 0x005C(0x0004)
	unsigned long                                      bOverrideInputOrder : 1;                                  // 0x005C(0x0004)
	unsigned long                                      bAnimating : 1;                                           // 0x005C(0x0004)
	unsigned long                                      bAnimationPaused : 1;                                     // 0x005C(0x0004)
	unsigned long                                      bSupports3DPrimitives : 1;                                // 0x005C(0x0004)
	unsigned long                                      bDontPlayAnimationSounds : 1;                             // 0x005C(0x0004)
	unsigned long                                      bHasMatrix : 1;                                           // 0x005C(0x0004)
	TArray<class UUIObject*>                           Children;                                                 // 0x0060(0x000C)
	TArray<class UClass*>                              DefaultStates;                                            // 0x006C(0x000C)
	class UClass*                                      InitialState;                                             // 0x0078(0x0004)
	TArray<class UUIState*>                            InactiveStates;                                           // 0x007C(0x000C)
	TArray<class UUIState*>                            StateStack;                                               // 0x0088(0x000C)
	TArray<struct FPlayerInteractionData>              FocusControls;                                            // 0x0094(0x000C)
	TArray<struct FUIFocusPropagationData>             FocusPropagation;                                         // 0x00A0(0x000C)
	TArray<struct FUIAnimSequence>                     AnimStack;                                                // 0x00AC(0x000C)
	int                                                AnimationCount;                                           // 0x00B8(0x0004)
	float                                              AnimationDebugMultiplier;                                 // 0x00BC(0x0004)
	float                                              Opacity;                                                  // 0x00C0(0x0004)
	class UUIComp_Event*                               EventProvider;                                            // 0x00C4(0x0004)
	struct FName                                       FocusedCue;                                               // 0x00C8(0x0008)
	struct FName                                       MouseEnterCue;                                            // 0x00D0(0x0008)
	struct FName                                       NavigateUpCue;                                            // 0x00D8(0x0008)
	struct FName                                       NavigateDownCue;                                          // 0x00E0(0x0008)
	struct FName                                       NavigateLeftCue;                                          // 0x00E8(0x0008)
	struct FName                                       NavigateRightCue;                                         // 0x00F0(0x0008)
	TArray<struct FScriptDelegate>                     KeyFrameCompletedDelegates;                               // 0x00F8(0x000C)
	TArray<struct FScriptDelegate>                     TrackCompletedDelegates;                                  // 0x0104(0x000C)
	struct FVector                                     PostTransform;                                            // 0x0110(0x000C)
	struct FVector                                     PostTranslationOffset;                                    // 0x011C(0x000C)
	TArray<TEnumAsByte<EConsoleType>>                  ConsoleInclusionList;                                     // 0x0128(0x000C)
	TArray<TEnumAsByte<EConsoleType>>                  ConsoleExclusionList;                                     // 0x0134(0x000C)
	struct FScriptDelegate                             __NotifyActiveSkinChanged__Delegate;                      // 0x0140(0x000C)
	struct FScriptDelegate                             __OnRawInputKey__Delegate;                                // 0x014C(0x000C)
	struct FScriptDelegate                             __OnRawInputAxis__Delegate;                               // 0x0158(0x000C)
	struct FScriptDelegate                             __OnProcessInputKey__Delegate;                            // 0x0164(0x000C)
	struct FScriptDelegate                             __OnProcessInputAxis__Delegate;                           // 0x0170(0x000C)
	struct FScriptDelegate                             __NotifyPositionChanged__Delegate;                        // 0x017C(0x000C)
	struct FScriptDelegate                             __NotifyResolutionChanged__Delegate;                      // 0x0188(0x000C)
	struct FScriptDelegate                             __NotifyActiveStateChanged__Delegate;                     // 0x0194(0x000C)
	struct FScriptDelegate                             __NotifyVisibilityChanged__Delegate;                      // 0x01A0(0x000C)
	struct FScriptDelegate                             __OnInitialSceneUpdate__Delegate;                         // 0x01AC(0x000C)
	struct FScriptDelegate                             __OnUIAnim_KeyFrameCompleted__Delegate;                   // 0x01B8(0x000C)
	struct FScriptDelegate                             __OnUIAnim_TrackCompleted__Delegate;                      // 0x01C4(0x000C)
	struct FScriptDelegate                             __AllowNavigationAway__Delegate;                          // 0x01D0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScreenObject");
		return ptr;
	}


	void AllowInputAlias();
	void AllowNavigationAway();
	void LostFocus();
	void GainedFocus();
	void GetFocusGainedName();
	void GetFocusLostName();
	void LogCurrentState();
	void Find_UIAnimTrackCompletedHandler();
	void Find_UIAnimKeyFrameCompletedHandler();
	void Remove_UIAnimTrackCompletedHandler();
	void Remove_UIAnimKeyFrameCompletedHandler();
	void Add_UIAnimTrackCompletedHandler();
	void Add_UIAnimKeyFrameCompletedHandler();
	void ActivateTrackCompletedDelegates();
	void ActivateKeyFrameCompletedDelegates();
	void UIAnimationEnded();
	void UIAnimationStarted();
	void IsAnimationPaused();
	void PauseAnimations();
	void IsAnimating();
	void ClearUIAnimationLoop();
	void StopUIAnimation();
	void PlayUIAnimation();
	void FindAnimationSequenceIndex();
	void TickAnimations();
	void AnimGetCurrentPPSettings();
	void Anim_SetValue();
	void Anim_GetValue();
	void OnUIAnim_TrackCompleted();
	void OnUIAnim_KeyFrameCompleted();
	void BecomePrimaryPlayer();
	void GetNATType();
	void STATIC_GetLoggedInControllerIds();
	void STATIC_GetLoggedInPlayerCount();
	void CanPlayOnline();
	void STATIC_HasLinkConnection();
	void GetLoginStatus();
	void OnConsoleCommand();
	void DisableWidget();
	void EnableWidget();
	void GetParent();
	void ActivateFocusHint();
	void GetSupportedUIActionKeyNames();
	void DisablePlayerInput();
	void EnablePlayerInput();
	void SetVisibility();
	void PrivateSetVisibility();
	void IsGamepadConnected();
	void IsLoggedIn();
	void RemovedFromParent();
	void RemovedChild();
	void AddedChild();
	void PostInitialize();
	void Initialized();
	void GetWidgetPathName();
	void ShouldHideForConsole();
	void GetAspectRatioAutoScaleFactor();
	void GetInverseCanvasToScreen();
	void GetCanvasToScreen();
	void PixelToCanvas();
	void ScreenToCanvas();
	void PixelToScreen();
	void ScreenToPixel();
	void CanvasToScreen();
	void DeProject();
	void Project();
	void GetDockedWidgets();
	void STATIC_ResolveUIExtent();
	void GetPositionVector();
	void GetBounds();
	void GetPosition();
	void SetPosition();
	void InvalidateAllPositions();
	void InvalidatePosition();
	void GetPlayerOwnerIndex();
	void GetBestControllerId();
	void GetBestPlayerIndex();
	void GetSupportedPlayerCount();
	void STATIC_GetActivePlayerCount();
	void SetInputMask();
	void GetInputMask();
	void AcceptsPlayerInput();
	void IsRuntimeInstance();
	void IsPressed();
	void IsActive();
	void IsFocused();
	void IsDisabled();
	void IsEnabled();
	void OverrideLastFocusedControl();
	void GetLastFocusedControl();
	void GetFocusedControl();
	void KillFocus();
	void SetFocusToChild();
	void SetFocus();
	void CanPropagateFocusFor();
	void CanAcceptFocus();
	void IsNeverFocused();
	void NavigateFocus();
	void PrevControl();
	void NextControl();
	void FocusLastControl();
	void FocusFirstControl();
	void IsHoldingShift();
	void IsHoldingAlt();
	void IsHoldingCtrl();
	void ConditionalPropagateEnabledState();
	void DeactivateStateByClass();
	void DeactivateState();
	void ActivateStateByClass();
	void ActivateState();
	void HasActiveStateOfClass();
	void GetCurrentState();
	void SetEnabled();
	void FindEventsOfClass();
	void ActivateEventByClass();
	void GetAspectRatio();
	void GetViewportHeight();
	void GetViewportWidth();
	void GetViewportSize();
	void GetViewportOrigin();
	void GetViewportScale();
	void GetViewportOffset();
	void RebuildNavigationLinks();
	void RequestPrimitiveReview();
	void RequestSceneInputMaskUpdate();
	void RequestFormattingUpdate();
	void RequestSceneUpdate();
	void GetDockClients();
	void GetObjectCount();
	void GetChildren();
	void ContainsChildOfClass();
	void ContainsChild();
	void FindChildIndex();
	void FindChildUsingID();
	void FindChild();
	void ReplaceChild();
	void ReparentChildren();
	void ReparentChild();
	void RemoveChildren();
	void RemoveChild();
	void InsertChild();
	void Initialize();
	void InstanceUIPrefab();
	void CreateWidget();
	void STATIC_PlayUISound();
	void GetPlayerOwner();
	void InitializePlayerTracking();
	void RemovePlayerData();
	void CreatePlayerData();
	void SetZDepth();
	void GetZDepth();
	void IsHidden();
	void IsVisible();
	void IsInitialized();
	void OnInitialSceneUpdate();
	void NotifyVisibilityChanged();
	void NotifyActiveStateChanged();
	void NotifyResolutionChanged();
	void NotifyPositionChanged();
	void OnProcessInputAxis();
	void OnProcessInputKey();
	void OnRawInputAxis();
	void OnRawInputKey();
	void NotifyActiveSkinChanged();
};


// Class Engine.UIComponent
// 0x0000 (0x0048 - 0x0048)
class UUIComponent : public UComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComponent");
		return ptr;
	}

};


// Class Engine.UIComp_Event
// 0x0020 (0x0068 - 0x0048)
class UUIComp_Event : public UUIComponent
{
public:
	TArray<struct FDefaultEventSpecification>          DefaultEvents;                                            // 0x0048(0x000C)
	class UUISequence*                                 EventContainer;                                           // 0x0054(0x0004)
	class UUIEvent_ProcessInput*                       InputProcessor;                                           // 0x0058(0x0004)
	TArray<struct FName>                               DisabledEventAliases;                                     // 0x005C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_Event");
		return ptr;
	}


	void UnregisterInputEvents();
	void RegisterInputEvents();
};


// Class Engine.UIEventContainer
// 0x0000 (0x003C - 0x003C)
class UUIEventContainer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEventContainer");
		return ptr;
	}


	void RemoveSequenceObjects();
	void RemoveSequenceObject();
	void AddSequenceObject();
	void GetUIEvents();
};


// Class Engine.DataStoreClient
// 0x003C (0x0078 - 0x003C)
class UDataStoreClient : public UUIRoot
{
public:
	TArray<struct FString>                             GlobalDataStoreClasses;                                   // 0x003C(0x000C)
	TArray<class UUIDataStore*>                        GlobalDataStores;                                         // 0x0048(0x000C)
	TArray<struct FString>                             PlayerDataStoreClassNames;                                // 0x0054(0x000C)
	TArray<class UClass*>                              PlayerDataStoreClasses;                                   // 0x0060(0x000C)
	TArray<struct FPlayerDataStoreGroup>               PlayerDataStores;                                         // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataStoreClient");
		return ptr;
	}


	void DebugDumpDataStoreInfo();
	void NotifyGameSessionEnded();
	void FindDataStoreClass();
	void GetPlayerDataStoreClasses();
	void FindPlayerDataStoreIndex();
	void GetAvailableDataStores();
	void UnregisterDataStore();
	void RegisterDataStore();
	void CreateDataStore();
	void FindDataStore();
};


// Class Engine.Interaction
// 0x0030 (0x006C - 0x003C)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;                     // 0x003C(0x000C)
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;                    // 0x0048(0x000C)
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;                    // 0x0054(0x000C)
	struct FScriptDelegate                             __OnInitialize__Delegate;                                 // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interaction");
		return ptr;
	}


	void NotifyPlayerRemoved();
	void NotifyPlayerAdded();
	void NotifyGameSessionEnded();
	void Initialized();
	void OnInitialize();
	void Init();
	void PostRender();
	void Tick();
	void OnReceivedNativeInputChar();
	void OnReceivedNativeInputAxis();
	void OnReceivedNativeInputKey();
};


// Class Engine.Console
// 0x0174 (0x01E0 - 0x006C)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                                      // 0x006C(0x0004)
	class UUIScene*                                    LargeConsoleScene;                                        // 0x0070(0x0004)
	class UUIScene*                                    MiniConsoleScene;                                         // 0x0074(0x0004)
	class UUILabel*                                    ConsoleBufferText;                                        // 0x0078(0x0004)
	class UConsoleEntry*                               MiniConsoleInput;                                         // 0x007C(0x0004)
	class UConsoleEntry*                               LargeConsoleInput;                                        // 0x0080(0x0004)
	class UTexture2D*                                  DefaultTexture_Black;                                     // 0x0084(0x0004)
	class UTexture2D*                                  DefaultTexture_White;                                     // 0x0088(0x0004)
	struct FName                                       ConsoleKey;                                               // 0x008C(0x0008)
	struct FName                                       TypeKey;                                                  // 0x0094(0x0008)
	int                                                MaxScrollbackSize;                                        // 0x009C(0x0004)
	TArray<struct FString>                             Scrollback;                                               // 0x00A0(0x000C)
	int                                                SBHead;                                                   // 0x00AC(0x0004)
	int                                                SBPos;                                                    // 0x00B0(0x0004)
	int                                                HistoryTop;                                               // 0x00B4(0x0004)
	int                                                HistoryBot;                                               // 0x00B8(0x0004)
	int                                                HistoryCur;                                               // 0x00BC(0x0004)
	struct FString                                     History[0x10];                                            // 0x00C0(0x000C)
	unsigned long                                      bNavigatingHistory : 1;                                   // 0x0180(0x0004)
	unsigned long                                      bCaptureKeyInput : 1;                                     // 0x0180(0x0004)
	unsigned long                                      bCtrl : 1;                                                // 0x0180(0x0004)
	unsigned long                                      bEnableUI : 1;                                            // 0x0180(0x0004)
	unsigned long                                      bAutoCompleteLocked : 1;                                  // 0x0180(0x0004)
	unsigned long                                      bRequireCtrlToNavigateAutoComplete : 1;                   // 0x0180(0x0004)
	unsigned long                                      bIsRuntimeAutoCompleteUpToDate : 1;                       // 0x0180(0x0004)
	struct FString                                     TypedStr;                                                 // 0x0184(0x000C)
	int                                                TypedStrPos;                                              // 0x0190(0x0004)
	TArray<struct FAutoCompleteCommand>                ManualAutoCompleteList;                                   // 0x0194(0x000C)
	TArray<struct FAutoCompleteCommand>                AutoCompleteList;                                         // 0x01A0(0x000C)
	int                                                AutoCompleteIndex;                                        // 0x01AC(0x0004)
	class UFont*                                       ConsoleFont;                                              // 0x01B0(0x0004)
	float                                              ConsoleOpenSecondsTime;                                   // 0x01B4(0x0004)
	struct FAutoCompleteNode                           AutoCompleteTree;                                         // 0x01B8(0x001C)
	TArray<int>                                        AutoCompleteIndices;                                      // 0x01D4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}


	void UpdateCompleteIndices();
	void BuildRuntimeAutoCompleteList();
	void AppendInputText();
	void ProcessControlKey();
	void FlushPlayerInput();
	void IsUIMiniConsoleOpen();
	void IsUIConsoleOpen();
	void InputChar();
	void InputKey();
	void PostRender_Console();
	void StartTyping();
	void OutputText();
	void OutputTextLine();
	void ClearOutput();
	void ConsoleCommand();
	void chunkMessage();
	void PurgeCommandFromHistory();
	void SetCursorPos();
	void SetInputText();
	void Initialized();
};


// Class Engine.Input
// 0x006C (0x00D8 - 0x006C)
class UInput : public UInteraction
{
public:
	TArray<struct FKeyBind>                            Bindings;                                                 // 0x006C(0x000C)
	TArray<struct FName>                               PressedKeys;                                              // 0x0078(0x000C)
	TEnumAsByte<EInputEvent>                           CurrentEvent;                                             // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	float                                              CurrentDelta;                                             // 0x0088(0x0004)
	float                                              CurrentDeltaTime;                                         // 0x008C(0x0004)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0090(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	TArray<struct FPointer>                            AxisArray;                                                // 0x00CC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Input");
		return ptr;
	}


	void SetBind();
	void GetBind();
	void ResetInput();
};


// Class Engine.PlayerInput
// 0x0098 (0x0170 - 0x00D8)
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                        // 0x00D8(0x0004)
	unsigned long                                      bInvertMouse : 1;                                         // 0x00D8(0x0004)
	unsigned long                                      bInvertTurn : 1;                                          // 0x00D8(0x0004)
	unsigned long                                      bWasForward : 1;                                          // 0x00D8(0x0004)
	unsigned long                                      bWasBack : 1;                                             // 0x00D8(0x0004)
	unsigned long                                      bWasLeft : 1;                                             // 0x00D8(0x0004)
	unsigned long                                      bWasRight : 1;                                            // 0x00D8(0x0004)
	unsigned long                                      bEdgeForward : 1;                                         // 0x00D8(0x0004)
	unsigned long                                      bEdgeBack : 1;                                            // 0x00D8(0x0004)
	unsigned long                                      bEdgeLeft : 1;                                            // 0x00D8(0x0004)
	unsigned long                                      bEdgeRight : 1;                                           // 0x00D8(0x0004)
	unsigned long                                      bEnableMouseSmoothing : 1;                                // 0x00D8(0x0004)
	unsigned long                                      bEnableFOVScaling : 1;                                    // 0x00D8(0x0004)
	unsigned long                                      bLockTurnUntilRelease : 1;                                // 0x00D8(0x0004)
	struct FName                                       LastAxisKeyName;                                          // 0x00DC(0x0008)
	float                                              DoubleClickTimer;                                         // 0x00E4(0x0004)
	float                                              DoubleClickTime;                                          // 0x00E8(0x0004)
	float                                              MouseSensitivity;                                         // 0x00EC(0x0004)
	float                                              aBaseX;                                                   // 0x00F0(0x0004)
	float                                              aBaseY;                                                   // 0x00F4(0x0004)
	float                                              aBaseZ;                                                   // 0x00F8(0x0004)
	float                                              aMouseX;                                                  // 0x00FC(0x0004)
	float                                              aMouseY;                                                  // 0x0100(0x0004)
	float                                              aForward;                                                 // 0x0104(0x0004)
	float                                              aTurn;                                                    // 0x0108(0x0004)
	float                                              aStrafe;                                                  // 0x010C(0x0004)
	float                                              aUp;                                                      // 0x0110(0x0004)
	float                                              aLookUp;                                                  // 0x0114(0x0004)
	float                                              aRightAnalogTrigger;                                      // 0x0118(0x0004)
	float                                              aLeftAnalogTrigger;                                       // 0x011C(0x0004)
	float                                              aPS3AccelX;                                               // 0x0120(0x0004)
	float                                              aPS3AccelY;                                               // 0x0124(0x0004)
	float                                              aPS3AccelZ;                                               // 0x0128(0x0004)
	float                                              aPS3Gyro;                                                 // 0x012C(0x0004)
	float                                              RawJoyUp;                                                 // 0x0130(0x0004)
	float                                              RawJoyRight;                                              // 0x0134(0x0004)
	float                                              RawJoyLookRight;                                          // 0x0138(0x0004)
	float                                              RawJoyLookUp;                                             // 0x013C(0x0004)
	float                                              MoveForwardSpeed;                                         // 0x0140(0x0004)
	float                                              MoveStrafeSpeed;                                          // 0x0144(0x0004)
	float                                              LookRightScale;                                           // 0x0148(0x0004)
	float                                              LookUpScale;                                              // 0x014C(0x0004)
	unsigned char                                      bStrafe;                                                  // 0x0150(0x0001)
	unsigned char                                      bXAxis;                                                   // 0x0151(0x0001)
	unsigned char                                      bYAxis;                                                   // 0x0152(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0153(0x0001) MISSED OFFSET
	float                                              ZeroTime[0x2];                                            // 0x0154(0x0004)
	float                                              SmoothedMouse[0x2];                                       // 0x015C(0x0004)
	int                                                MouseSamples;                                             // 0x0164(0x0004)
	float                                              MouseSamplingTotal;                                       // 0x0168(0x0004)
	float                                              AutoUnlockTurnTime;                                       // 0x016C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}


	void SmoothMouse();
	void ClearSmoothing();
	void SmartJump();
	void Jump();
	void ProcessInputMatching();
	void CheckForDoubleClickMove();
	void CatchDoubleClickInput();
	void PlayerInput();
	void AdjustMouseSensitivity();
	void PostProcessInput();
	void PreProcessInput();
	void DrawHUD();
	void SetSensitivity();
	void InvertTurn();
	void InvertMouse();
};


// Class Engine.PlayerManagerInteraction
// 0x0000 (0x006C - 0x006C)
class UPlayerManagerInteraction : public UInteraction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerManagerInteraction");
		return ptr;
	}

};


// Class Engine.UIInteraction
// 0x0140 (0x01AC - 0x006C)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x006C(0x0004)
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;                    // 0x0070(0x0004)
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0074(0x0004)
	class UClass*                                      SceneClientClass;                                         // 0x0078(0x0004)
	class UGameUISceneClient*                          SceneClient;                                              // 0x007C(0x0004)
	struct FString                                     UISkinName;                                               // 0x0080(0x000C)
	TArray<struct FName>                               UISoundCueNames;                                          // 0x008C(0x000C)
	TArray<struct FName>                               SupportedDoubleClickKeys;                                 // 0x0098(0x000C)
	class UDataStoreClient*                            DataStoreManager;                                         // 0x00A4(0x0004)
	class UUIInputConfiguration*                       UIInputConfig;                                            // 0x00A8(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00AC(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.WidgetInputAliasLookupTable
	unsigned long                                      bProcessInput : 1;                                        // 0x00E8(0x0004)
	unsigned long                                      bDisableToolTips : 1;                                     // 0x00E8(0x0004)
	unsigned long                                      bFocusOnActive : 1;                                       // 0x00E8(0x0004)
	unsigned long                                      bFocusedStateRules : 1;                                   // 0x00E8(0x0004)
	unsigned long                                      bIsUIPrimitiveSceneInitialized : 1;                       // 0x00E8(0x0004)
	float                                              UIJoystickDeadZone;                                       // 0x00EC(0x0004)
	float                                              UIAxisMultiplier;                                         // 0x00F0(0x0004)
	float                                              AxisRepeatDelay;                                          // 0x00F4(0x0004)
	float                                              MouseButtonRepeatDelay;                                   // 0x00F8(0x0004)
	float                                              DoubleClickTriggerSeconds;                                // 0x00FC(0x0004)
	int                                                DoubleClickPixelTolerance;                                // 0x0100(0x0004)
	float                                              ToolTipInitialDelaySeconds;                               // 0x0104(0x0004)
	float                                              ToolTipExpirationSeconds;                                 // 0x0108(0x0004)
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                                    // 0x010C(0x0010)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x011C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	struct FUIAxisEmulationData                        AxisInputEmulation[0x4];                                  // 0x0158(0x0014)
	struct FPointer                                    CanvasScene;                                              // 0x01A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIInteraction");
		return ptr;
	}


	void NotifyGameSessionEnded();
	void STATIC_GetNATType();
	void CanAllPlayOnline();
	void STATIC_CanPlayOnline();
	void STATIC_GetConnectedGamepadCount();
	void STATIC_IsGamepadConnected();
	void STATIC_GetNumGuestsLoggedIn();
	void STATIC_GetLoggedInPlayerCount();
	void STATIC_IsGuest();
	void STATIC_IsLoggedIn();
	void STATIC_HasLinkConnection();
	void GetLowestLoginStatusOfControllers();
	void STATIC_GetGuestStatus();
	void STATIC_GetLoginStatus();
	void SetMousePosition();
	void NotifyPlayerRemoved();
	void NotifyPlayerAdded();
	void STATIC_GetLocalPlayer();
	void CreateScene();
	void CreateTransientWidget();
	void PlayUISound();
	void STATIC_GetDataStoreClient();
	void STATIC_GetPlayerControllerId();
	void STATIC_GetPlayerIndex();
	void STATIC_GetPlayerCount();
};


// Class Engine.UIInputConfiguration
// 0x0018 (0x0054 - 0x003C)
class UUIInputConfiguration : public UUIRoot
{
public:
	TArray<struct FUIInputAliasClassMap>               WidgetInputAliases;                                       // 0x003C(0x000C)
	TArray<struct FUIAxisEmulationDefinition>          AxisEmulationDefinitions;                                 // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIInputConfiguration");
		return ptr;
	}


	void NotifyGameSessionEnded();
	void LoadInputAliasClasses();
};


// Class Engine.UILayerBase
// 0x0000 (0x003C - 0x003C)
class UUILayerBase : public UUIRoot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UILayerBase");
		return ptr;
	}

};


// Class Engine.UISceneClient
// 0x00CC (0x0108 - 0x003C)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x003C(0x0004)
	struct FPointer                                    RenderViewport;                                           // 0x0040(0x0004)
	class UUISkin*                                     ActiveSkin;                                               // 0x0044(0x0004)
	struct FIntPoint                                   MousePosition;                                            // 0x0048(0x0008)
	class UUIObject*                                   ActiveControl[0x4];                                       // 0x0050(0x0004)
	class UDataStoreClient*                            DataStoreManager;                                         // 0x0060(0x0004)
	class UMaterialInstanceConstant*                   OpacityParameter;                                         // 0x0064(0x0004)
	struct FName                                       OpacityParameterName;                                     // 0x0068(0x0008)
	struct FName                                       ColorParameterName;                                       // 0x0070(0x0008)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                           // 0x0080(0x0040)
	struct FMatrix                                     InvCanvasToScreen;                                        // 0x00C0(0x0040)
	class UPostProcessChain*                           UIScenePostProcess;                                       // 0x0100(0x0004)
	unsigned long                                      bEnablePostProcess : 1;                                   // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISceneClient");
		return ptr;
	}


	void InitializeSceneClient();
	void GetInverseCanvasToScreen();
	void GetCanvasToScreen();
	void UpdateCanvasToScreen();
	void ChangeMouseCursor();
	void SetMousePosition();
	void CloseSceneAtIndex();
	void CloseScene();
	void ReplaceSceneAtIndex();
	void ReplaceScene();
	void InsertScene();
	void OpenScene();
	void InitializeScene();
	void IsSceneInitialized();
	void IsUIActive();
	void ChangeActiveSkin();
};


// Class Engine.UIState
// 0x002A (0x0066 - 0x003C)
class UUIState : public UUIRoot
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                                // 0x003C(0x0004)
	class UUIStateSequence*                            StateSequence;                                            // 0x0040(0x0004)
	TArray<struct FInputKeyAction>                     StateInputActions;                                        // 0x0044(0x000C)
	TArray<struct FInputKeyAction>                     DisabledInputActions;                                     // 0x0050(0x000C)
	struct FName                                       MouseCursorName;                                          // 0x005C(0x0008)
	unsigned char                                      PlayerIndexMask;                                          // 0x0064(0x0001)
	unsigned char                                      StackPriority;                                            // 0x0065(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState");
		return ptr;
	}


	void RemoveSequenceObjects();
	void RemoveSequenceObject();
	void AddSequenceObject();
	void GetUIEvents();
	void IsStateAllowed();
	void OnDeactivate();
	void OnActivate();
	void DeactivateState();
	void ActivateState();
	void IsActiveForPlayer();
	void IsWidgetClassSupported();
};


// Class Engine.UIState_Disabled
// 0x0002 (0x0068 - 0x0066)
class UUIState_Disabled : public UUIState
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Disabled");
		return ptr;
	}


	void IsStateAllowed();
	void ActivateState();
};


// Class Engine.UIState_Enabled
// 0x0002 (0x0068 - 0x0066)
class UUIState_Enabled : public UUIState
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Enabled");
		return ptr;
	}

};


// Class Engine.UIString
// 0x00C4 (0x0100 - 0x003C)
class UUIString : public UUIRoot
{
public:
	TArray<struct FPointer>                            Nodes;                                                    // 0x003C(0x000C)
	struct FUICombinedStyleData                        StringStyleData;                                          // 0x0048(0x00B0)
	struct FVector2D                                   StringExtent;                                             // 0x00F8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIString");
		return ptr;
	}


	void ContainsMarkup();
	void GetAutoScaleValue();
	void GetValue();
	void SetValue();
};


// Class Engine.UIDataProvider
// 0x001C (0x0058 - 0x003C)
class UUIDataProvider : public UUIRoot
{
public:
	TEnumAsByte<EProviderAccessType>                   WriteAccessType;                                          // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ProviderChangedNotifies;                                  // 0x0040(0x000C)
	struct FScriptDelegate                             __OnDataProviderPropertyChange__Delegate;                 // 0x004C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider");
		return ptr;
	}


	void ParseTagArrayDelimiter();
	void RemovePropertyNotificationChangeRequest();
	void AddPropertyNotificationChangeRequest();
	void NotifyPropertyChanged();
	void IsCollectionDataType();
	void IsProviderDisabled();
	void GenerateFillerData();
	void GenerateScriptMarkupString();
	void SetFieldValue();
	void GetFieldValue();
	void AllowPublishingToField();
	void GetSupportedScriptFields();
	void ParseArrayDelimiter();
	void GetProviderFieldType();
	void OnDataProviderPropertyChange();
};


// Class Engine.UIDataStore
// 0x0020 (0x0078 - 0x0058)
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                                      // 0x0058(0x0008)
	TArray<struct FScriptDelegate>                     RefreshSubscriberNotifies;                                // 0x0060(0x000C)
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;                      // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore");
		return ptr;
	}


	void GetDataStoreClient();
	void OnCommit();
	void RefreshSubscribers();
	void NotifyGameSessionEnded();
	void SubscriberDetached();
	void SubscriberAttached();
	void Unregistered();
	void Registered();
	void OnDataStoreValueUpdated();
};


// Class Engine.UISkin
// 0x0120 (0x0198 - 0x0078)
class UUISkin : public UUIDataStore
{
public:
	TArray<class UUIStyle*>                            Styles;                                                   // 0x0078(0x000C)
	TArray<struct FString>                             StyleGroups;                                              // 0x0084(0x000C)
	TArray<struct FUISoundCue>                         SoundCues;                                                // 0x0090(0x000C)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x009C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleLookupTable
	unsigned char                                      UnknownData01[0x3C];                                      // 0x00D8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleNameMap
	TArray<struct FString>                             StyleGroupMap;                                            // 0x0114(0x000C)
	unsigned char                                      UnknownData02[0x3C];                                      // 0x0120(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.CursorMap
	unsigned char                                      UnknownData03[0x3C];                                      // 0x015C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UISkin.SoundCueMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISkin");
		return ptr;
	}


	void SubscriberDetached();
	void SubscriberAttached();
	void GetStyleGroups();
	void FindStyleGroupIndex();
	void RenameStyleGroup();
	void RemoveStyleGroupName();
	void AddStyleGroupName();
	void IsInheritedGroupName();
	void GetSkinSoundCues();
	void GetUISoundCue();
	void RemoveUISoundCue();
	void AddUISoundCue();
	void GetCursorResource();
	void GetAvailableStyles();
};


// Class Engine.UIStyle
// 0x0070 (0x00AC - 0x003C)
class UUIStyle : public UUIRoot
{
public:
	struct FSTYLE_ID                                   StyleID;                                                  // 0x003C(0x0010)
	struct FName                                       StyleTag;                                                 // 0x004C(0x0008)
	struct FString                                     StyleName;                                                // 0x0054(0x000C)
	struct FString                                     StyleGroupName;                                           // 0x0060(0x000C)
	class UClass*                                      StyleDataClass;                                           // 0x006C(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0070(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIStyle.StateDataMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle");
		return ptr;
	}


	void GetDefaultStyle();
	void GetStyleForStateByClass();
	void GetStyleForState();
};


// Class Engine.UIObject
// 0x0298 (0x0474 - 0x01DC)
class UUIObject : public UUIScreenObject
{
public:
	struct FWIDGET_ID                                  WidgetID;                                                 // 0x01DC(0x0010)
	struct FName                                       WidgetTag;                                                // 0x01EC(0x0008)
	class UUIObject*                                   Owner;                                                    // 0x01F4(0x0004)
	class UUIScene*                                    OwnerScene;                                               // 0x01F8(0x0004)
	struct FUIStyleReference                           PrimaryStyle;                                             // 0x01FC(0x0020)
	unsigned char                                      PlayerInputMask;                                          // 0x021C(0x0001)
	TEnumAsByte<EUIPostProcessGroup>                   MaskPostProcess;                                          // 0x021D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x021E(0x0002) MISSED OFFSET
	struct FUINavigationData                           NavigationTargets;                                        // 0x0220(0x0024)
	int                                                TabIndex;                                                 // 0x0244(0x0004)
	unsigned long                                      bIgnoreGamepadFocusEffect : 1;                            // 0x0248(0x0004)
	unsigned long                                      bForceClickedAnimationOnSelf : 1;                         // 0x0248(0x0004)
	unsigned long                                      bEnableActiveCursorUpdates : 1;                           // 0x0248(0x0004)
	unsigned long                                      bSupportsPrimaryStyle : 1;                                // 0x0248(0x0004)
	unsigned long                                      bEnableSceneUpdateNotifications : 1;                      // 0x0248(0x0004)
	unsigned long                                      bDebugShowBounds : 1;                                     // 0x0248(0x0004)
	struct FUIDockingSet                               DockTargets;                                              // 0x024C(0x0038)
	float                                              RenderBounds[0x4];                                        // 0x0284(0x0004)
	struct FVector2D                                   RenderBoundsVertices[0x4];                                // 0x0294(0x0008)
	unsigned char                                      UnknownData01[0xC];                                       // 0x02B4(0x000C) MISSED OFFSET
	struct FUIRotation                                 Rotation;                                                 // 0x02C0(0x0070)
	struct FVector                                     RenderOffset;                                             // 0x0330(0x000C)
	class USurface*                                    GameCursorOverride;                                       // 0x033C(0x0004)
	struct FName                                       ClickedAnimation;                                         // 0x0340(0x0008)
	int                                                PrivateFlags;                                             // 0x0348(0x0004)
	struct FUIDataStoreBinding                         ToolTip;                                                  // 0x034C(0x0030)
	struct FUIDataStoreBinding                         ContextMenuData;                                          // 0x037C(0x0030)
	class UUIObject*                                   AnimationParent;                                          // 0x03AC(0x0004)
	TArray<TScriptInterface<class UUIStyleResolver>>   StyleSubscribers;                                         // 0x03B0(0x000C)
	struct FColor                                      DebugBoundsColor;                                         // 0x03BC(0x0004)
	struct FScriptDelegate                             __OnCreate__Delegate;                                     // 0x03C0(0x000C)
	struct FScriptDelegate                             __OnPreSceneUpdate__Delegate;                             // 0x03CC(0x000C)
	struct FScriptDelegate                             __OnPostSceneUpdate__Delegate;                            // 0x03D8(0x000C)
	struct FScriptDelegate                             __OnValueChanged__Delegate;                               // 0x03E4(0x000C)
	struct FScriptDelegate                             __OnRefreshSubscriberValue__Delegate;                     // 0x03F0(0x000C)
	struct FScriptDelegate                             __OnPressed__Delegate;                                    // 0x03FC(0x000C)
	struct FScriptDelegate                             __OnPressRepeat__Delegate;                                // 0x0408(0x000C)
	struct FScriptDelegate                             __OnPressRelease__Delegate;                               // 0x0414(0x000C)
	struct FScriptDelegate                             __OnClicked__Delegate;                                    // 0x0420(0x000C)
	struct FScriptDelegate                             __OnDoubleClick__Delegate;                                // 0x042C(0x000C)
	struct FScriptDelegate                             __OnOpenContextMenu__Delegate;                            // 0x0438(0x000C)
	struct FScriptDelegate                             __OnCloseContextMenu__Delegate;                           // 0x0444(0x000C)
	struct FScriptDelegate                             __OnPostRender__Delegate;                                 // 0x0450(0x000C)
	struct FScriptDelegate                             __OnSubRender__Delegate;                                  // 0x045C(0x000C)
	struct FScriptDelegate                             __OnContextMenuItemSelected__Delegate;                    // 0x0468(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIObject");
		return ptr;
	}


	void AllowInputAlias();
	void LogRenderBounds();
	void ClearDockTargets();
	void GetParent();
	void GetOwner();
	void GetScene();
	void SetWidgetStyleByName();
	void FindStyleSubscriberIndexById();
	void FindStyleSubscriberIndex();
	void RemoveStyleSubscriber();
	void AddStyleSubscriber();
	void GetPositionExtent();
	void GetPositionExtents();
	void NeedsActiveCursorUpdates();
	void SetActiveCursorUpdate();
	void SetPrivateBehavior();
	void IsPrivateBehaviorSet();
	void CanAcceptFocus();
	void SetForcedNavigationTarget();
	void SetNavigationTarget();
	void IsDockedTo();
	void GetDockParameters();
	void SetDockParameters();
	void SetDockPadding();
	void SetDockTarget();
	void IsContainedBy();
	void NotifyValueChanged();
	void GetRotationMatrix();
	void GenerateTransformMatrix();
	void GetAnchorPosition();
	void UpdateRotationMatrix();
	void RotateWidget();
	void SetAnchorPosition();
	void HasTransform();
	void GetToolTipValue();
	void GenerateSceneDataStoreMarkup();
	void ClearDefaultDataBinding();
	void GetDefaultDataStores();
	void ResolveDefaultDataBinding();
	void GetDefaultDataBinding();
	void SetDefaultDataBinding();
	void OnContextMenuItemSelected();
	void OnSubRender();
	void OnPostRender();
	void OnCloseContextMenu();
	void OnOpenContextMenu();
	void OnDoubleClick();
	void OnClicked();
	void OnPressRelease();
	void OnPressRepeat();
	void OnPressed();
	void OnRefreshSubscriberValue();
	void OnValueChanged();
	void OnPostSceneUpdate();
	void OnPreSceneUpdate();
	void OnCreate();
};


// Class Engine.UIComp_AutoAlignment
// 0x0002 (0x004A - 0x0048)
class UUIComp_AutoAlignment : public UUIComponent
{
public:
	TEnumAsByte<EUIAlignment>                          HorzAlignment;                                            // 0x0048(0x0001)
	TEnumAsByte<EUIAlignment>                          VertAlignment;                                            // 0x0049(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_AutoAlignment");
		return ptr;
	}

};


// Class Engine.UIComp_DrawComponents
// 0x0024 (0x006C - 0x0048)
class UUIComp_DrawComponents : public UUIComponent
{
public:
	TEnumAsByte<EFadeType>                             FadeType;                                                 // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              FadeAlpha;                                                // 0x004C(0x0004)
	float                                              FadeTarget;                                               // 0x0050(0x0004)
	float                                              FadeTime;                                                 // 0x0054(0x0004)
	float                                              LastRenderTime;                                           // 0x0058(0x0004)
	float                                              FadeRate;                                                 // 0x005C(0x0004)
	struct FScriptDelegate                             __OnFadeComplete__Delegate;                               // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawComponents");
		return ptr;
	}


	void OnFadeComplete();
	void ResetFade();
	void Pulse();
	void Fade();
};


// Class Engine.UIComp_DrawImage
// 0x0090 (0x00FC - 0x006C)
class UUIComp_DrawImage : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                                 // 0x006C(0x0004)
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;                       // 0x0070(0x0004)
	struct FName                                       StyleResolverTag;                                         // 0x0074(0x0008)
	class UUITexture*                                  ImageRef;                                                 // 0x007C(0x0004)
	struct FUIImageStyleOverride                       StyleCustomization;                                       // 0x0080(0x005C)
	struct FUIStyleReference                           ImageStyle;                                               // 0x00DC(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawImage");
		return ptr;
	}


	void NotifyResolveStyle();
	void SetStyleResolverTag();
	void GetStyleResolverTag();
	void GetImage();
	void DisableCustomFormatting();
	void DisableCustomPadding();
	void DisableCustomOpacity();
	void DisableCustomColor();
	void DisableCustomCoordinates();
	void SetFormatting();
	void SetPadding();
	void SetOpacity();
	void SetColor();
	void SetCoordinates();
	void SetImage();
	void GetAppliedImageStyle();
};


// Class Engine.UIComp_DrawString
// 0x0118 (0x0184 - 0x006C)
class UUIComp_DrawString : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                                 // 0x006C(0x0004)
	TScriptInterface<class UUIDataStoreSubscriber>     SubscriberOwner;                                          // 0x0070(0x0008)
	struct FName                                       StyleResolverTag;                                         // 0x0078(0x0008)
	class UUIString*                                   ValueString;                                              // 0x0080(0x0004)
	class UClass*                                      StringClass;                                              // 0x0084(0x0004)
	unsigned long                                      bForceDropShadows : 1;                                    // 0x0088(0x0004)
	unsigned long                                      bIgnoreMarkup : 1;                                        // 0x0088(0x0004)
	unsigned long                                      bAllowBoundsAdjustment : 1;                               // 0x0088(0x0004)
	unsigned long                                      bRefreshString : 1;                                       // 0x0088(0x0004)
	unsigned long                                      bReapplyFormatting : 1;                                   // 0x0088(0x0004)
	unsigned long                                      ShouldWrapBeforeScaling : 1;                              // 0x0088(0x0004)
	TArray<struct FDropShadowInfo>                     dropShadowList;                                           // 0x008C(0x000C)
	struct FAutoSizeData                               AutoSizeParameters[0x2];                                  // 0x0098(0x001C)
	struct FUIRenderingSubregion                       ClampRegion[0x2];                                         // 0x00D0(0x0018)
	struct FUITextStyleOverride                        TextStyleCustomization;                                   // 0x0100(0x0064)
	struct FUIStyleReference                           StringStyle;                                              // 0x0164(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawString");
		return ptr;
	}


	void SetAutoSizePadding();
	void EnableAutoSizing();
	void IsAutoSizeEnabled();
	void SetAutoSizeExtent();
	void NotifyResolveStyle();
	void SetStyleResolverTag();
	void GetStyleResolverTag();
	void GetFinalStringStyle();
	void GetAppliedStringStyle();
	void GetWrapMode();
	void DisableCustomSpacingAdjust();
	void DisableCustomScale();
	void DisableCustomAutoScaling();
	void DisableCustomClipAlignment();
	void DisableCustomClipMode();
	void DisableCustomAlignment();
	void DisableCustomAttributes();
	void DisableCustomFont();
	void DisableCustomPadding();
	void DisableCustomOpacity();
	void DisableCustomColor();
	void SetSpacingAdjust();
	void SetScale();
	void SetAutoScaling();
	void SetClipAlignment();
	void SetWrapMode();
	void SetAlignment();
	void SetAttributes();
	void SetFont();
	void SetPadding();
	void SetOpacity();
	void SetColor();
	void SetSubregionAlignment();
	void SetSubregionOffset();
	void SetSubregionSize();
	void EnableSubregion();
	void GetSubregionAlignment();
	void GetSubregionOffset();
	void GetSubregionSize();
	void IsSubregionEnabled();
	void RefreshValue();
	void GetValue();
	void SetValue();
};


// Class Engine.UIComp_DrawCaption
// 0x0000 (0x0184 - 0x0184)
class UUIComp_DrawCaption : public UUIComp_DrawString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawCaption");
		return ptr;
	}

};


// Class Engine.UIEditBox
// 0x0060 (0x04D4 - 0x0474)
class UUIEditBox : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0474(0x0004)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x0478(0x0030)
	class UUIComp_DrawStringEditbox*                   StringRenderComponent;                                    // 0x04A8(0x0004)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x04AC(0x0004)
	struct FString                                     InitialValue;                                             // 0x04B0(0x000C)
	unsigned long                                      bReadOnly : 1;                                            // 0x04BC(0x0004)
	unsigned long                                      bPasswordMode : 1;                                        // 0x04BC(0x0004)
	int                                                MaxCharacters;                                            // 0x04C0(0x0004)
	TEnumAsByte<EEditBoxCharacterSet>                  CharacterSet;                                             // 0x04C4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnSubmitText__Delegate;                                 // 0x04C8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEditBox");
		return ptr;
	}


	void IgnoreMarkup();
	void SetReadOnly();
	void IsReadOnly();
	void Initialized();
	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void CalculateCaretPositionFromCursorLocation();
	void GetValue();
	void SetValue();
	void SetBackgroundImage();
	void OnSubmitText();
};


// Class Engine.UIComp_DrawStringEditbox
// 0x0060 (0x01E4 - 0x0184)
class UUIComp_DrawStringEditbox : public UUIComp_DrawString
{
public:
	struct FString                                     UserText;                                                 // 0x0184(0x000C)
	struct FUIStringCaretParameters                    StringCaret;                                              // 0x0190(0x001C)
	struct FUIStringSelectionRegion                    SelectionRegion;                                          // 0x01AC(0x0008)
	struct FLinearColor                                SelectionTextColor;                                       // 0x01B4(0x0010)
	struct FLinearColor                                SelectionBackgroundColor;                                 // 0x01C4(0x0010)
	struct FPointer                                    CaretNode;                                                // 0x01D4(0x0004)
	int                                                FirstCharacterPosition;                                   // 0x01D8(0x0004)
	unsigned long                                      bRecalculateFirstCharacter : 1;                           // 0x01DC(0x0004)
	unsigned long                                      bDontDrawSelection : 1;                                   // 0x01DC(0x0004)
	float                                              CaretOffset;                                              // 0x01E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawStringEditbox");
		return ptr;
	}


	void GetSelectedText();
	void GetSelectionRange();
	void ClearSelection();
	void SetSelectionEnd();
	void SetSelectionStart();
	void SetSelectionRange();
	void GetUserTextLength();
	void SetUserText();
};


// Class Engine.UIComp_DrawStringSlider
// 0x0000 (0x0184 - 0x0184)
class UUIComp_DrawStringSlider : public UUIComp_DrawString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_DrawStringSlider");
		return ptr;
	}

};


// Class Engine.UIList
// 0x02B0 (0x0724 - 0x0474)
class UUIList : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0474(0x0004)
	struct FUIScreenValue_Extent                       RowHeight;                                                // 0x0478(0x0008)
	struct FUIScreenValue_Extent                       MinColumnSize;                                            // 0x0480(0x0008)
	struct FUIScreenValue_Extent                       ColumnWidth;                                              // 0x0488(0x0008)
	struct FUIScreenValue_Extent                       HeaderCellPadding;                                        // 0x0490(0x0008)
	struct FUIScreenValue_Extent                       HeaderElementSpacing;                                     // 0x0498(0x0008)
	struct FUIScreenValue_Extent                       CellSpacing;                                              // 0x04A0(0x0008)
	struct FUIScreenValue_Extent                       CellPadding;                                              // 0x04A8(0x0008)
	int                                                Index;                                                    // 0x04B0(0x0004)
	int                                                TopIndex;                                                 // 0x04B4(0x0004)
	int                                                MaxVisibleItems;                                          // 0x04B8(0x0004)
	int                                                ColumnCount;                                              // 0x04BC(0x0004)
	int                                                RowCount;                                                 // 0x04C0(0x0004)
	TEnumAsByte<ECellAutoSizeMode>                     ColumnAutoSizeMode;                                       // 0x04C4(0x0001)
	TEnumAsByte<ECellAutoSizeMode>                     RowAutoSizeMode;                                          // 0x04C5(0x0001)
	TEnumAsByte<ECellLinkType>                         CellLinkType;                                             // 0x04C6(0x0001)
	TEnumAsByte<EListWrapBehavior>                     WrapType;                                                 // 0x04C7(0x0001)
	unsigned long                                      bEnableMultiSelect : 1;                                   // 0x04C8(0x0004)
	unsigned long                                      bEnableVerticalScrollbar : 1;                             // 0x04C8(0x0004)
	unsigned long                                      bInitializeScrollbars : 1;                                // 0x04C8(0x0004)
	unsigned long                                      bAllowDisabledItemSelection : 1;                          // 0x04C8(0x0004)
	unsigned long                                      bSingleClickSubmission : 1;                               // 0x04C8(0x0004)
	unsigned long                                      bUpdateItemUnderCursor : 1;                               // 0x04C8(0x0004)
	unsigned long                                      bHoverStateOverridesSelected : 1;                         // 0x04C8(0x0004)
	unsigned long                                      bForceFullPageDisplay : 1;                                // 0x04C8(0x0004)
	unsigned long                                      bAllowColumnResizing : 1;                                 // 0x04C8(0x0004)
	unsigned long                                      bDisplayDataBindings : 1;                                 // 0x04C8(0x0004)
	unsigned long                                      bSortingList : 1;                                         // 0x04C8(0x0004)
	class UUIScrollbar*                                VerticalScrollbar;                                        // 0x04CC(0x0004)
	struct FUIStyleReference                           GlobalCellStyle[0x4];                                     // 0x04D0(0x0020)
	struct FUIStyleReference                           ColumnHeaderStyle;                                        // 0x0550(0x0020)
	struct FUIStyleReference                           ColumnHeaderBackgroundStyle[0x3];                         // 0x0570(0x0020)
	struct FUIStyleReference                           ItemOverlayStyle[0x4];                                    // 0x05D0(0x0020)
	int                                                ResizeColumn;                                             // 0x0650(0x0004)
	int                                                SetIndexMutex;                                            // 0x0654(0x0004)
	int                                                ValueChangeNotificationMutex;                             // 0x0658(0x0004)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x065C(0x0030)
	TScriptInterface<class UUIListElementProvider>     DataProvider;                                             // 0x068C(0x0008)
	TArray<int>                                        Items;                                                    // 0x0694(0x000C)
	TArray<int>                                        SelectedItems;                                            // 0x06A0(0x000C)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x06AC(0x0004)
	class UUIComp_ListElementSorter*                   SortComponent;                                            // 0x06B0(0x0004)
	class UUIComp_ListPresenterBase*                   CellDataComponent;                                        // 0x06B4(0x0004)
	struct FName                                       SubmitDataSuccessCue;                                     // 0x06B8(0x0008)
	struct FName                                       SubmitDataFailedCue;                                      // 0x06C0(0x0008)
	struct FName                                       DecrementIndexCue;                                        // 0x06C8(0x0008)
	struct FName                                       IncrementIndexCue;                                        // 0x06D0(0x0008)
	struct FName                                       SortAscendingCue;                                         // 0x06D8(0x0008)
	struct FName                                       SortDescendingCue;                                        // 0x06E0(0x0008)
	struct FScriptDelegate                             __OnSubmitSelection__Delegate;                            // 0x06E8(0x000C)
	struct FScriptDelegate                             __OnListElementsSorted__Delegate;                         // 0x06F4(0x000C)
	struct FScriptDelegate                             __ShouldDisableElement__Delegate;                         // 0x0700(0x000C)
	struct FScriptDelegate                             __OnScrollFailed__Delegate;                               // 0x070C(0x000C)
	struct FScriptDelegate                             __OnOverrideListElementState__Delegate;                   // 0x0718(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIList");
		return ptr;
	}


	void OnStateChanged();
	void ClickedScrollZone();
	void ShouldRenderColumnHeaders();
	void EnableColumnHeaderRendering();
	void IsValueChangeNotificationEnabled();
	void DisableValueChangeNotification();
	void EnableValueChangeNotification();
	void IsSetIndexEnabled();
	void DisableSetIndex();
	void EnableSetIndex();
	void DecrementAllMutexes();
	void IncrementAllMutexes();
	void AllMutexesDisabled();
	void PostInitialize();
	void Initialized();
	void SaveSubscriberValue();
	void IsElementAutoSizingEnabled();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void IsHotTrackingEnabled();
	void SetHotTracking();
	void CanSelectElement();
	void IsElementSelected();
	void IsElementEnabled();
	void SetTopIndex();
	void NavigateIndex();
	void SetIndex();
	void FindItemIndex();
	void GetElementCellState();
	void SetElementCellState();
	void GetElementValue();
	void GetCurrentItem();
	void GetSelectedItems();
	void GetResizeColumn();
	void CalculateIndexFromCursorLocation();
	void GetClientRegion();
	void GetRowHeight();
	void GetColumnWidth();
	void SetRowCount();
	void SetColumnCount();
	void GetTotalColumnCount();
	void GetTotalRowCount();
	void GetMaxNumVisibleColumns();
	void GetMaxNumVisibleRows();
	void GetMaxVisibleElementCount();
	void GetItemCount();
	void RemoveElement();
	void ScrollVertical();
	void OnOverrideListElementState();
	void OnScrollFailed();
	void ShouldDisableElement();
	void OnListElementsSorted();
	void OnSubmitSelection();
};


// Class Engine.UIComp_ListComponentBase
// 0x0000 (0x0048 - 0x0048)
class UUIComp_ListComponentBase : public UUIComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListComponentBase");
		return ptr;
	}

};


// Class Engine.UIComp_ListElementSorter
// 0x0020 (0x0068 - 0x0048)
class UUIComp_ListElementSorter : public UUIComp_ListComponentBase
{
public:
	unsigned long                                      bAllowCompoundSorting : 1;                                // 0x0048(0x0004)
	unsigned long                                      bReversePrimarySorting : 1;                               // 0x0048(0x0004)
	unsigned long                                      bReverseSecondarySorting : 1;                             // 0x0048(0x0004)
	int                                                InitialSortColumn;                                        // 0x004C(0x0004)
	int                                                InitialSecondarySortColumn;                               // 0x0050(0x0004)
	int                                                PrimarySortColumn;                                        // 0x0054(0x0004)
	int                                                SecondarySortColumn;                                      // 0x0058(0x0004)
	struct FScriptDelegate                             __OverrideListSort__Delegate;                             // 0x005C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListElementSorter");
		return ptr;
	}


	void ResortItems();
	void SortItems();
	void ResetSortColumns();
	void OverrideListSort();
};


// Class Engine.UIComp_ListPresenterBase
// 0x001C (0x0064 - 0x0048)
class UUIComp_ListPresenterBase : public UUIComp_ListComponentBase
{
public:
	TArray<struct FHighlightRowCriteria>               highlightEntries;                                         // 0x0048(0x000C)
	unsigned long                                      bReapplyFormatting : 1;                                   // 0x0054(0x0004)
	struct FScriptDelegate                             __CustomizeCell__Delegate;                                // 0x0058(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListPresenterBase");
		return ptr;
	}


	void CustomizeCell();
	void AddHighlightCriteria();
	void GetMaxElementsPerPage();
	void SetMaxElementsPerPage();
	void GetElementValue();
	void EnableColumnHeaderRendering();
	void ShouldRenderColumnHeaders();
	void ShouldAdjustListBounds();
	void CalculateAutoSizeColumnWidth();
	void CalculateAutoSizeRowHeight();
	void GetSchemaCellPosition();
	void SetSchemaCellSize();
	void GetSchemaCellSize();
	void GetSchemaCellCount();
	void GetCellSchemaProvider();
};


// Class Engine.UIComp_ListPresenter
// 0x00B8 (0x011C - 0x0064)
class UUIComp_ListPresenter : public UUIComp_ListPresenterBase
{
public:
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;                       // 0x0064(0x0004)
	struct FUIElementCellSchema                        ElementSchema;                                            // 0x0068(0x000C)
	struct FUIScreenValue_Extent                       SelectionHintPadding;                                     // 0x0074(0x0008)
	TArray<struct FUIListItem>                         ListItems;                                                // 0x007C(0x000C)
	class UUITexture*                                  ColumnHeaderBackground[0x3];                              // 0x0088(0x0004)
	class UUITexture*                                  ListItemOverlay[0x4];                                     // 0x0094(0x0004)
	struct FTextureCoordinates                         ColumnHeaderBackgroundCoordinates[0x3];                   // 0x00A4(0x0010)
	struct FTextureCoordinates                         ListItemOverlayCoordinates[0x4];                          // 0x00D4(0x0010)
	int                                                MaxElementsPerPage;                                       // 0x0114(0x0004)
	unsigned long                                      bDisplayColumnHeaders : 1;                                // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListPresenter");
		return ptr;
	}


	void FindElementIndex();
};


// Class Engine.UIComp_ListPresenterCascade
// 0x0000 (0x011C - 0x011C)
class UUIComp_ListPresenterCascade : public UUIComp_ListPresenter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListPresenterCascade");
		return ptr;
	}

};


// Class Engine.UIContextMenu
// 0x0014 (0x0738 - 0x0724)
class UUIContextMenu : public UUIList
{
public:
	class UUIObject*                                   InvokingWidget;                                           // 0x0724(0x0004)
	TArray<struct FContextMenuItem>                    MenuItems;                                                // 0x0728(0x000C)
	unsigned long                                      bResolvePosition : 1;                                     // 0x0734(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIContextMenu");
		return ptr;
	}


	void FindMenuItemIndex();
	void GetMenuItem();
	void GetAllMenuItems();
	void RemoveMenuItemAtIndex();
	void RemoveMenuItem();
	void ClearMenuItems();
	void InsertMenuItem();
	void SetMenuItems();
	void Close();
	void Open();
	void IsActiveContextMenu();
};


// Class Engine.UIComp_ContextMenuListPresenter
// 0x0000 (0x011C - 0x011C)
class UUIComp_ContextMenuListPresenter : public UUIComp_ListPresenterCascade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ContextMenuListPresenter");
		return ptr;
	}

};


// Class Engine.UIComp_ListPresenterTree
// 0x0000 (0x011C - 0x011C)
class UUIComp_ListPresenterTree : public UUIComp_ListPresenter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ListPresenterTree");
		return ptr;
	}

};


// Class Engine.UIObjectList
// 0x0000 (0x0724 - 0x0724)
class UUIObjectList : public UUIList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIObjectList");
		return ptr;
	}


	void GetElementObjectValue();
};


// Class Engine.UIComp_ObjectListPresenter
// 0x0000 (0x011C - 0x011C)
class UUIComp_ObjectListPresenter : public UUIComp_ListPresenter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComp_ObjectListPresenter");
		return ptr;
	}

};


// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x003C - 0x003C)
class UUIDataStoreSubscriber : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStoreSubscriber");
		return ptr;
	}


	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
};


// Class Engine.UIDataStorePublisher
// 0x0000 (0x003C - 0x003C)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStorePublisher");
		return ptr;
	}


	void SaveSubscriberValue();
};


// Class Engine.UIListElementCellProvider
// 0x0000 (0x003C - 0x003C)
class UUIListElementCellProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIListElementCellProvider");
		return ptr;
	}

};


// Class Engine.UIListElementProvider
// 0x0000 (0x003C - 0x003C)
class UUIListElementProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIListElementProvider");
		return ptr;
	}

};


// Class Engine.UIAnimationSeq
// 0x0015 (0x0051 - 0x003C)
class UUIAnimationSeq : public UUIAnimation
{
public:
	struct FName                                       SeqName;                                                  // 0x003C(0x0008)
	TArray<struct FUIAnimTrack>                        Tracks;                                                   // 0x0044(0x000C)
	TEnumAsByte<EUIAnimationLoopMode>                  LoopMode;                                                 // 0x0050(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAnimationSeq");
		return ptr;
	}


	void GetSequenceLength();
	void GetTrackLength();
	void GetFrameLength();
	void IsValidFrameIndex();
};


// Class Engine.UIConfigProvider
// 0x0000 (0x0058 - 0x0058)
class UUIConfigProvider : public UUIDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIConfigProvider");
		return ptr;
	}

};


// Class Engine.UIConfigFileProvider
// 0x0018 (0x0070 - 0x0058)
class UUIConfigFileProvider : public UUIConfigProvider
{
public:
	TArray<class UUIConfigSectionProvider*>            Sections;                                                 // 0x0058(0x000C)
	struct FString                                     ConfigFileName;                                           // 0x0064(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIConfigFileProvider");
		return ptr;
	}

};


// Class Engine.UIConfigSectionProvider
// 0x000C (0x0064 - 0x0058)
class UUIConfigSectionProvider : public UUIConfigProvider
{
public:
	struct FString                                     SectionName;                                              // 0x0058(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIConfigSectionProvider");
		return ptr;
	}

};


// Class Engine.UIDataProvider_OnlinePlayerDataBase
// 0x0004 (0x005C - 0x0058)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	class ULocalPlayer*                                Player;                                                   // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerDataBase");
		return ptr;
	}


	void OnUnregister();
	void OnRegister();
};


// Class Engine.UIDataProvider_OnlineClanMates
// 0x0004 (0x0060 - 0x005C)
class UUIDataProvider_OnlineClanMates : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineClanMates");
		return ptr;
	}


	void OnClanMatesReadComplete();
	void OnRegister();
};


// Class Engine.UIDataProvider_OnlineFriendMessages
// 0x0058 (0x00B4 - 0x005C)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)
	TArray<struct FOnlineFriendMessage>                Messages;                                                 // 0x0060(0x000C)
	struct FString                                     SendingPlayerNameCol;                                     // 0x006C(0x000C)
	struct FString                                     bIsFriendInviteCol;                                       // 0x0078(0x000C)
	struct FString                                     bWasAcceptedCol;                                          // 0x0084(0x000C)
	struct FString                                     bWasDeniedCol;                                            // 0x0090(0x000C)
	struct FString                                     MessageCol;                                               // 0x009C(0x000C)
	struct FString                                     LastInviteFrom;                                           // 0x00A8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriendMessages");
		return ptr;
	}


	void OnGameInviteReceived();
	void OnLoginChange();
	void OnFriendMessageReceived();
	void OnFriendInviteReceived();
	void ReadMessages();
	void OnUnregister();
	void OnRegister();
};


// Class Engine.UIDataProvider_OnlineFriends
// 0x00B8 (0x0114 - 0x005C)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)
	TArray<struct FOnlineFriend>                       FriendsList;                                              // 0x0060(0x000C)
	struct FString                                     NickNameCol;                                              // 0x006C(0x000C)
	struct FString                                     PresenceInfoCol;                                          // 0x0078(0x000C)
	struct FString                                     FriendStateCol;                                           // 0x0084(0x000C)
	struct FString                                     bIsOnlineCol;                                             // 0x0090(0x000C)
	struct FString                                     bIsPlayingCol;                                            // 0x009C(0x000C)
	struct FString                                     bIsPlayingThisGameCol;                                    // 0x00A8(0x000C)
	struct FString                                     bIsJoinableCol;                                           // 0x00B4(0x000C)
	struct FString                                     bHasVoiceSupportCol;                                      // 0x00C0(0x000C)
	struct FString                                     bHaveInvitedCol;                                          // 0x00CC(0x000C)
	struct FString                                     bHasInvitedYouCol;                                        // 0x00D8(0x000C)
	struct FString                                     OfflineText;                                              // 0x00E4(0x000C)
	struct FString                                     OnlineText;                                               // 0x00F0(0x000C)
	struct FString                                     AwayText;                                                 // 0x00FC(0x000C)
	struct FString                                     BusyText;                                                 // 0x0108(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriends");
		return ptr;
	}


	void RefreshFriendsList();
	void OnLoginChange();
	void OnFriendsReadComplete();
	void OnUnregister();
	void OnRegister();
};


// Class Engine.UIDataProvider_OnlinePartyChatList
// 0x0070 (0x00CC - 0x005C)
class UUIDataProvider_OnlinePartyChatList : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)
	TArray<struct FOnlinePartyMember>                  PartyMembersList;                                         // 0x0060(0x000C)
	TArray<struct FString>                             NatTypes;                                                 // 0x006C(0x000C)
	struct FString                                     NickNameCol;                                              // 0x0078(0x000C)
	struct FString                                     NatTypeCol;                                               // 0x0084(0x000C)
	struct FString                                     IsLocalCol;                                               // 0x0090(0x000C)
	struct FString                                     IsInPartyVoiceCol;                                        // 0x009C(0x000C)
	struct FString                                     IsTalkingCol;                                             // 0x00A8(0x000C)
	struct FString                                     IsInGameSessionCol;                                       // 0x00B4(0x000C)
	struct FString                                     IsPlayingThisGameCol;                                     // 0x00C0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePartyChatList");
		return ptr;
	}


	void RefreshMembersList();
	void OnLoginChange();
	void OnUnregister();
	void OnRegister();
};


// Class Engine.UIDataProvider_OnlinePlayers
// 0x0004 (0x0060 - 0x005C)
class UUIDataProvider_OnlinePlayers : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayers");
		return ptr;
	}


	void OnPlayersReadComplete();
	void OnRegister();
};


// Class Engine.UIDataProvider_OnlinePlayerStorage
// 0x001C (0x0078 - 0x005C)
class UUIDataProvider_OnlinePlayerStorage : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlinePlayerStorage*                        Profile;                                                  // 0x005C(0x0004)
	struct FName                                       ProviderName;                                             // 0x0060(0x0008)
	unsigned long                                      bWasErrorLastRead : 1;                                    // 0x0068(0x0004)
	TArray<struct FPlayerStorageArrayProvider>         PlayerStorageArrayProviders;                              // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerStorage");
		return ptr;
	}


	void OnSettingValueUpdated();
	void ArrayProviderPropertyChanged();
	void SaveStorageData();
	void RefreshStorageData();
	void OnLoginChange();
	void OnReadStorageComplete();
	void OnUnregister();
	void OnRegister();
	void ClearReadCompleteDelegate();
	void AddReadCompleteDelegate();
	void WriteData();
	void ReadData();
};


// Class Engine.UIDataProvider_OnlineProfileSettings
// 0x0000 (0x0078 - 0x0078)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerStorage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineProfileSettings");
		return ptr;
	}


	void ClearReadCompleteDelegate();
	void AddReadCompleteDelegate();
	void WriteData();
	void ReadData();
};


// Class Engine.UIDataProvider_PlayerAchievements
// 0x0010 (0x006C - 0x005C)
class UUIDataProvider_PlayerAchievements : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)
	TArray<struct FAchievementDetails>                 Achievements;                                             // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_PlayerAchievements");
		return ptr;
	}


	void UpdateAchievements();
	void OnLoginChange();
	void OnUnregister();
	void OnRegister();
	void OnPlayerAchievementUnlocked();
	void OnPlayerAchievementsChanged();
	void GetAchievementDetails();
	void GetAchievementIconPathName();
	void PopulateAchievementIcons();
	void GetMaxTotalGamerScore();
	void GetTotalGamerScore();
};


// Class Engine.UIDataProvider_OnlinePlayerStorageArray
// 0x0030 (0x0088 - 0x0058)
class UUIDataProvider_OnlinePlayerStorageArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0058(0x0004)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)
	class UOnlinePlayerStorage*                        PlayerStorage;                                            // 0x0060(0x0004)
	int                                                PlayerStorageId;                                          // 0x0064(0x0004)
	struct FName                                       PlayerStorageName;                                        // 0x0068(0x0008)
	struct FString                                     ColumnHeaderText;                                         // 0x0070(0x000C)
	TArray<struct FName>                               Values;                                                   // 0x007C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerStorageArray");
		return ptr;
	}

};


// Class Engine.UIDataProvider_SettingsArray
// 0x0030 (0x0088 - 0x0058)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0058(0x0004)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)
	class USettings*                                   Settings;                                                 // 0x0060(0x0004)
	int                                                SettingsId;                                               // 0x0064(0x0004)
	struct FName                                       SettingsName;                                             // 0x0068(0x0008)
	struct FString                                     ColumnHeaderText;                                         // 0x0070(0x000C)
	TArray<struct FIdToStringMapping>                  Values;                                                   // 0x007C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_SettingsArray");
		return ptr;
	}

};


// Class Engine.SceneDataStore
// 0x0010 (0x0088 - 0x0078)
class USceneDataStore : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x007C(0x0004)
	class UUIScene*                                    OwnerScene;                                               // 0x0080(0x0004)
	class UUIDynamicFieldProvider*                     SceneDataProvider;                                        // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneDataStore");
		return ptr;
	}


	void Registered();
	void SceneDataFieldChanged();
	void FindCollectionValueIndex();
	void GetCollectionValue();
	void ClearCollectionValueArray();
	void ReplaceCollectionValueByIndex();
	void ReplaceCollectionValue();
	void RemoveCollectionValueByIndex();
	void RemoveCollectionValue();
	void InsertCollectionValue();
	void SetCollectionValueArray();
	void GetCollectionValueArray();
	void ClearFields();
	void FindFieldIndex();
	void RemoveField();
	void AddField();
};


// Class Engine.UIDataStore_Color
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Color : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Color");
		return ptr;
	}

};


// Class Engine.UIDataStore_DynamicResource
// 0x0054 (0x00CC - 0x0078)
class UUIDataStore_DynamicResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004)
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                          // 0x007C(0x0004)
	class UUIDataStore_GameResource*                   GameResourceDataStore;                                    // 0x0080(0x0004)
	TArray<struct FDynamicResourceProviderDefinition>  ResourceProviderDefinitions;                              // 0x0084(0x000C)
	struct FMultiMap_Mirror                            ResourceProviders;                                        // 0x0090(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_DynamicResource");
		return ptr;
	}


	void Unregistered();
	void Registered();
	void OnLoginChange();
	void FindProviderIndexByFieldValue();
	void GetProviderFieldValue();
	void GetResourceProviderFields();
	void GetResourceProviders();
	void GetProviderCount();
	void GenerateProviderAccessTag();
	void FindProviderTypeIndex();
};


// Class Engine.UIDataStore_Fonts
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Fonts");
		return ptr;
	}

};


// Class Engine.UIDataStore_GameResource
// 0x004C (0x00C4 - 0x0078)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004)
	TArray<struct FGameResourceDataProvider>           ElementProviderTypes;                                     // 0x007C(0x000C)
	struct FMultiMap_Mirror                            ListElementProviders;                                     // 0x0088(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_GameResource");
		return ptr;
	}


	void PostInit();
	void FindProviderIndexByFieldValue();
	void GetProviderFieldValue();
	void GetResourceProviderFields();
	void GetResourceProviders();
	void GetProviderCount();
	void GenerateProviderAccessTag();
	void FindProviderTypeIndex();
};


// Class Engine.UIDataStore_MenuItems
// 0x0050 (0x0114 - 0x00C4)
class UUIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
	struct FName                                       CurrentGameSettingsTag;                                   // 0x00C4(0x0008)
	struct FMultiMap_Mirror                            OptionProviders;                                          // 0x00CC(0x003C)
	TArray<class UUIDataProvider_MenuItem*>            DynamicProviders;                                         // 0x0108(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_MenuItems");
		return ptr;
	}


	void Unregistered();
	void Registered();
	void OnGameSettingsChanged();
	void GetSet();
	void AppendToSet();
	void ClearSet();
};


// Class Engine.UIDataStore_GameState
// 0x000C (0x0084 - 0x0078)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;                      // 0x0078(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_GameState");
		return ptr;
	}


	void NotifyGameSessionEnded();
	void OnRefreshDataFieldValue();
};


// Class Engine.CurrentGameDataStore
// 0x003C (0x00C0 - 0x0084)
class UCurrentGameDataStore : public UUIDataStore_GameState
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0084(0x0004)
	struct FGameDataProviderTypes                      ProviderTypes;                                            // 0x0088(0x000C)
	class UGameInfoDataProvider*                       GameData;                                                 // 0x0094(0x0004)
	TArray<class UPlayerDataProvider*>                 PlayerData;                                               // 0x0098(0x000C)
	TArray<class UTeamDataProvider*>                   TeamData;                                                 // 0x00A4(0x000C)
	unsigned long                                      bRefreshPlayerDataProviders : 1;                          // 0x00B0(0x0004)
	unsigned long                                      bRefreshTeamDataProviders : 1;                            // 0x00B0(0x0004)
	struct FScriptDelegate                             __OnAddTeamProvider__Delegate;                            // 0x00B4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurrentGameDataStore");
		return ptr;
	}


	void OnAddTeamProvider();
	void NotifyGameSessionEnded();
	void RefreshTeamDataProviders();
	void RefreshPlayerDataProviders();
	void NotifyTeamChange();
	void NotifyPlayersChanged();
	void Timer();
	void TeamDataProviderPropertyChange();
	void PlayerDataProviderPropertyChange();
	void ClearDataProviders();
	void GetTeamDataProvider();
	void GetPlayerDataProvider();
	void FindTeamDataProviderIndex();
	void FindPlayerDataProviderIndex();
	void RemoveTeamDataProvider();
	void AddTeamDataProvider();
	void RemovePlayerDataProvider();
	void AddPlayerDataProvider();
	void CreateGameDataProvider();
};


// Class Engine.PlayerOwnerDataStore
// 0x0030 (0x00B4 - 0x0084)
class UPlayerOwnerDataStore : public UUIDataStore_GameState
{
public:
	struct FPlayerDataProviderTypes                    ProviderTypes;                                            // 0x0084(0x0010)
	class UPlayerOwnerDataProvider*                    PlayerData;                                               // 0x0094(0x0004)
	class UCurrentWeaponDataProvider*                  CurrentWeapon;                                            // 0x0098(0x0004)
	TArray<class UWeaponDataProvider*>                 WeaponList;                                               // 0x009C(0x000C)
	TArray<class UPowerupDataProvider*>                PowerupList;                                              // 0x00A8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerOwnerDataStore");
		return ptr;
	}


	void NotifyGameSessionEnded();
	void ClearDataProviders();
	void SetPlayerDataProvider();
};


// Class Engine.UIDataStore_Gamma
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Gamma : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Gamma");
		return ptr;
	}

};


// Class Engine.UIDataStore_Images
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Images : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Images");
		return ptr;
	}

};


// Class Engine.UIDataStore_OnlinePlaylists
// 0x002C (0x00A4 - 0x0078)
class UUIDataStore_OnlinePlaylists : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004)
	struct FString                                     ProviderClassName;                                        // 0x007C(0x000C)
	class UClass*                                      ProviderClass;                                            // 0x0088(0x0004)
	TArray<class UUIResourceDataProvider*>             RankedDataProviders;                                      // 0x008C(0x000C)
	TArray<class UUIResourceDataProvider*>             UnRankedDataProviders;                                    // 0x0098(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlinePlaylists");
		return ptr;
	}


	void STATIC_GetOnlinePlaylistProvider();
	void GetPlaylistProvider();
	void FindProviderIndexByFieldValue();
	void GetProviderFieldValue();
	void GetResourceProviderFields();
	void GetResourceProviders();
	void GetProviderCount();
};


// Class Engine.UIDataStore_Registry
// 0x0004 (0x007C - 0x0078)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class UUIDynamicFieldProvider*                     RegistryDataProvider;                                     // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Registry");
		return ptr;
	}


	void GetDataProvider();
};


// Class Engine.UIDataStore_Remote
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Remote : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Remote");
		return ptr;
	}

};


// Class Engine.UIDataStore_OnlineGameSearch
// 0x0030 (0x00A8 - 0x0078)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x007C(0x0004)
	struct FName                                       SearchResultsName;                                        // 0x0080(0x0008)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0088(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x008C(0x0008)
	TArray<struct FGameSearchCfg>                      GameSearchCfgList;                                        // 0x0094(0x000C)
	int                                                SelectedIndex;                                            // 0x00A0(0x0004)
	int                                                ActiveSearchIndex;                                        // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSearch");
		return ptr;
	}


	void ClearAllSearchResults();
	void MoveToPrevious();
	void MoveToNext();
	void SetCurrentByName();
	void SetCurrentByIndex();
	void FindSearchConfigurationIndex();
	void GetActiveGameSearch();
	void GetCurrentGameSearch();
	void BuildSearchResults();
	void ShowHostGamercard();
	void GetSearchResultFromIndex();
	void OnSearchComplete();
	void OverrideQuerySubmission();
	void SubmitGameSearch();
	void InvalidateCurrentSearchResults();
	void Init();
};


// Class Engine.UIDataStore_OnlinePlayerData
// 0x00BC (0x0134 - 0x0078)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004)
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                          // 0x007C(0x0004)
	class UUIDataProvider_OnlinePlayers*               PlayersProvider;                                          // 0x0080(0x0004)
	class UUIDataProvider_OnlineClanMates*             ClanMatesProvider;                                        // 0x0084(0x0004)
	class ULocalPlayer*                                Player;                                                   // 0x0088(0x0004)
	struct FString                                     PlayerNick;                                               // 0x008C(0x000C)
	int                                                NumNewDownloads;                                          // 0x0098(0x0004)
	int                                                NumTotalDownloads;                                        // 0x009C(0x0004)
	struct FString                                     ProfileSettingsClassName;                                 // 0x00A0(0x000C)
	class UClass*                                      ProfileSettingsClass;                                     // 0x00AC(0x0004)
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                          // 0x00B0(0x0004)
	struct FString                                     PlayerStorageClassName;                                   // 0x00B4(0x000C)
	class UClass*                                      PlayerStorageClass;                                       // 0x00C0(0x0004)
	class UUIDataProvider_OnlinePlayerStorage*         StorageProvider;                                          // 0x00C4(0x0004)
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                                   // 0x00C8(0x0004)
	class UUIDataProvider_PlayerAchievements*          AchievementsProvider;                                     // 0x00CC(0x0004)
	struct FString                                     FriendsProviderClassName;                                 // 0x00D0(0x000C)
	class UClass*                                      FriendsProviderClass;                                     // 0x00DC(0x0004)
	struct FString                                     PlayersProviderClassName;                                 // 0x00E0(0x000C)
	class UClass*                                      PlayersProviderClass;                                     // 0x00EC(0x0004)
	struct FString                                     ClanMatesProviderClassName;                               // 0x00F0(0x000C)
	class UClass*                                      ClanMatesProviderClass;                                   // 0x00FC(0x0004)
	struct FString                                     FriendMessagesProviderClassName;                          // 0x0100(0x000C)
	class UClass*                                      FriendMessagesProviderClass;                              // 0x010C(0x0004)
	struct FString                                     AchievementsProviderClassName;                            // 0x0110(0x000C)
	class UClass*                                      AchievementsProviderClass;                                // 0x011C(0x0004)
	struct FString                                     PartyChatProviderClassName;                               // 0x0120(0x000C)
	class UClass*                                      PartyChatProviderClass;                                   // 0x012C(0x0004)
	class UUIDataProvider_OnlinePartyChatList*         PartyChatProvider;                                        // 0x0130(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlinePlayerData");
		return ptr;
	}


	void STATIC_GetCachedPlayerStorage();
	void STATIC_GetCachedPlayerProfile();
	void SaveProfileData();
	void OnDownloadableContentQueryDone();
	void ClearDelegates();
	void RegisterDelegates();
	void OnPlayerDataChange();
	void OnLoginChange();
	void OnUnregister();
	void OnRegister();
	void OnSettingProviderChanged();
};


// Class Engine.UIDataStore_OnlineStats
// 0x0070 (0x00E8 - 0x0078)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0078(0x0004)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x007C(0x0004)
	TArray<class UClass*>                              StatsReadClasses;                                         // 0x0080(0x000C)
	struct FName                                       StatsReadName;                                            // 0x008C(0x0008)
	struct FPlayerNickMetaData                         PlayerNickData;                                           // 0x0094(0x0014)
	struct FRankMetaData                               RankNameMetaData;                                         // 0x00A8(0x0014)
	struct FName                                       TotalRowsName;                                            // 0x00BC(0x0008)
	TArray<class UOnlineStatsRead*>                    StatsReadObjects;                                         // 0x00C4(0x000C)
	class UOnlineStatsRead*                            StatsRead;                                                // 0x00D0(0x0004)
	TEnumAsByte<EStatsFetchType>                       CurrentReadType;                                          // 0x00D4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	TScriptInterface<class UOnlineStatsInterface>      StatsInterface;                                           // 0x00D8(0x0008)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x00E0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineStats");
		return ptr;
	}


	void SortResultsByRank();
	void OnReadComplete();
	void ShowGamercard();
	void RefreshStats();
	void SetStatsReadInfo();
	void Init();
};


// Class Engine.UIDataStore_Settings
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_Settings : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Settings");
		return ptr;
	}

};


// Class Engine.UIDataStore_OnlineGameSettings
// 0x0014 (0x008C - 0x0078)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FGameSettingsCfg>                    GameSettingsCfgList;                                      // 0x0078(0x000C)
	class UClass*                                      SettingsProviderClass;                                    // 0x0084(0x0004)
	int                                                SelectedIndex;                                            // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSettings");
		return ptr;
	}


	void Unregistered();
	void Registered();
	void MoveToPrevious();
	void MoveToNext();
	void SetCurrentByName();
	void SetCurrentByIndex();
	void GetCurrentProvider();
	void GetCurrentGameSettings();
	void CreateGame();
	void OnSettingProviderChanged();
};


// Class Engine.UIDataStore_SessionSettings
// 0x0024 (0x009C - 0x0078)
class UUIDataStore_SessionSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FString>                             SessionSettingsProviderClassNames;                        // 0x0078(0x000C)
	TArray<class UClass*>                              SessionSettingsProviderClasses;                           // 0x0084(0x000C)
	TArray<class USessionSettingsProvider*>            SessionSettings;                                          // 0x0090(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_SessionSettings");
		return ptr;
	}


	void NotifyGameSessionEnded();
	void ClearDataProviders();
};


// Class Engine.UIDataStore_StringBase
// 0x0000 (0x0078 - 0x0078)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_StringBase");
		return ptr;
	}

};


// Class Engine.UIDataStore_InputAlias
// 0x0048 (0x00C0 - 0x0078)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	TArray<struct FUIDataStoreInputAlias>              InputAliases;                                             // 0x0078(0x000C)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0084(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIDataStore_InputAlias.InputAliasLookupMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_InputAlias");
		return ptr;
	}


	void HasAliasMappingForPlatform();
	void FindInputAliasIndex();
	void GetAliasInputKeyDataByIndex();
	void GetAliasInputKeyData();
	void GetAliasInputKeyNameByIndex();
	void GetAliasInputKeyName();
	void GetAliasFontMarkupByIndex();
	void GetAliasFontMarkup();
};


// Class Engine.UIDataStore_StringAliasMap
// 0x004C (0x00C4 - 0x0078)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	TArray<struct FUIMenuInputMap>                     MenuInputMapArray;                                        // 0x0078(0x000C)
	struct FMap_Mirror                                 MenuInputSets;                                            // 0x0084(0x003C)
	int                                                PlayerIndex;                                              // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_StringAliasMap");
		return ptr;
	}


	void GetStringWithFieldName();
	void FindMappingWithFieldName();
	void GetPlayerOwner();
};


// Class Engine.UIDataStore_Strings
// 0x000C (0x0084 - 0x0078)
class UUIDataStore_Strings : public UUIDataStore_StringBase
{
public:
	TArray<class UUIConfigFileProvider*>               LocFileProviders;                                         // 0x0078(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Strings");
		return ptr;
	}

};


// Class Engine.UICustomSkin
// 0x003C (0x01D4 - 0x0198)
class UUICustomSkin : public UUISkin
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0198(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UICustomSkin.WidgetStyleMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICustomSkin");
		return ptr;
	}

};


// Class Engine.UIDynamicFieldProvider
// 0x0090 (0x00E8 - 0x0058)
class UUIDynamicFieldProvider : public UUIDataProvider
{
public:
	TArray<struct FUIProviderScriptFieldValue>         PersistentDataFields;                                     // 0x0058(0x000C)
	TArray<struct FUIProviderScriptFieldValue>         RuntimeDataFields;                                        // 0x0064(0x000C)
	struct FMap_Mirror                                 PersistentCollectionData;                                 // 0x0070(0x003C)
	struct FMap_Mirror                                 RuntimeCollectionData;                                    // 0x00AC(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDynamicFieldProvider");
		return ptr;
	}


	void FindCollectionValueIndex();
	void GetCollectionValue();
	void ClearCollectionValueArray();
	void ReplaceCollectionValueByIndex();
	void ReplaceCollectionValue();
	void RemoveCollectionValueByIndex();
	void RemoveCollectionValue();
	void InsertCollectionValue();
	void SetCollectionValueArray();
	void GetCollectionValueArray();
	void GetCollectionValueSchema();
	void SavePersistentProviderData();
	void SetField();
	void GetField();
	void ClearFields();
	void FindFieldIndex();
	void RemoveField();
	void AddField();
	void InitializeRuntimeFields();
};


// Class Engine.UIPropertyDataProvider
// 0x0018 (0x0070 - 0x0058)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	TArray<class UClass*>                              ComplexPropertyTypes;                                     // 0x0058(0x000C)
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;                // 0x0064(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPropertyDataProvider");
		return ptr;
	}


	void GetCustomPropertyValue();
	void CanSupportComplexPropertyType();
};


// Class Engine.UIDynamicDataProvider
// 0x000C (0x007C - 0x0070)
class UUIDynamicDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x0070(0x0004)
	class UClass*                                      DataClass;                                                // 0x0074(0x0004)
	class UObject*                                     DataSource;                                               // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDynamicDataProvider");
		return ptr;
	}


	void CleanupDataProvider();
	void GetDataSource();
	void IsValidDataSourceClass();
	void ProviderInstanceUnbound();
	void ProviderInstanceBound();
	void UnbindProviderInstance();
	void BindProviderInstance();
};


// Class Engine.GameInfoDataProvider
// 0x0004 (0x0080 - 0x007C)
class UGameInfoDataProvider : public UUIDynamicDataProvider
{
public:
	class AGameReplicationInfo*                        GameDataSource;                                           // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInfoDataProvider");
		return ptr;
	}


	void ProviderInstanceBound();
};


// Class Engine.InventoryDataProvider
// 0x0000 (0x007C - 0x007C)
class UInventoryDataProvider : public UUIDynamicDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InventoryDataProvider");
		return ptr;
	}

};


// Class Engine.PowerupDataProvider
// 0x0000 (0x007C - 0x007C)
class UPowerupDataProvider : public UInventoryDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PowerupDataProvider");
		return ptr;
	}


	void IsValidDataSourceClass();
};


// Class Engine.WeaponDataProvider
// 0x0000 (0x007C - 0x007C)
class UWeaponDataProvider : public UInventoryDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WeaponDataProvider");
		return ptr;
	}

};


// Class Engine.CurrentWeaponDataProvider
// 0x0000 (0x007C - 0x007C)
class UCurrentWeaponDataProvider : public UWeaponDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurrentWeaponDataProvider");
		return ptr;
	}

};


// Class Engine.PickupDataProvider
// 0x0000 (0x007C - 0x007C)
class UPickupDataProvider : public UUIDynamicDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PickupDataProvider");
		return ptr;
	}

};


// Class Engine.PlayerDataProvider
// 0x0000 (0x007C - 0x007C)
class UPlayerDataProvider : public UUIDynamicDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerDataProvider");
		return ptr;
	}

};


// Class Engine.PlayerOwnerDataProvider
// 0x0004 (0x0080 - 0x007C)
class UPlayerOwnerDataProvider : public UPlayerDataProvider
{
public:
	class UPlayerDataProvider*                         PlayerData;                                               // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerOwnerDataProvider");
		return ptr;
	}


	void CleanupDataProvider();
	void SetPlayerDataProvider();
};


// Class Engine.TeamDataProvider
// 0x0018 (0x0094 - 0x007C)
class UTeamDataProvider : public UUIDynamicDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x007C(0x0004)
	struct FName                                       PlayerListFieldName;                                      // 0x0080(0x0008)
	TArray<class UPlayerDataProvider*>                 Players;                                                  // 0x0088(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeamDataProvider");
		return ptr;
	}


	void RegeneratePlayerLists();
};


// Class Engine.UIDataProvider_Settings
// 0x0014 (0x0090 - 0x007C)
class UUIDataProvider_Settings : public UUIDynamicDataProvider
{
public:
	class USettings*                                   Settings;                                                 // 0x007C(0x0004)
	TArray<struct FSettingsArrayProvider>              SettingsArrayProviders;                                   // 0x0080(0x000C)
	unsigned long                                      bIsAListRow : 1;                                          // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_Settings");
		return ptr;
	}


	void OnSettingValueUpdated();
	void ArrayProviderPropertyChanged();
	void ProviderInstanceUnbound();
	void ProviderInstanceBound();
};


// Class Engine.UIResourceDataProvider
// 0x000C (0x007C - 0x0070)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0070(0x0004)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x0074(0x0004)
	unsigned long                                      bDataBindingPropertiesOnly : 1;                           // 0x0078(0x0004)
	unsigned long                                      bSkipDuringEnumeration : 1;                               // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIResourceDataProvider");
		return ptr;
	}


	void InitializeProvider();
};


// Class Engine.UIDataProvider_MenuItem
// 0x0088 (0x0104 - 0x007C)
class UUIDataProvider_MenuItem : public UUIResourceDataProvider
{
public:
	TEnumAsByte<EMenuOptionType>                       OptionType;                                               // 0x007C(0x0001)
	TEnumAsByte<EEditBoxCharacterSet>                  EditboxAllowedChars;                                      // 0x007D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007E(0x0002) MISSED OFFSET
	TArray<struct FName>                               OptionSet;                                                // 0x0080(0x000C)
	struct FString                                     DataStoreMarkup;                                          // 0x008C(0x000C)
	struct FString                                     DescriptionMarkup;                                        // 0x0098(0x000C)
	struct FName                                       RequiredGameMode;                                         // 0x00A4(0x0008)
	struct FString                                     FriendlyName;                                             // 0x00AC(0x000C)
	struct FString                                     CustomFriendlyName;                                       // 0x00B8(0x000C)
	struct FString                                     Description;                                              // 0x00C4(0x000C)
	unsigned long                                      bEditableCombo : 1;                                       // 0x00D0(0x0004)
	unsigned long                                      bNumericCombo : 1;                                        // 0x00D0(0x0004)
	unsigned long                                      bKeyboardOrMouseOption : 1;                               // 0x00D0(0x0004)
	unsigned long                                      bOnlineOnly : 1;                                          // 0x00D0(0x0004)
	unsigned long                                      bOfflineOnly : 1;                                         // 0x00D0(0x0004)
	unsigned long                                      bSearchAllInis : 1;                                       // 0x00D0(0x0004)
	unsigned long                                      bRemoveOn360 : 1;                                         // 0x00D0(0x0004)
	unsigned long                                      bRemoveOnPC : 1;                                          // 0x00D0(0x0004)
	unsigned long                                      bRemoveOnPS3 : 1;                                         // 0x00D0(0x0004)
	int                                                EditBoxMaxLength;                                         // 0x00D4(0x0004)
	struct FUIRangeData                                RangeData;                                                // 0x00D8(0x0014)
	TArray<struct FName>                               SchemaCellFields;                                         // 0x00EC(0x000C)
	struct FString                                     IniName;                                                  // 0x00F8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_MenuItem");
		return ptr;
	}


	void IsFiltered();
};


// Class Engine.UIMapSummary
// 0x0030 (0x00AC - 0x007C)
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                                  // 0x007C(0x000C)
	struct FString                                     ScreenshotPathName;                                       // 0x0088(0x000C)
	struct FString                                     DisplayName;                                              // 0x0094(0x000C)
	struct FString                                     Description;                                              // 0x00A0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIMapSummary");
		return ptr;
	}

};


// Class Engine.UISettingsProvider
// 0x0008 (0x0078 - 0x0070)
class UUISettingsProvider : public UUIPropertyDataProvider
{
public:
	struct FName                                       ProviderTag;                                              // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISettingsProvider");
		return ptr;
	}


	void CleanupDataProvider();
	void OnModifiedProperty();
	void SavePropertyValue();
	void LoadPropertyValue();
};


// Class Engine.SessionSettingsProvider
// 0x000C (0x0084 - 0x0078)
class USessionSettingsProvider : public UUISettingsProvider
{
public:
	class UClass*                                      ProviderClientClass;                                      // 0x0078(0x0004)
	class UClass*                                      ProviderClientMetaClass;                                  // 0x007C(0x0004)
	class UClass*                                      ProviderClient;                                           // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SessionSettingsProvider");
		return ptr;
	}


	void CleanupDataProvider();
	void IsValidDataSourceClass();
	void ProviderClientUnbound();
	void ProviderClientBound();
	void UnbindProviderClient();
	void BindProviderClient();
};


// Class Engine.UIResourceCombinationProvider
// 0x0010 (0x0068 - 0x0058)
class UUIResourceCombinationProvider : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                           // 0x0058(0x0004)
	struct FPointer                                    VfTable_IUIListElementCellProvider;                       // 0x005C(0x0004)
	class UUIResourceDataProvider*                     StaticDataProvider;                                       // 0x0060(0x0004)
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                          // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIResourceCombinationProvider");
		return ptr;
	}


	void ReplaceProviderCollection();
	void ReplaceProviderValue();
	void ClearProviderReferences();
	void GetCellFieldValue();
	void GetCellFieldType();
	void GetElementCellTags();
	void GetElementCellValueProvider();
	void GetElementCellSchemaProvider();
	void IsElementEnabled();
	void GetListElements();
	void GetElementCount();
	void GetElementProviderTags();
	void InitializeProvider();
};


// Class Engine.GameUISceneClient
// 0x00A0 (0x01A8 - 0x0108)
class UGameUISceneClient : public UUISceneClient
{
public:
	TArray<class UUIScene*>                            ActiveScenes;                                             // 0x0108(0x000C)
	class UUITexture*                                  CurrentMouseCursor;                                       // 0x0114(0x0004)
	unsigned long                                      bRenderCursor : 1;                                        // 0x0118(0x0004)
	unsigned long                                      bUpdateInputProcessingStatus : 1;                         // 0x0118(0x0004)
	unsigned long                                      bUpdateCursorRenderStatus : 1;                            // 0x0118(0x0004)
	unsigned long                                      bUpdateSceneViewportSizes : 1;                            // 0x0118(0x0004)
	unsigned long                                      bEnableDebugInput : 1;                                    // 0x0118(0x0004)
	unsigned long                                      bRenderDebugInfo : 1;                                     // 0x0118(0x0004)
	unsigned long                                      bRenderDebugInfoAtTop : 1;                                // 0x0118(0x0004)
	unsigned long                                      bRenderActiveControlInfo : 1;                             // 0x0118(0x0004)
	unsigned long                                      bRenderFocusedControlInfo : 1;                            // 0x0118(0x0004)
	unsigned long                                      bRenderTargetControlInfo : 1;                             // 0x0118(0x0004)
	unsigned long                                      bSelectVisibleTargetsOnly : 1;                            // 0x0118(0x0004)
	unsigned long                                      bInteractiveMode : 1;                                     // 0x0118(0x0004)
	unsigned long                                      bDisplayFullPaths : 1;                                    // 0x0118(0x0004)
	unsigned long                                      bShowWidgetPath : 1;                                      // 0x0118(0x0004)
	unsigned long                                      bShowRenderBounds : 1;                                    // 0x0118(0x0004)
	unsigned long                                      bShowCurrentState : 1;                                    // 0x0118(0x0004)
	unsigned long                                      bShowMousePos : 1;                                        // 0x0118(0x0004)
	unsigned long                                      bRestrictActiveControlToFocusedScene : 1;                 // 0x0118(0x0004)
	unsigned long                                      bCaptureUnprocessedInput : 1;                             // 0x0118(0x0004)
	unsigned long                                      bSynchronizePlayers : 1;                                  // 0x0118(0x0004)
	unsigned long                                      bKillRestoreMenuProgression : 1;                          // 0x0118(0x0004)
	unsigned long                                      bDebugResolveScene : 1;                                   // 0x0118(0x0004)
	unsigned long                                      bBlockSceneUpdates : 1;                                   // 0x0118(0x0004)
	unsigned long                                      bBlockUpdatesAfterStackModification : 1;                  // 0x0118(0x0004)
	float                                              LatestDeltaTime;                                          // 0x011C(0x0004)
	struct FDouble                                     DoubleClickStartTime;                                     // 0x0120(0x0008)
	struct FIntPoint                                   DoubleClickStartPosition;                                 // 0x0128(0x0008)
	class UTexture*                                    DefaultUITexture[0x3];                                    // 0x0130(0x0004)
	struct FMap_Mirror                                 InitialPressedKeys;                                       // 0x013C(0x003C)
	class UClass*                                      MessageBoxClass;                                          // 0x0178(0x0004)
	float                                              OverlaySceneAlphaModulation;                              // 0x017C(0x0004)
	class UUIScreenObject*                             DebugTarget;                                              // 0x0180(0x0004)
	TArray<class UUIAnimationSeq*>                     AnimSequencePool;                                         // 0x0184(0x000C)
	TArray<struct FName>                               NavAliases;                                               // 0x0190(0x000C)
	TArray<struct FName>                               AxisInputKeys;                                            // 0x019C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameUISceneClient");
		return ptr;
	}


	void FindUIAnimation();
	void ShowMenuProgression();
	void ToggleDebugInput();
	void ShowMenuStates();
	void ShowRenderBounds();
	void ShowDockingStacks();
	void STATIC_ClearUIMessageScene();
	void STATIC_ShowUIMessage();
	void STATIC_CreateUIMessageBox();
	void RestoreMenuProgression();
	void ClearMenuProgression();
	void SaveMenuProgression();
	void NotifyStorageDeviceChanged();
	void NotifyPlayerRemoved();
	void NotifyPlayerAdded();
	void NotifyLinkStatusChanged();
	void NotifyOnlineServiceStatusChanged();
	void NotifyControllerChanged();
	void OnLoginChange();
	void NotifyGameSessionEnded();
	void NotifyClientTravel();
	void IsAllowedToModifyPlayerCount();
	void SynchronizePlayers();
	void InitializeSceneClient();
	void CanShowToolTips();
	void PauseGame();
	void SwapScenesInStack();
	void SetActiveControl();
	void CanUnpauseInternalUI();
	void RequestCursorRenderUpdate();
	void RequestInputProcessingUpdate();
	void AllActiveScenes();
	void GetNextSceneFromIndex();
	void GetNextScene();
	void GetPreviousInputProcessingScene();
	void GetPreviousSceneFromIndex();
	void GetPreviousScene();
	void GetActiveScene();
	void GetActiveSceneCount();
	void FindSceneIndexByTag();
	void GetSceneAtIndex();
	void FindSceneIndex();
	void FindSceneByTag();
	void CreateTransientWidget();
	void CreateScene();
	void GetTransientScene();
	void STATIC_GetCurrentNetMode();
	void UpdateActiveControl();
};


// Class Engine.ConsoleEntry
// 0x001C (0x0490 - 0x0474)
class UConsoleEntry : public UUIObject
{
public:
	class UUILabel*                                    ConsolePromptLabel;                                       // 0x0474(0x0004)
	class UUIImage*                                    ConsolePromptBackground;                                  // 0x0478(0x0004)
	class UUIEditBox*                                  InputBox;                                                 // 0x047C(0x0004)
	class UUIImage*                                    LowerConsoleBorder;                                       // 0x0480(0x0004)
	class UUIImage*                                    UpperConsoleBorder;                                       // 0x0484(0x0004)
	int                                                CursorPosition;                                           // 0x0488(0x0004)
	unsigned long                                      bRenderCursor : 1;                                        // 0x048C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ConsoleEntry");
		return ptr;
	}


	void SetValue();
	void SetupDockingLinks();
	void PostInitialize();
	void RemovedChild();
	void AddedChild();
};


// Class Engine.UIButton
// 0x0020 (0x0494 - 0x0474)
class UUIButton : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x0474(0x0004)
	struct FName                                       ClickedCue;                                               // 0x0478(0x0008)
	unsigned long                                      bPlayClickedSound : 1;                                    // 0x0480(0x0004)
	struct FName                                       FocusGainedAnimName;                                      // 0x0484(0x0008)
	struct FName                                       FocusLostAnimName;                                        // 0x048C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIButton");
		return ptr;
	}


	void GetFocusGainedName();
	void GetFocusLostName();
	void SetImage();
};


// Class Engine.UICheckbox
// 0x004C (0x04E0 - 0x0494)
class UUICheckbox : public UUIButton
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0494(0x0004)
	struct FName                                       CheckedCue;                                               // 0x0498(0x0008)
	struct FName                                       UncheckedCue;                                             // 0x04A0(0x0008)
	struct FUIDataStoreBinding                         ValueDataSource;                                          // 0x04A8(0x0030)
	class UUIComp_DrawImage*                           CheckedImageComponent;                                    // 0x04D8(0x0004)
	unsigned long                                      bIsChecked : 1;                                           // 0x04DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICheckbox");
		return ptr;
	}


	void SetValue();
	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void IsChecked();
	void SetCheckImage();
};


// Class Engine.UILabelButton
// 0x0038 (0x04CC - 0x0494)
class UUILabelButton : public UUIButton
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0494(0x0004)
	struct FUIDataStoreBinding                         CaptionDataSource;                                        // 0x0498(0x0030)
	class UUIComp_DrawString*                          StringRenderComponent;                                    // 0x04C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UILabelButton");
		return ptr;
	}


	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void SetTextAlignment();
	void GetCaption();
	void SetCaption();
};


// Class Engine.UICalloutButton
// 0x0024 (0x04F0 - 0x04CC)
class UUICalloutButton : public UUILabelButton
{
public:
	struct FString                                     DefaultMarkupStringTemplate;                              // 0x04CC(0x000C)
	struct FName                                       CalloutDataStoreTag;                                      // 0x04D8(0x0008)
	struct FName                                       InputAliasTag;                                            // 0x04E0(0x0008)
	TEnumAsByte<EUIAlignment>                          IconAlignment;                                            // 0x04E8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04E9(0x0003) MISSED OFFSET
	unsigned long                                      bSupportsButtonRepeat : 1;                                // 0x04EC(0x0004)
	unsigned long                                      bPlayErrorSoundWhenDisabled : 1;                          // 0x04EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICalloutButton");
		return ptr;
	}


	void GetCalloutInputProxy();
	void VerifyDefaultMarkupString();
	void GetPanelOwner();
	void RemovedFromParent();
	void PostInitialize();
	void GenerateCompleteCaptionMarkup();
	void GetCalloutMarkupString();
	void GetCalloutDataStoreName();
	void SetInputAlias();
	void OnReceivedInputKey();
	void UnsubscribeFromInputProxy();
	void SubscribeToInputProxy();
	void SetInputTag();
	void GetCalloutDataStore();
};


// Class Engine.UITabButton
// 0x0010 (0x04DC - 0x04CC)
class UUITabButton : public UUILabelButton
{
public:
	class UUITabPage*                                  TabPage;                                                  // 0x04CC(0x0004)
	struct FScriptDelegate                             __IsActivationAllowed__Delegate;                          // 0x04D0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITabButton");
		return ptr;
	}


	void OnStateChanged();
	void GetTabPage();
	void IsTargeted();
	void CanActivateButton();
	void RemovedFromParent();
	void RemovedChild();
	void AddedChild();
	void IsActivationAllowed();
};


// Class Engine.UIToggleButton
// 0x003C (0x0508 - 0x04CC)
class UUIToggleButton : public UUILabelButton
{
public:
	struct FUIDataStoreBinding                         ValueDataSource;                                          // 0x04CC(0x0030)
	unsigned long                                      bIsChecked : 1;                                           // 0x04FC(0x0004)
	class UUIComp_DrawString*                          CheckedStringRenderComponent;                             // 0x0500(0x0004)
	class UUIComp_DrawImage*                           CheckedBackgroundImageComponent;                          // 0x0504(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIToggleButton");
		return ptr;
	}


	void ButtonClicked();
	void SetValue();
	void IsChecked();
	void SetCaption();
};


// Class Engine.UINumericEditBoxButton
// 0x0000 (0x0494 - 0x0494)
class UUINumericEditBoxButton : public UUIButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UINumericEditBoxButton");
		return ptr;
	}

};


// Class Engine.UIOptionListBase
// 0x00BC (0x0530 - 0x0474)
class UUIOptionListBase : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0474(0x0004)
	struct FUIStyleReference                           DecrementStyle;                                           // 0x0478(0x0020)
	struct FUIStyleReference                           IncrementStyle;                                           // 0x0498(0x0020)
	class UUIOptionListButton*                         DecrementButton;                                          // 0x04B8(0x0004)
	class UUIOptionListButton*                         IncrementButton;                                          // 0x04BC(0x0004)
	class UClass*                                      OptionListButtonClass;                                    // 0x04C0(0x0004)
	struct FUIScreenValue_Extent                       ButtonSpacing;                                            // 0x04C4(0x0008)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x04CC(0x0004)
	class UUIComp_DrawString*                          StringRenderComponent;                                    // 0x04D0(0x0004)
	struct FName                                       IncrementCue;                                             // 0x04D4(0x0008)
	struct FName                                       DecrementCue;                                             // 0x04DC(0x0008)
	unsigned long                                      bWrapOptions : 1;                                         // 0x04E4(0x0004)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x04E8(0x0030)
	struct FScriptDelegate                             __CreateCustomDecrementButton__Delegate;                  // 0x0518(0x000C)
	struct FScriptDelegate                             __CreateCustomIncrementButton__Delegate;                  // 0x0524(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIOptionListBase");
		return ptr;
	}


	void OnStateChanged();
	void OnButtonClicked();
	void OnPressRepeated();
	void InitializeInternalControls();
	void Initialized();
	void Created();
	void OnMoveSelectionRight();
	void OnMoveSelectionLeft();
	void HasNextValue();
	void HasPrevValue();
	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void CreateCustomIncrementButton();
	void CreateCustomDecrementButton();
};


// Class Engine.UIOptionListButton
// 0x0000 (0x0494 - 0x0494)
class UUIOptionListButton : public UUIButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIOptionListButton");
		return ptr;
	}


	void UpdateButtonState();
};


// Class Engine.UIScrollbar
// 0x00CC (0x0540 - 0x0474)
class UUIScrollbar : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x0474(0x0004)
	class UUIScrollbarButton*                          IncrementButton;                                          // 0x0478(0x0004)
	class UUIScrollbarButton*                          DecrementButton;                                          // 0x047C(0x0004)
	class UUIScrollbarMarkerButton*                    MarkerButton;                                             // 0x0480(0x0004)
	struct FUIStyleReference                           IncrementStyle;                                           // 0x0484(0x0020)
	struct FUIStyleReference                           DecrementStyle;                                           // 0x04A4(0x0020)
	struct FUIStyleReference                           MarkerStyle;                                              // 0x04C4(0x0020)
	float                                              NudgeValue;                                               // 0x04E4(0x0004)
	float                                              NudgeMultiplier;                                          // 0x04E8(0x0004)
	float                                              NudgePercent;                                             // 0x04EC(0x0004)
	float                                              MarkerPosPercent;                                         // 0x04F0(0x0004)
	float                                              MarkerSizePercent;                                        // 0x04F4(0x0004)
	struct FUIScreenValue_Extent                       BarWidth;                                                 // 0x04F8(0x0008)
	struct FUIScreenValue_Extent                       MinimumMarkerSize;                                        // 0x0500(0x0008)
	struct FUIScreenValue_Extent                       ButtonsExtent;                                            // 0x0508(0x0008)
	TEnumAsByte<EUIOrientation>                        ScrollbarOrientation;                                     // 0x0510(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0511(0x0003) MISSED OFFSET
	unsigned long                                      bAddCornerPadding : 1;                                    // 0x0514(0x0004)
	unsigned long                                      bInitializeMarker : 1;                                    // 0x0514(0x0004)
	struct FUIScreenValue_Position                     MousePosition;                                            // 0x0518(0x000C)
	float                                              MousePositionDelta;                                       // 0x0524(0x0004)
	struct FScriptDelegate                             __OnScrollActivity__Delegate;                             // 0x0528(0x000C)
	struct FScriptDelegate                             __OnClickedScrollZone__Delegate;                          // 0x0534(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollbar");
		return ptr;
	}


	void GetMarkerSizePercent();
	void GetMarkerPosPercent();
	void GetNudgePercent();
	void GetNudgeValue();
	void PostInitialize();
	void Initialized();
	void DragScroll();
	void DragScrollEnd();
	void DragScrollBegin();
	void ScrollDecrement();
	void ScrollIncrement();
	void EnableCornerPadding();
	void SetNudgeSizePixels();
	void SetNudgeSizePercent();
	void SetMarkerPosition();
	void SetMarkerSize();
	void GetScrollZoneWidth();
	void GetScrollZoneExtent();
	void GetMarkerButtonPosition();
	void OnClickedScrollZone();
	void OnScrollActivity();
};


// Class Engine.UIScrollbarButton
// 0x0000 (0x0494 - 0x0494)
class UUIScrollbarButton : public UUIButton
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollbarButton");
		return ptr;
	}

};


// Class Engine.UIScrollbarMarkerButton
// 0x000C (0x04A0 - 0x0494)
class UUIScrollbarMarkerButton : public UUIScrollbarButton
{
public:
	struct FScriptDelegate                             __OnButtonDragged__Delegate;                              // 0x0494(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollbarMarkerButton");
		return ptr;
	}


	void OnButtonDragged();
};


// Class Engine.UIComboBox
// 0x008C (0x0500 - 0x0474)
class UUIComboBox : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0474(0x0004)
	class UClass*                                      ComboEditboxClass;                                        // 0x0478(0x0004)
	class UClass*                                      ComboButtonClass;                                         // 0x047C(0x0004)
	class UClass*                                      ComboListClass;                                           // 0x0480(0x0004)
	class UUIEditBox*                                  ComboEditbox;                                             // 0x0484(0x0004)
	class UUIToggleButton*                             ComboButton;                                              // 0x0488(0x0004)
	class UUIList*                                     ComboList;                                                // 0x048C(0x0004)
	class UUIComp_DrawCaption*                         CaptionRenderComponent;                                   // 0x0490(0x0004)
	class UUIComp_DrawImage*                           BackgroundRenderComponent;                                // 0x0494(0x0004)
	struct FUIDataStoreBinding                         CaptionDataSource;                                        // 0x0498(0x0030)
	struct FName                                       OpenList;                                                 // 0x04C8(0x0008)
	struct FName                                       DecrementCue;                                             // 0x04D0(0x0008)
	unsigned long                                      bDockListToButton : 1;                                    // 0x04D8(0x0004)
	struct FScriptDelegate                             __CreateCustomComboEditbox__Delegate;                     // 0x04DC(0x000C)
	struct FScriptDelegate                             __CreateCustomComboButton__Delegate;                      // 0x04E8(0x000C)
	struct FScriptDelegate                             __CreateCustomComboList__Delegate;                        // 0x04F4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIComboBox");
		return ptr;
	}


	void ListItemSelected();
	void SelectedItemChanged();
	void EditboxTextChanged();
	void ShowListClickHandler();
	void ButtonPressed();
	void EditboxPressed();
	void SetListDocking();
	void IsListDockedToButton();
	void SetEditboxText();
	void HideList();
	void ShowList();
	void SetVisibility();
	void PostInitialize();
	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void CreateCustomComboList();
	void CreateCustomComboButton();
	void CreateCustomComboEditbox();
};


// Class Engine.UIContainer
// 0x0004 (0x0478 - 0x0474)
class UUIContainer : public UUIObject
{
public:
	class UUIComp_AutoAlignment*                       AutoAlignment;                                            // 0x0474(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIContainer");
		return ptr;
	}

};


// Class Engine.UICalloutButtonPanel
// 0x0070 (0x04E8 - 0x0478)
class UUICalloutButtonPanel : public UUIContainer
{
public:
	class UUICalloutButton*                            ButtonTemplate;                                           // 0x0478(0x0004)
	TArray<class UUICalloutButton*>                    CalloutButtons;                                           // 0x047C(0x000C)
	TEnumAsByte<EUIOrientation>                        ButtonBarOrientation;                                     // 0x0488(0x0001)
	TEnumAsByte<ECalloutButtonLayoutType>              ButtonLayout;                                             // 0x0489(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x048A(0x0002) MISSED OFFSET
	struct FUIScreenValue_Extent                       ButtonPadding[0x2];                                       // 0x048C(0x0008)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x049C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UICalloutButtonPanel.ButtonInputKeyMappings
	TArray<struct FName>                               CalloutButtonAliases;                                     // 0x04D8(0x000C)
	unsigned long                                      bGeneratingInitialButtons : 1;                            // 0x04E4(0x0004)
	unsigned long                                      bSupportsButtonRepeat : 1;                                // 0x04E4(0x0004)
	unsigned long                                      bRefreshButtonDocking : 1;                                // 0x04E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICalloutButtonPanel");
		return ptr;
	}


	void OnButtonVisibilityChanged();
	void InitializeInputProxy();
	void ConfigureChildButton();
	void RemovedFromParent();
	void PostInitialize();
	void CanButtonAcceptFocus();
	void ContainsButton();
	void FindButtonIndex();
	void FindButton();
	void EnableButton();
	void ShowButton();
	void SetButtonCallback();
	void SetButtonInputAlias();
	void SetButtonCaption();
	void RemoveAllButtons();
	void RemoveButtonByAlias();
	void RemoveButton();
	void InsertButton();
	void RequestButtonDockingUpdate();
	void FindBestInsertionIndex();
	void GetCalloutInputProxy();
	void CreateCalloutButton();
	void GetAvailableCalloutButtonAliases();
	void RemovedChild();
	void AddedChild();
	void SynchronizeInputAliases();
	void PopulateCalloutButtonArray();
};


// Class Engine.UIFrameBox
// 0x0054 (0x04CC - 0x0478)
class UUIFrameBox : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent[0x9];                            // 0x0478(0x0004)
	struct FCornerSizes                                BackgroundCornerSizes;                                    // 0x049C(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIFrameBox");
		return ptr;
	}


	void SetBackgroundImage();
};


// Class Engine.UIPanel
// 0x0008 (0x0480 - 0x0478)
class UUIPanel : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x0478(0x0004)
	unsigned long                                      bEnforceClipping : 1;                                     // 0x047C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPanel");
		return ptr;
	}


	void SetBackgroundImage();
};


// Class Engine.UISafeRegionPanel
// 0x0010 (0x0488 - 0x0478)
class UUISafeRegionPanel : public UUIContainer
{
public:
	TEnumAsByte<ESafeRegionType>                       RegionType;                                               // 0x0478(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0479(0x0003) MISSED OFFSET
	float                                              RegionPercentages[0x2];                                   // 0x047C(0x0004)
	unsigned long                                      bForce4x3AspectRatio : 1;                                 // 0x0484(0x0004)
	unsigned long                                      bUseFullRegionIn4x3 : 1;                                  // 0x0484(0x0004)
	unsigned long                                      bPrimarySafeRegion : 1;                                   // 0x0484(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISafeRegionPanel");
		return ptr;
	}

};


// Class Engine.UIScrollFrame
// 0x0038 (0x04B0 - 0x0478)
class UUIScrollFrame : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           StaticBackgroundImage;                                    // 0x0478(0x0004)
	class UUIScrollbar*                                ScrollbarHorizontal;                                      // 0x047C(0x0004)
	class UUIScrollbar*                                ScrollbarVertical;                                        // 0x0480(0x0004)
	struct FUIScreenValue_Extent                       HorizontalClientRegion;                                   // 0x0484(0x0008)
	struct FUIScreenValue_Extent                       VerticalClientRegion;                                     // 0x048C(0x0008)
	struct FVector2D                                   ClientRegionPosition;                                     // 0x0494(0x0008)
	float                                              FrameBounds[0x4];                                         // 0x049C(0x0004)
	unsigned long                                      bRefreshScrollbars : 1;                                   // 0x04AC(0x0004)
	unsigned long                                      bRecalculateClientRegion : 1;                             // 0x04AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScrollFrame");
		return ptr;
	}


	void ScrollZoneClicked();
	void OnChildRepositioned();
	void RemovedChild();
	void AddedChild();
	void GetVisibleRegionPercentage();
	void GetClipRegion();
	void GetClientRegionSizeVector();
	void GetClientRegionPositionVector();
	void GetClientRegionSize();
	void GetClientRegionPosition();
	void SetClientRegionPositionVector();
	void SetClientRegionPosition();
	void ScrollRegion();
	void ReapplyFormatting();
	void RefreshScrollbars();
};


// Class Engine.UITabPage
// 0x009C (0x0514 - 0x0478)
class UUITabPage : public UUIContainer
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                           // 0x0478(0x0004)
	class UClass*                                      ButtonClass;                                              // 0x047C(0x0004)
	class UUITabButton*                                TabButton;                                                // 0x0480(0x0004)
	struct FUIDataStoreBinding                         ButtonCaption;                                            // 0x0484(0x0030)
	struct FUIDataStoreBinding                         ButtonToolTip;                                            // 0x04B4(0x0030)
	struct FUIDataStoreBinding                         PageDescription;                                          // 0x04E4(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITabPage");
		return ptr;
	}


	void IsActivePage();
	void SetTabCaption();
	void IsFocusInitializationRequired();
	void CanActivatePage();
	void AddedToTabControl();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void GetTabButton();
	void GetOwnerTabControl();
	void RemovedFromParent();
	void LinkToTabButton();
	void STATIC_CreateTabButton();
	void ActivatePage();
};


// Class Engine.UINumericEditBox
// 0x0098 (0x056C - 0x04D4)
class UUINumericEditBox : public UUIEditBox
{
public:
	struct FUIStyleReference                           IncrementStyle;                                           // 0x04D4(0x0020)
	struct FUIStyleReference                           DecrementStyle;                                           // 0x04F4(0x0020)
	class UUINumericEditBoxButton*                     IncrementButton;                                          // 0x0514(0x0004)
	class UUINumericEditBoxButton*                     DecrementButton;                                          // 0x0518(0x0004)
	struct FUIRangeData                                NumericValue;                                             // 0x051C(0x0014)
	int                                                DecimalPlaces;                                            // 0x0530(0x0004)
	struct FUIScreenValue_Bounds                       IncButton_Position;                                       // 0x0534(0x001C)
	struct FUIScreenValue_Bounds                       DecButton_Position;                                       // 0x0550(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UINumericEditBox");
		return ptr;
	}


	void GetNumericValue();
	void SetNumericValue();
	void PostInitialize();
	void Initialized();
	void DecrementValue();
	void IncrementValue();
};


// Class Engine.UIImage
// 0x0038 (0x04AC - 0x0474)
class UUIImage : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0474(0x0004)
	struct FUIDataStoreBinding                         ImageDataSource;                                          // 0x0478(0x0030)
	class UUIComp_DrawImage*                           ImageComponent;                                           // 0x04A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIImage");
		return ptr;
	}


	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void SetValue();
};


// Class Engine.UILabel
// 0x0058 (0x04CC - 0x0474)
class UUILabel : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                           // 0x0474(0x0004)
	struct FPointer                                    VfTable_IUIStringRenderer;                                // 0x0478(0x0004)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x047C(0x0030)
	class UUIComp_DrawString*                          StringRenderComponent;                                    // 0x04AC(0x0004)
	class UUIComp_DrawImage*                           LabelBackground;                                          // 0x04B0(0x0004)
	unsigned long                                      FireChangedDelegate : 1;                                  // 0x04B4(0x0004)
	int                                                PreviousIntValue;                                         // 0x04B8(0x0004)
	int                                                CurrentIntValue;                                          // 0x04BC(0x0004)
	struct FScriptDelegate                             __LabelValueChanged__Delegate;                            // 0x04C0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UILabel");
		return ptr;
	}


	void GetMarkupString();
	void SetIntValue();
	void IgnoreMarkup();
	void GetValue();
	void SetArrayValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
	void SetTextAlignment();
	void SetValue();
	void LabelValueChanged();
};


// Class Engine.UINavigationList
// 0x0000 (0x0724 - 0x0724)
class UUINavigationList : public UUIList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UINavigationList");
		return ptr;
	}


	void GetScenePathAtIndex();
	void GetItemTagAtIndex();
	void GetSelectedItemTag();
	void GetSelectedScenePath();
	void STATIC_GetGameResourceDataStore();
};


// Class Engine.UIMeshWidget
// 0x0004 (0x0478 - 0x0474)
class UUIMeshWidget : public UUIObject
{
public:
	class UStaticMeshComponent*                        Mesh;                                                     // 0x0474(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIMeshWidget");
		return ptr;
	}

};


// Class Engine.UINumericOptionList
// 0x0014 (0x0544 - 0x0530)
class UUINumericOptionList : public UUIOptionListBase
{
public:
	struct FUIRangeData                                RangeValue;                                               // 0x0530(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UINumericOptionList");
		return ptr;
	}


	void GetValue();
	void SetValue();
};


// Class Engine.UIOptionList
// 0x0018 (0x0548 - 0x0530)
class UUIOptionList : public UUIOptionListBase
{
public:
	int                                                CurrentIndex;                                             // 0x0530(0x0004)
	TScriptInterface<class UUIListElementProvider>     DataProvider;                                             // 0x0534(0x0008)
	struct FScriptDelegate                             __OnIsCurrValueValid__Delegate;                           // 0x053C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIOptionList");
		return ptr;
	}


	void SetCurrentIndex();
	void GetCurrentIndex();
	void OnIsCurrValueValid();
	void IsCurrValueValid();
	void SetNextValue();
	void SetPrevValue();
	void GetListValue();
};


// Class Engine.UIPrefab
// 0x0020 (0x0494 - 0x0474)
class UUIPrefab : public UUIObject
{
public:
	int                                                PrefabVersion;                                            // 0x0474(0x0004)
	int                                                InternalPrefabVersion;                                    // 0x0478(0x0004)
	class UTexture2D*                                  PrefabPreview;                                            // 0x047C(0x0004) (ExportObject)
	int                                                ModificationCounter;                                      // 0x0480(0x0004)
	struct FUIScreenValue_Extent                       OriginalWidth;                                            // 0x0484(0x0008)
	struct FUIScreenValue_Extent                       OriginalHeight;                                           // 0x048C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPrefab");
		return ptr;
	}

};


// Class Engine.UIPrefabInstance
// 0x00BC (0x0530 - 0x0474)
class UUIPrefabInstance : public UUIObject
{
public:
	class UUIPrefab*                                   SourcePrefab;                                             // 0x0474(0x0004) (OutParm)
	int                                                PrefabInstanceVersion;                                    // 0x0478(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x047C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.ArchetypeToInstanceMap
	int                                                PI_PackageVersion;                                        // 0x04B8(0x0004) (ExportObject)
	int                                                PI_LicenseePackageVersion;                                // 0x04BC(0x0004) (ExportObject)
	int                                                PI_DataOffset;                                            // 0x04C0(0x0004) (ExportObject)
	TArray<unsigned char>                              PI_Bytes;                                                 // 0x04C4(0x000C) (ExportObject)
	TArray<class UObject*>                             PI_CompleteObjects;                                       // 0x04D0(0x000C) (ExportObject)
	TArray<class UObject*>                             PI_ReferencedObjects;                                     // 0x04DC(0x000C) (ExportObject)
	TArray<struct FString>                             PI_SavedNames;                                            // 0x04E8(0x000C) (ExportObject)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x04F4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.PI_ObjectMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPrefabInstance");
		return ptr;
	}


	void DetachFromSourcePrefab();
};


// Class Engine.UIProgressBar
// 0x0059 (0x04CD - 0x0474)
class UUIProgressBar : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0474(0x0004)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x0478(0x0004)
	class UUIComp_DrawImage*                           FillImageComponent;                                       // 0x047C(0x0004)
	class UUIComp_DrawImage*                           OverlayImageComponent;                                    // 0x0480(0x0004)
	unsigned long                                      bDrawOverlay : 1;                                         // 0x0484(0x0004)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x0488(0x0030)
	struct FUIRangeData                                ProgressBarValue;                                         // 0x04B8(0x0014)
	TEnumAsByte<EUIOrientation>                        ProgressBarOrientation;                                   // 0x04CC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIProgressBar");
		return ptr;
	}


	void SetOverlayImage();
	void SetFillImage();
	void SetBackgroundImage();
	void GetValue();
	void SetValue();
	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
};


// Class Engine.UISlider
// 0x00A8 (0x051C - 0x0474)
class UUISlider : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                            // 0x0474(0x0004)
	struct FPointer                                    VfTable_IUITickableObject;                                // 0x0478(0x0004)
	class UUIComp_DrawImage*                           BackgroundImageComponent;                                 // 0x047C(0x0004)
	class UUIComp_DrawImage*                           SliderBarImageComponent;                                  // 0x0480(0x0004)
	class UUIComp_DrawImage*                           MarkerImageComponent;                                     // 0x0484(0x0004)
	struct FUIDataStoreBinding                         DataSource;                                               // 0x0488(0x0030)
	class UUIComp_DrawStringSlider*                    CaptionRenderComponent;                                   // 0x04B8(0x0004)
	struct FUIRangeData                                SliderValue;                                              // 0x04BC(0x0014)
	unsigned long                                      bRenderCaption : 1;                                       // 0x04D0(0x0004)
	unsigned long                                      IsInterpolating : 1;                                      // 0x04D0(0x0004)
	TEnumAsByte<EUIOrientation>                        SliderOrientation;                                        // 0x04D4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	struct FUIScreenValue_Extent                       BarSize;                                                  // 0x04D8(0x0008)
	struct FUIScreenValue_Extent                       MarkerHeight;                                             // 0x04E0(0x0008)
	struct FUIScreenValue_Extent                       MarkerWidth;                                              // 0x04E8(0x0008)
	struct FName                                       IncrementCue;                                             // 0x04F0(0x0008)
	struct FName                                       DecrementCue;                                             // 0x04F8(0x0008)
	float                                              SliderInterpolationSpeed;                                 // 0x0500(0x0004)
	float                                              SliderCurrentInterpolationValue;                          // 0x0504(0x0004)
	float                                              CachedDelta;                                              // 0x0508(0x0004)
	float                                              PreviousPercentageValue;                                  // 0x050C(0x0004)
	float                                              SliderRepeatTimer;                                        // 0x0510(0x0004)
	int                                                CurrentSliderDirection;                                   // 0x0514(0x0004)
	float                                              CurrentSliderRepeatTime;                                  // 0x0518(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISlider");
		return ptr;
	}


	void GetFocusGainedName();
	void GetFocusLostName();
	void OnStateChanged();
	void SetMarkerImage();
	void SetBarImage();
	void SetBackgroundImage();
	void GetValue();
	void SetValue();
	void SaveSubscriberValue();
	void ClearBoundDataStores();
	void GetBoundDataStores();
	void NotifyDataStoreValueUpdated();
	void RefreshSubscriberValue();
	void GetDataStoreBinding();
	void SetDataStoreBinding();
};


// Class Engine.UITabControl
// 0x00A0 (0x0514 - 0x0474)
class UUITabControl : public UUIObject
{
public:
	TArray<class UUITabPage*>                          Pages;                                                    // 0x0474(0x000C)
	class UUITabPage*                                  ActivePage;                                               // 0x0480(0x0004)
	class UUITabPage*                                  PendingPage;                                              // 0x0484(0x0004)
	TEnumAsByte<EUIWidgetFace>                         TabDockFace;                                              // 0x0488(0x0001)
	TEnumAsByte<EUITabAutosizeType>                    TabSizeMode;                                              // 0x0489(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x048A(0x0002) MISSED OFFSET
	struct FUIScreenValue_Extent                       TabButtonSize;                                            // 0x048C(0x0008)
	struct FUIScreenValue_Extent                       TabButtonPadding[0x2];                                    // 0x0494(0x0008)
	struct FUIStyleReference                           TabButtonBackgroundStyle;                                 // 0x04A4(0x0020)
	struct FUIStyleReference                           TabButtonCaptionStyle;                                    // 0x04C4(0x0020)
	unsigned long                                      bAllowPagePreviews : 1;                                   // 0x04E4(0x0004)
	unsigned long                                      bUpdateLayout : 1;                                        // 0x04E4(0x0004)
	struct FName                                       ActivateTabCue;                                           // 0x04E8(0x0008)
	struct FScriptDelegate                             __OnPageActivated__Delegate;                              // 0x04F0(0x000C)
	struct FScriptDelegate                             __OnPageInserted__Delegate;                               // 0x04FC(0x000C)
	struct FScriptDelegate                             __OnPageRemoved__Delegate;                                // 0x0508(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITabControl");
		return ptr;
	}


	void TabButtonClicked();
	void ProcessInputKey();
	void FindPageIndexByPageRef();
	void FindPageIndexByButton();
	void FindPageIndexByCaption();
	void ActivateBestTab();
	void ActivatePageByCaption();
	void AddedChild();
	void PostInitialize();
	void EnableTabPage();
	void ActivatePreviousPage();
	void ActivateNextPage();
	void ActivatePage();
	void ReplacePage();
	void RemovePage();
	void InsertPage();
	void PrivateActivatePage();
	void CreateTabPage();
	void FindTargetedTab();
	void GetPageAtIndex();
	void GetPageCount();
	void RequestLayoutUpdate();
	void OnPageRemoved();
	void OnPageInserted();
	void OnPageActivated();
};


// Class Engine.UIScene
// 0x03A8 (0x0584 - 0x01DC)
class UUIScene : public UUIScreenObject
{
public:
	struct FName                                       SceneTag;                                                 // 0x01DC(0x0008)
	class UUISceneClient*                              SceneClient;                                              // 0x01E4(0x0004)
	class USceneDataStore*                             SceneData;                                                // 0x01E8(0x0004)
	class ULocalPlayer*                                PlayerOwner;                                              // 0x01EC(0x0004)
	class UUIContextMenu*                              ActiveContextMenu;                                        // 0x01F0(0x0004)
	class UUIContextMenu*                              StandardContextMenu;                                      // 0x01F4(0x0004)
	class UClass*                                      DefaultContextMenuClass;                                  // 0x01F8(0x0004)
	class UUISkin*                                     SceneSkin;                                                // 0x01FC(0x0004)
	unsigned long                                      bForceDropShadows : 1;                                    // 0x0200(0x0004)
	unsigned long                                      bRedirectMouseClicksToPlayerOwner : 1;                    // 0x0200(0x0004)
	unsigned long                                      bUpdateDockingStack : 1;                                  // 0x0200(0x0004)
	unsigned long                                      bUpdateScenePositions : 1;                                // 0x0200(0x0004)
	unsigned long                                      bUpdateNavigationLinks : 1;                               // 0x0200(0x0004)
	unsigned long                                      bUpdatePrimitiveUsage : 1;                                // 0x0200(0x0004)
	unsigned long                                      bRefreshWidgetStyles : 1;                                 // 0x0200(0x0004)
	unsigned long                                      bRefreshStringFormatting : 1;                             // 0x0200(0x0004)
	unsigned long                                      bRecalculateInputMask : 1;                                // 0x0200(0x0004)
	unsigned long                                      bPerformedInitialUpdate : 1;                              // 0x0200(0x0004)
	unsigned long                                      bResolvingScenePositions : 1;                             // 0x0200(0x0004)
	unsigned long                                      bUsesPrimitives : 1;                                      // 0x0200(0x0004)
	unsigned long                                      bSupportsNavigation : 1;                                  // 0x0200(0x0004)
	unsigned long                                      bReevaluateRotationSupport : 1;                           // 0x0200(0x0004)
	unsigned long                                      bSupportsRotation : 1;                                    // 0x0200(0x0004)
	unsigned long                                      bUsesUIFocus : 1;                                         // 0x0200(0x0004)
	unsigned long                                      bNeverLocksInput : 1;                                     // 0x0200(0x0004)
	unsigned long                                      bDisplayCursor : 1;                                       // 0x0200(0x0004)
	unsigned long                                      bRenderParentScenes : 1;                                  // 0x0200(0x0004)
	unsigned long                                      bAlwaysRenderScene : 1;                                   // 0x0200(0x0004)
	unsigned long                                      bPauseGameWhileActive : 1;                                // 0x0200(0x0004)
	unsigned long                                      bExemptFromAutoClose : 1;                                 // 0x0200(0x0004)
	unsigned long                                      bCloseOnLevelChange : 1;                                  // 0x0200(0x0004)
	unsigned long                                      bSaveSceneValuesOnClose : 1;                              // 0x0200(0x0004)
	unsigned long                                      bEnableScenePostProcessing : 1;                           // 0x0200(0x0004)
	unsigned long                                      bEnableSceneDepthTesting : 1;                             // 0x0200(0x0004)
	unsigned long                                      bRequiresNetwork : 1;                                     // 0x0200(0x0004)
	unsigned long                                      bRequiresOnlineService : 1;                               // 0x0200(0x0004)
	unsigned long                                      bMenuLevelRestoresScene : 1;                              // 0x0200(0x0004)
	unsigned long                                      bFlushPlayerInput : 1;                                    // 0x0200(0x0004)
	unsigned long                                      bCaptureMatchedInput : 1;                                 // 0x0200(0x0004)
	unsigned long                                      bDisableWorldRendering : 1;                               // 0x0200(0x0004)
	unsigned long                                      bAnimationBlockingInput : 1;                              // 0x0204(0x0004)
	unsigned long                                      customScriptHandling : 1;                                 // 0x0204(0x0004)
	class UUISafeRegionPanel*                          PrimarySafeRegionPanel;                                   // 0x0208(0x0004)
	TArray<class UUIObject*>                           ToolTips;                                                 // 0x020C(0x000C)
	TArray<struct FUIDockingNode>                      DockingStack;                                             // 0x0218(0x000C)
	TArray<class UUIObject*>                           RenderStack;                                              // 0x0224(0x000C)
	TArray<TScriptInterface<class UUITickableObject>>  TickableObjects;                                          // 0x0230(0x000C)
	TArray<class UUIScreenObject*>                     AnimatingObjects;                                         // 0x023C(0x000C)
	struct FMap_Mirror                                 InputSubscriptions[0x4];                                  // 0x0248(0x003C)
	int                                                LastPlayerIndex;                                          // 0x0338(0x0004)
	int                                                UpdateSceneFeedbackLoopCount;                             // 0x033C(0x0004)
	class UCanvas*                                     CanvasObject;                                             // 0x0340(0x0004)
	int                                                SceneStackPriority;                                       // 0x0344(0x0004)
	class UTexture2D*                                  ScenePreview;                                             // 0x0348(0x0004) (ExportObject)
	unsigned char                                      PlayerInputMask;                                          // 0x034C(0x0001)
	TEnumAsByte<EScreenInputMode>                      SceneInputMode;                                           // 0x034D(0x0001)
	TEnumAsByte<ESplitscreenRenderMode>                SceneRenderMode;                                          // 0x034E(0x0001)
	TEnumAsByte<EUIPostProcessGroup>                   ScenePostProcessGroup;                                    // 0x034F(0x0001)
	class UPostProcessChain*                           UIPostProcessForeground;                                  // 0x0350(0x0004)
	class UPostProcessChain*                           UIPostProcessBackground;                                  // 0x0354(0x0004)
	struct FPostProcessSettings                        CurrentBackgroundSettings;                                // 0x0358(0x00A0)
	struct FPostProcessSettings                        CurrentForegroundSettings;                                // 0x03F8(0x00A0)
	struct FVector2D                                   CurrentViewportSize;                                      // 0x0498(0x0008)
	float                                              HorizontalDegreeThresholdBegin;                           // 0x04A0(0x0004)
	float                                              HorizontalDegreeThresholdEnd;                             // 0x04A4(0x0004)
	float                                              HorizontalDegreeThresholdStep;                            // 0x04A8(0x0004)
	float                                              VerticalDegreeThresholdBegin;                             // 0x04AC(0x0004)
	float                                              VerticalDegreeThresholdEnd;                               // 0x04B0(0x0004)
	float                                              VerticalDegreeThresholdStep;                              // 0x04B4(0x0004)
	struct FName                                       SceneAnimation_Open;                                      // 0x04B8(0x0008)
	struct FName                                       SceneAnimation_Close;                                     // 0x04C0(0x0008)
	struct FName                                       SceneAnimation_LoseFocus;                                 // 0x04C8(0x0008)
	struct FName                                       SceneAnimation_RegainingFocus;                            // 0x04D0(0x0008)
	struct FName                                       SceneAnimation_RegainedFocus;                             // 0x04D8(0x0008)
	struct FName                                       SceneOpenedCue;                                           // 0x04E0(0x0008)
	struct FName                                       SceneClosedCue;                                           // 0x04E8(0x0008)
	class UUILayerBase*                                SceneLayerRoot;                                           // 0x04F0(0x0004) (ExportObject)
	struct FScriptDelegate                             __GetSceneInputModeOverride__Delegate;                    // 0x04F4(0x000C)
	struct FScriptDelegate                             __OnInterceptRawInputKey__Delegate;                       // 0x0500(0x000C)
	struct FScriptDelegate                             __OnSceneActivated__Delegate;                             // 0x050C(0x000C)
	struct FScriptDelegate                             __OnSceneDeactivated__Delegate;                           // 0x0518(0x000C)
	struct FScriptDelegate                             __OnPostRender__Delegate;                                 // 0x0524(0x000C)
	struct FScriptDelegate                             __OnQueryCloseSceneAllowed__Delegate;                     // 0x0530(0x000C)
	struct FScriptDelegate                             __OnTopSceneChanged__Delegate;                            // 0x053C(0x000C)
	struct FScriptDelegate                             __ShouldModulateBackgroundAlpha__Delegate;                // 0x0548(0x000C)
	struct FScriptDelegate                             __OnQueryBeginAnimation_DisableInput__Delegate;           // 0x0554(0x000C)
	struct FScriptDelegate                             __OnQueryEndAnimation_EnableInput__Delegate;              // 0x0560(0x000C)
	struct FScriptDelegate                             __OnNotifyClicked__Delegate;                              // 0x056C(0x000C)
	struct FScriptDelegate                             __OnSwallowedInput__Delegate;                             // 0x0578(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScene");
		return ptr;
	}


	void LocksInput();
	void OnSwallowedInput();
	void AllowInputAlias();
	void IsGamepadOwned();
	void IsKeyboardOwned();
	void OnNotifyClicked();
	void DebugShowAnimators();
	void LogCurrentState();
	void LogRenderBounds();
	void OnRegainedFocusAnimationComplete();
	void OnRegainingFocusAnimationComplete();
	void OnLostFocusAnimationComplete();
	void OnCloseAnimationComplete_IgnoreChildScenes();
	void OnCloseAnimationComplete();
	void OnOpenAnimationComplete();
	void BeginSceneRegainedFocusAnimation();
	void BeginSceneRegainingFocusAnimation();
	void BeginSceneLostFocusAnimation();
	void BeginSceneCloseAnimation();
	void BeginSceneOpenAnimation();
	void StopSceneAnimation();
	void BeginSceneAnimation();
	void FindAnimatorIndex();
	void CloseScene();
	void OpenScene();
	void NotifyPlayerRemoved();
	void NotifyPlayerAdded();
	void NotifyStorageDeviceChanged();
	void NotifyLinkStatusChanged();
	void NotifyOnlineServiceStatusChanged();
	void NotifyControllerStatusChanged();
	void NotifyLoginStatusChanged();
	void NotifyGameSessionEnded();
	void NotifyPreClientTravel();
	void SceneCreated();
	void UIAnimationEnded();
	void UIAnimationStarted();
	void SetVisibility();
	void RemovedChild();
	void AddedChild();
	void CalculateInputMask();
	void SceneDeactivated();
	void SceneActivated();
	void MobileKeyboardReturned();
	void GetFocusHint();
	void CanAcceptFocus();
	void GenerateTransformMatrix();
	void LogDockingStack();
	void SetActiveContextMenu();
	void GetActiveContextMenu();
	void GetDefaultContextMenu();
	void IsSceneActive();
	void STATIC_GetWorldInfo();
	void SetSceneRenderMode();
	void GetSceneRenderMode();
	void GetSceneInputMode();
	void SetSceneInputMode();
	void GetScenePostProcessGroup();
	void ShouldRenderParentScenes();
	void GetPreviousScene();
	void GetNextScene();
	void ResolveDataStore();
	void UnbindSubscribers();
	void SaveSceneDataValues();
	void LoadSceneDataValues();
	void GetSceneDataStore();
	void FindTickableObjectIndex();
	void UnregisterTickableObject();
	void RegisterTickableObject();
	void ResolveScenePositions();
	void RebuildDockingStack();
	void ForceImmediateSceneUpdate();
	void OnQueryEndAnimation_EnableInput();
	void OnQueryBeginAnimation_DisableInput();
	void ShouldModulateBackgroundAlpha();
	void OnTopSceneChanged();
	void OnQueryCloseSceneAllowed();
	void OnPostRender();
	void OnSceneDeactivated();
	void OnSceneActivated();
	void OnInterceptRawInputKey();
	void GetSceneInputModeOverride();
};


// Class Engine.UIPrefabScene
// 0x0004 (0x0588 - 0x0584)
class UUIPrefabScene : public UUIScene
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0584(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPrefabScene");
		return ptr;
	}

};


// Class Engine.UIState_Active
// 0x0002 (0x0068 - 0x0066)
class UUIState_Active : public UUIState
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Active");
		return ptr;
	}

};


// Class Engine.UIState_Focused
// 0x0002 (0x0068 - 0x0066)
class UUIState_Focused : public UUIState
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Focused");
		return ptr;
	}


	void ActivateState();
};


// Class Engine.UIState_Pressed
// 0x0002 (0x0068 - 0x0066)
class UUIState_Pressed : public UUIState
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_Pressed");
		return ptr;
	}

};


// Class Engine.UIState_TargetedTab
// 0x0002 (0x0068 - 0x0066)
class UUIState_TargetedTab : public UUIState
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIState_TargetedTab");
		return ptr;
	}


	void IsWidgetClassSupported();
};


// Class Engine.UIEditboxString
// 0x0000 (0x0100 - 0x0100)
class UUIEditboxString : public UUIString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEditboxString");
		return ptr;
	}

};


// Class Engine.UIListString
// 0x0000 (0x0100 - 0x0100)
class UUIListString : public UUIString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIListString");
		return ptr;
	}

};


// Class Engine.UIStyle_Data
// 0x0034 (0x0070 - 0x003C)
class UUIStyle_Data : public UUIRoot
{
public:
	struct FString                                     UIEditorControlClass;                                     // 0x003C(0x000C) (ExportObject)
	struct FLinearColor                                StyleColor;                                               // 0x0048(0x0010)
	float                                              StylePadding[0x2];                                        // 0x0058(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0060(0x0004)
	unsigned long                                      bDirty : 1;                                               // 0x0060(0x0004)
	struct FScriptDelegate                             __MatchesStyleData__Delegate;                             // 0x0064(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Data");
		return ptr;
	}


	void MatchesStyleData();
};


// Class Engine.UIStyle_Combo
// 0x0040 (0x00B0 - 0x0070)
class UUIStyle_Combo : public UUIStyle_Data
{
public:
	struct FStyleDataReference                         ImageStyle;                                               // 0x0070(0x0020)
	struct FStyleDataReference                         TextStyle;                                                // 0x0090(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Combo");
		return ptr;
	}


	void GetComboImageStyle();
	void GetComboTextStyle();
};


// Class Engine.UIStyle_Image
// 0x003C (0x00AC - 0x0070)
class UUIStyle_Image : public UUIStyle_Data
{
public:
	class USurface*                                    DefaultImage;                                             // 0x0070(0x0004)
	struct FTextureCoordinates                         Coordinates;                                              // 0x0074(0x0010)
	struct FUIImageAdjustmentData                      AdjustmentType[0x2];                                      // 0x0084(0x0014)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Image");
		return ptr;
	}

};


// Class Engine.UIStyle_Text
// 0x0030 (0x00A0 - 0x0070)
class UUIStyle_Text : public UUIStyle_Data
{
public:
	class UFont*                                       StyleFont;                                                // 0x0070(0x0004)
	struct FUITextAttributes                           Attributes;                                               // 0x0074(0x0004)
	TEnumAsByte<EUIAlignment>                          Alignment[0x2];                                           // 0x0078(0x0001)
	TEnumAsByte<ETextClipMode>                         ClipMode;                                                 // 0x007A(0x0001)
	TEnumAsByte<EUIAlignment>                          ClipAlignment;                                            // 0x007B(0x0001)
	struct FTextAutoScaleValue                         AutoScaling;                                              // 0x007C(0x0014)
	struct FVector2D                                   Scale;                                                    // 0x0090(0x0008)
	struct FVector2D                                   SpacingAdjust;                                            // 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyle_Text");
		return ptr;
	}

};


// Class Engine.UITexture
// 0x00B4 (0x00F0 - 0x003C)
class UUITexture : public UUIRoot
{
public:
	struct FUICombinedStyleData                        ImageStyleData;                                           // 0x003C(0x00B0)
	class USurface*                                    ImageTexture;                                             // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITexture");
		return ptr;
	}


	void GetSurface();
	void HasValidStyleData();
	void SetImageStyle();
	void GetOwnerWidget();
};


// Class Engine.UITickableObjectProxy
// 0x0010 (0x004C - 0x003C)
class UUITickableObjectProxy : public UUIRoot
{
public:
	struct FPointer                                    VfTable_IUITickableObject;                                // 0x003C(0x0004)
	struct FScriptDelegate                             __OnScriptTick__Delegate;                                 // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITickableObjectProxy");
		return ptr;
	}


	void ScriptTick();
	void OnScriptTick();
};


// Class Engine.UIStringRenderer
// 0x0000 (0x003C - 0x003C)
class UUIStringRenderer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStringRenderer");
		return ptr;
	}


	void SetTextAlignment();
};


// Class Engine.UIStyleResolver
// 0x0000 (0x003C - 0x003C)
class UUIStyleResolver : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStyleResolver");
		return ptr;
	}


	void NotifyResolveStyle();
	void SetStyleResolverTag();
	void GetStyleResolverTag();
};


// Class Engine.UITickableObject
// 0x0000 (0x003C - 0x003C)
class UUITickableObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UITickableObject");
		return ptr;
	}

};


// Class Engine.UISequence
// 0x0010 (0x013C - 0x012C)
class UUISequence : public USequence
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                                // 0x012C(0x0004)
	TArray<class UUIEvent*>                            UIEvents;                                                 // 0x0130(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISequence");
		return ptr;
	}


	void RemoveSequenceObjects();
	void RemoveSequenceObject();
	void AddSequenceObject();
	void GetUIEvents();
	void GetOwner();
};


// Class Engine.UIStateSequence
// 0x0000 (0x013C - 0x013C)
class UUIStateSequence : public UUISequence
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIStateSequence");
		return ptr;
	}


	void GetOwnerState();
};


// Class Engine.UIAction
// 0x0004 (0x00EC - 0x00E8)
class UUIAction : public USequenceAction
{
public:
	unsigned long                                      bAutoTargetOwner : 1;                                     // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void IsValidUISequenceObject();
	void IsValidLevelSequenceObject();
	void GetOwnerScene();
	void GetOwner();
};


// Class Engine.UIAction_ActivateLevelEvent
// 0x0008 (0x00F4 - 0x00EC)
class UUIAction_ActivateLevelEvent : public UUIAction
{
public:
	struct FName                                       EventName;                                                // 0x00EC(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ActivateLevelEvent");
		return ptr;
	}

};


// Class Engine.UIAction_Scene
// 0x0005 (0x00F1 - 0x00EC)
class UUIAction_Scene : public UUIAction
{
public:
	class UUIScene*                                    Scene;                                                    // 0x00EC(0x0004)
	unsigned char                                      ForcedScenePriority;                                      // 0x00F0(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_Scene");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void IsValidLevelSequenceObject();
};


// Class Engine.UIAction_CloseScene
// 0x0003 (0x00F4 - 0x00F1)
class UUIAction_CloseScene : public UUIAction_Scene
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_CloseScene");
		return ptr;
	}

};


// Class Engine.UIAction_OpenScene
// 0x000F (0x0100 - 0x00F1)
class UUIAction_OpenScene : public UUIAction_Scene
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	class UUIScene*                                    OpenedScene;                                              // 0x00F4(0x0004)
	int                                                DesiredPlayerIndex;                                       // 0x00F8(0x0004)
	unsigned long                                      GlobalScene : 1;                                          // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_OpenScene");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.UICond_IsFocused
// 0x0000 (0x00D0 - 0x00D0)
class UUICond_IsFocused : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICond_IsFocused");
		return ptr;
	}


	void IsValidLevelSequenceObject();
};


// Class Engine.UIEvent
// 0x0028 (0x0128 - 0x0100)
class UUIEvent : public USequenceEvent
{
public:
	int                                                SubobjectVersionModifier;                                 // 0x0100(0x0004)
	class UUIScreenObject*                             EventOwner;                                               // 0x0104(0x0004)
	class UObject*                                     EventActivator;                                           // 0x0108(0x0004)
	struct FString                                     Description;                                              // 0x010C(0x000C)
	unsigned long                                      bShouldRegisterEvent : 1;                                 // 0x0118(0x0004)
	unsigned long                                      bPropagateEvent : 1;                                      // 0x0118(0x0004)
	struct FScriptDelegate                             __AllowEventActivation__Delegate;                         // 0x011C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void ShouldAlwaysInstance();
	void IsValidUISequenceObject();
	void IsValidLevelSequenceObject();
	void ActivateUIEvent();
	void ConditionalActivateUIEvent();
	void CanBeActivated();
	void GetOwnerScene();
	void GetOwner();
	void AllowEventActivation();
};


// Class Engine.UIEvent_CalloutButtonInputProxy
// 0x0004 (0x012C - 0x0128)
class UUIEvent_CalloutButtonInputProxy : public UUIEvent
{
public:
	class UUICalloutButtonPanel*                       ButtonPanel;                                              // 0x0128(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_CalloutButtonInputProxy");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void IsPastingIntoUISequenceAllowed();
	void IsValidUISequenceObject();
	void FindButtonAliasIndex();
	void ChangeButtonAlias();
	void UnregisterButtonAlias();
	void RegisterButtonAlias();
};


// Class Engine.UIEvent_MetaObject
// 0x0004 (0x012C - 0x0128)
class UUIEvent_MetaObject : public UUIEvent
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0128(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_MetaObject");
		return ptr;
	}


	void IsPastingIntoUISequenceAllowed();
	void IsValidUISequenceObject();
};


// Class Engine.UIEvent_OnClick
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_OnClick : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnClick");
		return ptr;
	}

};


// Class Engine.UIEvent_OnDoubleClick
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_OnDoubleClick : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnDoubleClick");
		return ptr;
	}

};


// Class Engine.UIEvent_ProcessInput
// 0x003C (0x0164 - 0x0128)
class UUIEvent_ProcessInput : public UUIEvent
{
public:
	struct FMultiMap_Mirror                            ActionMap;                                                // 0x0128(0x003C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_ProcessInput");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.UIEvent_Scene
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_Scene : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_Scene");
		return ptr;
	}

};


// Class Engine.UIEvent_State
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_State : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_State");
		return ptr;
	}

};


// Class Engine.UIEvent_OnEnterState
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_OnEnterState : public UUIEvent_State
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnEnterState");
		return ptr;
	}

};


// Class Engine.UIEvent_OnLeaveState
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_OnLeaveState : public UUIEvent_State
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_OnLeaveState");
		return ptr;
	}

};


// Class Engine.UIEvent_ValueChanged
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_ValueChanged : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_ValueChanged");
		return ptr;
	}

};


// Class Engine.Scene
// 0x0000 (0x003C - 0x003C)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scene");
		return ptr;
	}

};


// Class Engine.FoliageFactory
// 0x0028 (0x0280 - 0x0258)
class AFoliageFactory : public AVolume
{
public:
	TArray<struct FFoliageMesh>                        Meshes;                                                   // 0x0258(0x000C)
	float                                              VolumeFalloffRadius;                                      // 0x0264(0x0004)
	float                                              VolumeFalloffExponent;                                    // 0x0268(0x0004)
	float                                              SurfaceDensityUpFacing;                                   // 0x026C(0x0004)
	float                                              SurfaceDensityDownFacing;                                 // 0x0270(0x0004)
	float                                              SurfaceDensitySideFacing;                                 // 0x0274(0x0004)
	float                                              FacingFalloffExponent;                                    // 0x0278(0x0004)
	int                                                MaxInstanceCount;                                         // 0x027C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FoliageFactory");
		return ptr;
	}

};


// Class Engine.InteractiveFoliageActor
// 0x0058 (0x027C - 0x0224)
class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0224(0x0004)
	struct FVector                                     TouchingActorEntryPosition;                               // 0x0228(0x000C)
	struct FVector                                     FoliageVelocity;                                          // 0x0234(0x000C)
	struct FVector                                     FoliageForce;                                             // 0x0240(0x000C)
	struct FVector                                     FoliagePosition;                                          // 0x024C(0x000C)
	float                                              FoliageDamageImpulseScale;                                // 0x0258(0x0004)
	float                                              FoliageTouchImpulseScale;                                 // 0x025C(0x0004)
	float                                              FoliageStiffness;                                         // 0x0260(0x0004)
	float                                              FoliageStiffnessQuadratic;                                // 0x0264(0x0004)
	float                                              FoliageDamping;                                           // 0x0268(0x0004)
	float                                              MaxDamageImpulse;                                         // 0x026C(0x0004)
	float                                              MaxTouchImpulse;                                          // 0x0270(0x0004)
	float                                              MaxForce;                                                 // 0x0274(0x0004)
	float                                              Mass;                                                     // 0x0278(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InteractiveFoliageActor");
		return ptr;
	}


	void Touch();
	void TakeDamage();
};


// Class Engine.FoliageComponent
// 0x0088 (0x024C - 0x01C4)
class UFoliageComponent : public UPrimitiveComponent
{
public:
	TArray<struct FStoredFoliageInstance>              LitInstances;                                             // 0x01C4(0x000C)
	TArray<struct FGuid>                               StaticallyRelevantLights;                                 // 0x01D0(0x000C)
	TArray<struct FGuid>                               StaticallyIrrelevantLights;                               // 0x01DC(0x000C)
	float                                              DirectionalStaticLightingScale[0x3];                      // 0x01E8(0x0004)
	float                                              SimpleStaticLightingScale[0x3];                           // 0x01F4(0x0004)
	class UStaticMesh*                                 InstanceStaticMesh;                                       // 0x0200(0x0004)
	class UMaterialInterface*                          Material;                                                 // 0x0204(0x0004)
	float                                              MaxDrawRadius;                                            // 0x0208(0x0004)
	float                                              MinTransitionRadius;                                      // 0x020C(0x0004)
	float                                              MinThinningRadius;                                        // 0x0210(0x0004)
	struct FVector                                     MinScale;                                                 // 0x0214(0x000C)
	struct FVector                                     MaxScale;                                                 // 0x0220(0x000C)
	float                                              SwayScale;                                                // 0x022C(0x0004)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0230(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FoliageComponent");
		return ptr;
	}

};


// Class Engine.InteractiveFoliageComponent
// 0x0004 (0x0234 - 0x0230)
class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    FoliageSceneProxy;                                        // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InteractiveFoliageComponent");
		return ptr;
	}

};


// Class Engine.ActorFactoryInteractiveFoliage
// 0x0000 (0x006C - 0x006C)
class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryInteractiveFoliage");
		return ptr;
	}

};


// Class Engine.FluidInfluenceActor
// 0x0010 (0x022C - 0x021C)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                            // 0x021C(0x0004)
	class USpriteComponent*                            Sprite;                                                   // 0x0220(0x0004)
	class UFluidInfluenceComponent*                    InfluenceComponent;                                       // 0x0224(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0228(0x0004) (Edit)
	unsigned long                                      bToggled : 1;                                             // 0x0228(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidInfluenceActor");
		return ptr;
	}


	void ReplicatedEvent();
	void OnToggle();
};


// Class Engine.FluidSurfaceActor
// 0x0008 (0x0224 - 0x021C)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                           // 0x021C(0x0004)
	class UParticleSystem*                             ProjectileEntryEffect;                                    // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceActor");
		return ptr;
	}


	void Touch();
	void TakeDamage();
};


// Class Engine.FluidSurfaceActorMovable
// 0x0000 (0x0224 - 0x0224)
class AFluidSurfaceActorMovable : public AFluidSurfaceActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceActorMovable");
		return ptr;
	}

};


// Class Engine.FluidInfluenceComponent
// 0x0060 (0x0224 - 0x01C4)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bActive : 1;                                              // 0x01C4(0x0004)
	unsigned long                                      RaindropFillEntireFluid : 1;                              // 0x01C4(0x0004) (Const)
	unsigned long                                      bIsToggleTriggered : 1;                                   // 0x01C4(0x0004)
	class AFluidSurfaceActor*                          FluidActor;                                               // 0x01C8(0x0004)
	TEnumAsByte<EInfluenceType>                        InfluenceType;                                            // 0x01CC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01CD(0x0003) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x01D0(0x0004)
	float                                              WaveStrength;                                             // 0x01D4(0x0004) (Const)
	float                                              WaveFrequency;                                            // 0x01D8(0x0004) (Const)
	float                                              WavePhase;                                                // 0x01DC(0x0004) (Const)
	float                                              WaveRadius;                                               // 0x01E0(0x0004) (Const)
	float                                              RaindropAreaRadius;                                       // 0x01E4(0x0004) (Const)
	float                                              RaindropRadius;                                           // 0x01E8(0x0004) (Const)
	float                                              RaindropStrength;                                         // 0x01EC(0x0004) (Const)
	float                                              RaindropRate;                                             // 0x01F0(0x0004) (Const)
	float                                              FlowSpeed;                                                // 0x01F4(0x0004) (Const)
	int                                                FlowNumRipples;                                           // 0x01F8(0x0004) (Const)
	float                                              FlowSideMotionRadius;                                     // 0x01FC(0x0004) (Const)
	float                                              FlowWaveRadius;                                           // 0x0200(0x0004) (Const)
	float                                              FlowStrength;                                             // 0x0204(0x0004) (Const)
	float                                              FlowFrequency;                                            // 0x0208(0x0004) (Const)
	float                                              SphereOuterRadius;                                        // 0x020C(0x0004) (Const)
	float                                              SphereInnerRadius;                                        // 0x0210(0x0004) (Const)
	float                                              SphereStrength;                                           // 0x0214(0x0004) (Const)
	float                                              CurrentAngle;                                             // 0x0218(0x0004)
	float                                              CurrentTimer;                                             // 0x021C(0x0004)
	class AFluidSurfaceActor*                          CurrentFluidActor;                                        // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidInfluenceComponent");
		return ptr;
	}

};


// Class Engine.FluidSurfaceComponent
// 0x00E0 (0x02A4 - 0x01C4)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                            // 0x01C4(0x0004)
	int                                                LightMapResolution;                                       // 0x01C8(0x0004)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x01CC(0x001C)
	unsigned long                                      EnableSimulation : 1;                                     // 0x01E8(0x0004)
	unsigned long                                      EnableDetail : 1;                                         // 0x01E8(0x0004)
	unsigned long                                      bPause : 1;                                               // 0x01E8(0x0004)
	unsigned long                                      bShowSimulationNormals : 1;                               // 0x01E8(0x0004)
	unsigned long                                      bShowSimulationPosition : 1;                              // 0x01E8(0x0004)
	unsigned long                                      bShowDetailNormals : 1;                                   // 0x01E8(0x0004)
	unsigned long                                      bShowDetailPosition : 1;                                  // 0x01E8(0x0004)
	unsigned long                                      bShowFluidSimulation : 1;                                 // 0x01E8(0x0004)
	unsigned long                                      bShowFluidDetail : 1;                                     // 0x01E8(0x0004)
	unsigned long                                      bTestRipple : 1;                                          // 0x01E8(0x0004)
	unsigned long                                      bTestRippleCenterOnDetail : 1;                            // 0x01E8(0x0004)
	int                                                SimulationQuadsX;                                         // 0x01EC(0x0004)
	int                                                SimulationQuadsY;                                         // 0x01F0(0x0004)
	float                                              GridSpacing;                                              // 0x01F4(0x0004)
	float                                              GridSpacingLowRes;                                        // 0x01F8(0x0004)
	class AActor*                                      TargetSimulation;                                         // 0x01FC(0x0004)
	float                                              GPUTessellationFactor;                                    // 0x0200(0x0004)
	float                                              FluidDamping;                                             // 0x0204(0x0004)
	float                                              FluidTravelSpeed;                                         // 0x0208(0x0004)
	float                                              FluidHeightScale;                                         // 0x020C(0x0004)
	float                                              FluidUpdateRate;                                          // 0x0210(0x0004)
	float                                              ForceImpact;                                              // 0x0214(0x0004)
	float                                              ForceContinuous;                                          // 0x0218(0x0004)
	float                                              LightingContrast;                                         // 0x021C(0x0004)
	class AActor*                                      TargetDetail;                                             // 0x0220(0x0004)
	float                                              DeactivationDistance;                                     // 0x0224(0x0004)
	int                                                DetailResolution;                                         // 0x0228(0x0004)
	float                                              DetailSize;                                               // 0x022C(0x0004)
	float                                              DetailDamping;                                            // 0x0230(0x0004)
	float                                              DetailTravelSpeed;                                        // 0x0234(0x0004)
	float                                              DetailTransfer;                                           // 0x0238(0x0004)
	float                                              DetailHeightScale;                                        // 0x023C(0x0004)
	float                                              DetailUpdateRate;                                         // 0x0240(0x0004)
	float                                              NormalLength;                                             // 0x0244(0x0004)
	float                                              TestRippleSpeed;                                          // 0x0248(0x0004)
	float                                              TestRippleFrequency;                                      // 0x024C(0x0004)
	float                                              TestRippleRadius;                                         // 0x0250(0x0004)
	float                                              FluidWidth;                                               // 0x0254(0x0004)
	float                                              FluidHeight;                                              // 0x0258(0x0004)
	float                                              TestRippleTime;                                           // 0x025C(0x0004)
	float                                              TestRippleAngle;                                          // 0x0260(0x0004)
	float                                              DeactivationTimer;                                        // 0x0264(0x0004)
	float                                              ViewDistance;                                             // 0x0268(0x0004)
	struct FVector                                     SimulationPosition;                                       // 0x026C(0x000C)
	struct FVector                                     DetailPosition;                                           // 0x0278(0x000C)
	TArray<unsigned char>                              ClampMap;                                                 // 0x0284(0x000C)
	TArray<class UShadowMap2D*>                        ShadowMaps;                                               // 0x0290(0x000C)
	struct UFluidSurfaceComponent_FLightMapRef         LightMap;                                                 // 0x029C(0x0004)
	struct FPointer                                    FluidSimulation;                                          // 0x02A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceComponent");
		return ptr;
	}


	void SetSimulationPosition();
	void SetDetailPosition();
	void ApplyForce();
};


// Class Engine.SpeedTreeActor
// 0x0004 (0x0220 - 0x021C)
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                                       // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeActor");
		return ptr;
	}

};


// Class Engine.SpeedTreeComponent
// 0x00B8 (0x027C - 0x01C4)
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	class USpeedTree*                                  SpeedTree;                                                // 0x01C4(0x0004)
	unsigned long                                      bUseLeafCards : 1;                                        // 0x01C8(0x0004)
	unsigned long                                      bUseLeafMeshes : 1;                                       // 0x01C8(0x0004)
	unsigned long                                      bUseBranches : 1;                                         // 0x01C8(0x0004)
	unsigned long                                      bUseFronds : 1;                                           // 0x01C8(0x0004)
	unsigned long                                      bUseBillboards : 1;                                       // 0x01C8(0x0004)
	float                                              Lod3DStart;                                               // 0x01CC(0x0004)
	float                                              Lod3DEnd;                                                 // 0x01D0(0x0004)
	float                                              LodBillboardStart;                                        // 0x01D4(0x0004)
	float                                              LodBillboardEnd;                                          // 0x01D8(0x0004)
	float                                              LodLevelOverride;                                         // 0x01DC(0x0004)
	class UMaterialInterface*                          Branch1Material;                                          // 0x01E0(0x0004)
	class UMaterialInterface*                          Branch2Material;                                          // 0x01E4(0x0004)
	class UMaterialInterface*                          FrondMaterial;                                            // 0x01E8(0x0004)
	class UMaterialInterface*                          LeafCardMaterial;                                         // 0x01EC(0x0004)
	class UMaterialInterface*                          LeafMeshMaterial;                                         // 0x01F0(0x0004)
	class UMaterialInterface*                          BillboardMaterial;                                        // 0x01F4(0x0004)
	class UTexture2D*                                  SpeedTreeIcon;                                            // 0x01F8(0x0004) (ExportObject)
	TArray<struct FSpeedTreeStaticLight>               StaticLights;                                             // 0x01FC(0x000C)
	struct USpeedTreeComponent_FLightMapRef            BranchLightMap;                                           // 0x0208(0x0004)
	struct USpeedTreeComponent_FLightMapRef            FrondLightMap;                                            // 0x020C(0x0004)
	struct USpeedTreeComponent_FLightMapRef            LeafMeshLightMap;                                         // 0x0210(0x0004)
	struct USpeedTreeComponent_FLightMapRef            LeafCardLightMap;                                         // 0x0214(0x0004)
	struct USpeedTreeComponent_FLightMapRef            BillboardLightMap;                                        // 0x0218(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FMatrix                                     RotationOnlyMatrix;                                       // 0x0220(0x0040)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0260(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeComponent");
		return ptr;
	}


	void SetMaterial();
	void GetMaterial();
};


// Class Engine.SpeedTreeActorFactory
// 0x0004 (0x0060 - 0x005C)
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                                // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeActorFactory");
		return ptr;
	}

};


// Class Engine.SpeedTreeComponentFactory
// 0x0004 (0x0044 - 0x0040)
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeComponentFactory");
		return ptr;
	}

};


// Class Engine.SpeedTree
// 0x0044 (0x0080 - 0x003C)
class USpeedTree : public UObject
{
public:
	unsigned long                                      bLegacySpeedTree : 1;                                     // 0x003C(0x0004)
	struct FPointer                                    SRH;                                                      // 0x0040(0x0004)
	float                                              LeafStaticShadowOpacity;                                  // 0x0044(0x0004)
	class UMaterialInterface*                          Branch1Material;                                          // 0x0048(0x0004)
	class UMaterialInterface*                          Branch2Material;                                          // 0x004C(0x0004)
	class UMaterialInterface*                          FrondMaterial;                                            // 0x0050(0x0004)
	class UMaterialInterface*                          LeafCardMaterial;                                         // 0x0054(0x0004)
	class UMaterialInterface*                          LeafMeshMaterial;                                         // 0x0058(0x0004)
	class UMaterialInterface*                          BillboardMaterial;                                        // 0x005C(0x0004)
	float                                              WindStrength;                                             // 0x0060(0x0004)
	struct FVector                                     WindDirection;                                            // 0x0064(0x000C)
	struct FGuid                                       LightingGuid;                                             // 0x0070(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTree");
		return ptr;
	}

};


// Class Engine.LensFlareSource
// 0x0008 (0x0224 - 0x021C)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                            // 0x021C(0x0004)
	unsigned long                                      bCurrentlyActive : 1;                                     // 0x0220(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlareSource");
		return ptr;
	}


	void SetActorParameter();
	void SetExtColorParameter();
	void SetColorParameter();
	void SetVectorParameter();
	void SetFloatParameter();
	void OnToggle();
	void SetTemplate();
};


// Class Engine.LensFlareComponent
// 0x0038 (0x01FC - 0x01C4)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                                 // 0x01C4(0x0004)
	class UDrawLightConeComponent*                     PreviewInnerCone;                                         // 0x01C8(0x0004)
	class UDrawLightConeComponent*                     PreviewOuterCone;                                         // 0x01CC(0x0004)
	class UDrawLightRadiusComponent*                   PreviewRadius;                                            // 0x01D0(0x0004)
	unsigned long                                      bAutoActivate : 1;                                        // 0x01D4(0x0004)
	unsigned long                                      bIsActive : 1;                                            // 0x01D4(0x0004)
	unsigned long                                      bHasTranslucency : 1;                                     // 0x01D4(0x0004)
	unsigned long                                      bHasUnlitTranslucency : 1;                                // 0x01D4(0x0004)
	unsigned long                                      bHasUnlitDistortion : 1;                                  // 0x01D4(0x0004)
	unsigned long                                      bUsesSceneColor : 1;                                      // 0x01D4(0x0004)
	float                                              OuterCone;                                                // 0x01D8(0x0004)
	float                                              InnerCone;                                                // 0x01DC(0x0004)
	float                                              ConeFudgeFactor;                                          // 0x01E0(0x0004)
	float                                              Radius;                                                   // 0x01E4(0x0004)
	struct FLinearColor                                SourceColor;                                              // 0x01E8(0x0010)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x01F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlareComponent");
		return ptr;
	}


	void SetIsActive();
	void SetSourceColor();
	void SetTemplate();
};


// Class Engine.LensFlare
// 0x01BC (0x01F8 - 0x003C)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                            // 0x003C(0x0140)
	class UStaticMesh*                                 SourceMesh;                                               // 0x017C(0x0004)
	TEnumAsByte<ESceneDepthPriorityGroup>              SourceDPG;                                                // 0x0180(0x0001)
	TEnumAsByte<ESceneDepthPriorityGroup>              ReflectionsDPG;                                           // 0x0181(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0182(0x0002) MISSED OFFSET
	TArray<struct FLensFlareElement>                   Reflections;                                              // 0x0184(0x000C)
	float                                              OuterCone;                                                // 0x0190(0x0004)
	float                                              InnerCone;                                                // 0x0194(0x0004)
	float                                              ConeFudgeFactor;                                          // 0x0198(0x0004)
	float                                              Radius;                                                   // 0x019C(0x0004)
	struct FRawDistributionFloat                       ScreenPercentageMap;                                      // 0x01A0(0x001C)
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                         // 0x01BC(0x0004)
	unsigned long                                      bRenderDebugLines : 1;                                    // 0x01BC(0x0004)
	unsigned long                                      ThumbnailImageOutOfDate : 1;                              // 0x01BC(0x0004)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x01C0(0x001C)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x01DC(0x0004)
	int                                                ReflectionCount;                                          // 0x01E0(0x0004)
	struct FRotator                                    ThumbnailAngle;                                           // 0x01E4(0x000C)
	float                                              ThumbnailDistance;                                        // 0x01F0(0x0004)
	class UTexture2D*                                  ThumbnailImage;                                           // 0x01F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlare");
		return ptr;
	}

};


// Class Engine.CachedPVRTCTexture
// 0x001C (0x0058 - 0x003C)
class UCachedPVRTCTexture : public UObject
{
public:
	struct FIndirectArray_Mirror                       CachedPVRTCMips;                                          // 0x003C(0x000C)
	struct FGuid                                       UpdateGUID;                                               // 0x0048(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CachedPVRTCTexture");
		return ptr;
	}

};


// Class Engine.FlattenedTexture2D
// 0x0010 (0x0194 - 0x0184)
class UFlattenedTexture2D : public UTexture2D
{
public:
	struct FGuid                                       ParentMaterialID;                                         // 0x0184(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FlattenedTexture2D");
		return ptr;
	}

};


// Class Engine.TextureFlipBook
// 0x0040 (0x01C4 - 0x0184)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0184(0x0004)
	float                                              TimeIntoMovie;                                            // 0x0188(0x0004)
	float                                              TimeSinceLastFrame;                                       // 0x018C(0x0004)
	float                                              HorizontalScale;                                          // 0x0190(0x0004)
	float                                              VerticalScale;                                            // 0x0194(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x0198(0x0004)
	unsigned long                                      bStopped : 1;                                             // 0x0198(0x0004)
	unsigned long                                      bLooping : 1;                                             // 0x0198(0x0004)
	unsigned long                                      bAutoPlay : 1;                                            // 0x0198(0x0004)
	int                                                HorizontalImages;                                         // 0x019C(0x0004)
	int                                                VerticalImages;                                           // 0x01A0(0x0004)
	TEnumAsByte<ETextureFlipBookMethod>                FBMethod;                                                 // 0x01A4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A5(0x0003) MISSED OFFSET
	float                                              FrameRate;                                                // 0x01A8(0x0004)
	float                                              FrameTime;                                                // 0x01AC(0x0004)
	int                                                CurrentRow;                                               // 0x01B0(0x0004)
	int                                                CurrentColumn;                                            // 0x01B4(0x0004)
	float                                              RenderOffsetU;                                            // 0x01B8(0x0004)
	float                                              RenderOffsetV;                                            // 0x01BC(0x0004)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x01C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureFlipBook");
		return ptr;
	}


	void SetCurrentFrame();
	void Stop();
	void Pause();
	void Play();
};


// Class Engine.Texture2DComposite
// 0x0010 (0x0100 - 0x00F0)
class UTexture2DComposite : public UTexture
{
public:
	TArray<struct FSourceTexture2DRegion>              SourceRegions;                                            // 0x00F0(0x000C)
	int                                                MaxTextureSize;                                           // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DComposite");
		return ptr;
	}


	void ResetSourceRegions();
	void UpdateCompositeTexture();
	void SourceTexturesFullyStreamedIn();
};


// Class Engine.Texture2DDynamic
// 0x0014 (0x0104 - 0x00F0)
class UTexture2DDynamic : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00F0(0x0004)
	int                                                SizeY;                                                    // 0x00F4(0x0004)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00F8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                NumMips;                                                  // 0x00FC(0x0004)
	unsigned long                                      bIsResolveTarget : 1;                                     // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DDynamic");
		return ptr;
	}


	void STATIC_Create();
	void Init();
};


// Class Engine.TextureCube
// 0x002C (0x011C - 0x00F0)
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00F0(0x0004)
	int                                                SizeY;                                                    // 0x00F4(0x0004)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00F8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                NumMips;                                                  // 0x00FC(0x0004)
	unsigned long                                      bIsCubemapValid : 1;                                      // 0x0100(0x0004)
	class UTexture2D*                                  FacePosX;                                                 // 0x0104(0x0004)
	class UTexture2D*                                  FaceNegX;                                                 // 0x0108(0x0004)
	class UTexture2D*                                  FacePosY;                                                 // 0x010C(0x0004)
	class UTexture2D*                                  FaceNegY;                                                 // 0x0110(0x0004)
	class UTexture2D*                                  FacePosZ;                                                 // 0x0114(0x0004)
	class UTexture2D*                                  FaceNegZ;                                                 // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}

};


// Class Engine.TextureMovie
// 0x0050 (0x0140 - 0x00F0)
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00F0(0x0004)
	int                                                SizeY;                                                    // 0x00F4(0x0004)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00F8(0x0001)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00F9(0x0001)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00FA(0x0001)
	TEnumAsByte<EMovieStreamSource>                    MovieStreamSource;                                        // 0x00FB(0x0001)
	class UClass*                                      DecoderClass;                                             // 0x00FC(0x0004)
	class UCodecMovie*                                 Decoder;                                                  // 0x0100(0x0004)
	unsigned long                                      Paused : 1;                                               // 0x0104(0x0004)
	unsigned long                                      Stopped : 1;                                              // 0x0104(0x0004)
	unsigned long                                      Looping : 1;                                              // 0x0104(0x0004)
	unsigned long                                      AutoPlay : 1;                                             // 0x0104(0x0004)
	struct FUntypedBulkData_Mirror                     Data;                                                     // 0x0108(0x0034)
	struct FPointer                                    ReleaseCodecFence;                                        // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureMovie");
		return ptr;
	}


	void Stop();
	void Pause();
	void Play();
};


// Class Engine.TextureRenderTarget
// 0x0004 (0x00F4 - 0x00F0)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                                     // 0x00F0(0x0004)
	unsigned long                                      bNeedsTwoCopies : 1;                                      // 0x00F0(0x0004)
	unsigned long                                      bRenderOnce : 1;                                          // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0020 (0x0114 - 0x00F4)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00F4(0x0004)
	int                                                SizeY;                                                    // 0x00F8(0x0004)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00FC(0x0001)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00FD(0x0001)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00FE(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00FF(0x0001) MISSED OFFSET
	struct FLinearColor                                ClearColor;                                               // 0x0100(0x0010)
	unsigned long                                      bForceLinearGamma : 1;                                    // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}


	void STATIC_Create();
};


// Class Engine.ScriptedTexture
// 0x0010 (0x0124 - 0x0114)
class UScriptedTexture : public UTextureRenderTarget2D
{
public:
	unsigned long                                      bNeedsUpdate : 1;                                         // 0x0114(0x0004)
	unsigned long                                      bSkipNextClear : 1;                                       // 0x0114(0x0004)
	struct FScriptDelegate                             __Render__Delegate;                                       // 0x0118(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptedTexture");
		return ptr;
	}


	void Render();
};


// Class Engine.TextureRenderTargetCube
// 0x0005 (0x00F9 - 0x00F4)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00F4(0x0004)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00F8(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}

};


// Class Engine.AudioDevice
// 0x0264 (0x02A4 - 0x0040)
class UAudioDevice : public USubsystem
{
public:
	int                                                MaxChannels;                                              // 0x0040(0x0004)
	int                                                CommonAudioPoolSize;                                      // 0x0044(0x0004)
	float                                              LowPassFilterResonance;                                   // 0x0048(0x0004)
	float                                              MinCompressedDurationEditor;                              // 0x004C(0x0004)
	float                                              MinCompressedDurationGame;                                // 0x0050(0x0004)
	struct FPointer                                    CommonAudioPool;                                          // 0x0054(0x0004)
	int                                                CommonAudioPoolFreeBytes;                                 // 0x0058(0x0004)
	TArray<class UAudioComponent*>                     AudioComponents;                                          // 0x005C(0x000C)
	TArray<struct FPointer>                            Sources;                                                  // 0x0068(0x000C)
	TArray<struct FPointer>                            FreeSources;                                              // 0x0074(0x000C)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0080(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.WaveInstanceSourceMap
	unsigned long                                      bGameWasTicking : 1;                                      // 0x00BC(0x0004)
	TArray<struct FListener>                           Listeners;                                                // 0x00C0(0x000C)
	struct FQWord                                      CurrentTick;                                              // 0x00CC(0x0008)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x00D4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundClasses
	unsigned char                                      UnknownData02[0x3C];                                      // 0x0110(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SourceSoundClasses
	unsigned char                                      UnknownData03[0x3C];                                      // 0x014C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.CurrentSoundClasses
	unsigned char                                      UnknownData04[0x3C];                                      // 0x0188(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.DestinationSoundClasses
	unsigned char                                      UnknownData05[0x3C];                                      // 0x01C4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundModes
	struct FPointer                                    Effects;                                                  // 0x0200(0x0004)
	struct FName                                       BaseSoundModeName;                                        // 0x0204(0x0008)
	class USoundMode*                                  CurrentMode;                                              // 0x020C(0x0004)
	struct FDouble                                     SoundModeStartTime;                                       // 0x0210(0x0008)
	struct FDouble                                     SoundModeFadeInStartTime;                                 // 0x0218(0x0008)
	struct FDouble                                     SoundModeFadeInEndTime;                                   // 0x0220(0x0008)
	struct FDouble                                     SoundModeEndTime;                                         // 0x0228(0x0008)
	int                                                ListenerVolumeIndex;                                      // 0x0230(0x0004)
	struct FInteriorSettings                           ListenerInteriorSettings;                                 // 0x0234(0x0024)
	struct FDouble                                     InteriorStartTime;                                        // 0x0258(0x0008)
	struct FDouble                                     InteriorEndTime;                                          // 0x0260(0x0008)
	struct FDouble                                     ExteriorEndTime;                                          // 0x0268(0x0008)
	struct FDouble                                     InteriorLPFEndTime;                                       // 0x0270(0x0008)
	struct FDouble                                     ExteriorLPFEndTime;                                       // 0x0278(0x0008)
	float                                              InteriorVolumeInterp;                                     // 0x0280(0x0004)
	float                                              InteriorLPFInterp;                                        // 0x0284(0x0004)
	float                                              ExteriorVolumeInterp;                                     // 0x0288(0x0004)
	float                                              ExteriorLPFInterp;                                        // 0x028C(0x0004)
	class UAudioComponent*                             TestAudioComponent;                                       // 0x0290(0x0004)
	struct FPointer                                    TextToSpeech;                                             // 0x0294(0x0004)
	TEnumAsByte<EDebugState>                           DebugState;                                               // 0x0298(0x0001)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0299(0x0003) MISSED OFFSET
	float                                              TransientMasterVolume;                                    // 0x029C(0x0004)
	float                                              LastUpdateTime;                                           // 0x02A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioDevice");
		return ptr;
	}


	void SetSoundMode();
};


// Class Engine.SoundClass
// 0x0074 (0x00B0 - 0x003C)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                               // 0x003C(0x0024)
	TArray<struct FName>                               ChildClassNames;                                          // 0x0060(0x000C)
	unsigned long                                      bIsChild : 1;                                             // 0x006C(0x0004)
	int                                                MenuID;                                                   // 0x0070(0x0004) (ExportObject)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0074(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundClass.EditorData

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundClass");
		return ptr;
	}

};


// Class Engine.SoundMode
// 0x0044 (0x0080 - 0x003C)
class USoundMode : public UObject
{
public:
	unsigned long                                      bApplyEQ : 1;                                             // 0x003C(0x0004)
	struct FAudioEQEffect                              EQSettings;                                               // 0x0040(0x0024)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                        // 0x0064(0x000C)
	float                                              InitialDelay;                                             // 0x0070(0x0004)
	float                                              FadeInTime;                                               // 0x0074(0x0004)
	float                                              Duration;                                                 // 0x0078(0x0004)
	float                                              FadeOutTime;                                              // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundMode");
		return ptr;
	}

};


// Class Engine.DebugCameraController
// 0x0030 (0x0640 - 0x0610)
class ADebugCameraController : public APlayerController
{
public:
	struct FName                                       PrimaryKey;                                               // 0x0610(0x0008)
	struct FName                                       SecondaryKey;                                             // 0x0618(0x0008)
	struct FName                                       UnselectKey;                                              // 0x0620(0x0008)
	unsigned long                                      bShowSelectedInfo : 1;                                    // 0x0628(0x0004)
	unsigned long                                      bIsFrozenRendering : 1;                                   // 0x0628(0x0004)
	class APlayerController*                           OryginalControllerRef;                                    // 0x062C(0x0004)
	class UPlayer*                                     OryginalPlayer;                                           // 0x0630(0x0004)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0634(0x0004)
	class AActor*                                      SelectedActor;                                            // 0x0638(0x0004)
	class UPrimitiveComponent*                         SelectedComponent;                                        // 0x063C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraController");
		return ptr;
	}


	void ConsoleCommand();
	void ShowDebugSelectedInfo();
	void NativeInputKey();
	void DisableDebugCamera();
	void NormalSpeed();
	void MoreSpeed();
	void SetFreezeRendering();
	void OnDeactivate();
	void OnActivate();
	void PostBeginPlay();
	void Unselect();
	void SecondarySelect();
	void PrimarySelect();
};


// Class Engine.MatineePawn
// 0x0004 (0x048C - 0x0488)
class AMatineePawn : public APawn
{
public:
	class USkeletalMesh*                               PreviewMesh;                                              // 0x0488(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineePawn");
		return ptr;
	}

};


// Class Engine.Scout
// 0x006C (0x04F4 - 0x0488)
class AScout : public APawn
{
public:
	TArray<struct FPathSizeInfo>                       PathSizes;                                                // 0x0488(0x000C)
	float                                              TestJumpZ;                                                // 0x0494(0x0004)
	float                                              TestGroundSpeed;                                          // 0x0498(0x0004)
	float                                              TestMaxFallSpeed;                                         // 0x049C(0x0004)
	float                                              TestFallSpeed;                                            // 0x04A0(0x0004)
	float                                              MaxLandingVelocity;                                       // 0x04A4(0x0004)
	int                                                MinNumPlayerStarts;                                       // 0x04A8(0x0004)
	class UClass*                                      DefaultReachSpecClass;                                    // 0x04AC(0x0004)
	float                                              NavMeshGen_StepSize;                                      // 0x04B0(0x0004)
	float                                              NavMeshGen_EntityHalfHeight;                              // 0x04B4(0x0004)
	float                                              NavMeshGen_StartingHeightOffset;                          // 0x04B8(0x0004)
	float                                              NavMeshGen_MaxDropHeight;                                 // 0x04BC(0x0004)
	float                                              NavMeshGen_MaxStepHeight;                                 // 0x04C0(0x0004)
	float                                              NavMeshGen_VertZDeltaSnapThresh;                          // 0x04C4(0x0004)
	float                                              NavMeshGen_MinPolyArea;                                   // 0x04C8(0x0004)
	float                                              NavMeshGen_BorderBackfill_CheckDist;                      // 0x04CC(0x0004)
	float                                              NavMeshGen_MinMergeDotAreaThreshold;                      // 0x04D0(0x0004)
	float                                              NavMeshGen_MinMergeDotSmallArea;                          // 0x04D4(0x0004)
	float                                              NavMeshGen_MinMergeDotLargeArea;                          // 0x04D8(0x0004)
	float                                              NavMeshGen_MaxPolyHeight;                                 // 0x04DC(0x0004)
	float                                              NavMeshGen_HeightMergeThreshold;                          // 0x04E0(0x0004)
	float                                              NavMeshGen_EdgeMaxDelta;                                  // 0x04E4(0x0004)
	float                                              NavMeshGen_MaxGroundCheckSize;                            // 0x04E8(0x0004)
	float                                              NavMeshGen_MinEdgeLength;                                 // 0x04EC(0x0004)
	unsigned long                                      bHightlightOneWayReachSpecs : 1;                          // 0x04F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scout");
		return ptr;
	}


	void PreBeginPlay();
};


// Class Engine.LightVolume
// 0x0000 (0x0258 - 0x0258)
class ALightVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightVolume");
		return ptr;
	}

};


// Class Engine.Light
// 0x0008 (0x0224 - 0x021C)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                           // 0x021C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0220(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}


	void OnToggle();
	void ReplicatedEvent();
};


// Class Engine.DirectionalLight
// 0x0000 (0x0224 - 0x0224)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}

};


// Class Engine.DirectionalLightToggleable
// 0x0000 (0x0224 - 0x0224)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightToggleable");
		return ptr;
	}

};


// Class Engine.DominantDirectionalLight
// 0x0000 (0x0224 - 0x0224)
class ADominantDirectionalLight : public ADirectionalLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantDirectionalLight");
		return ptr;
	}

};


// Class Engine.PointLight
// 0x0000 (0x0224 - 0x0224)
class APointLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}

};


// Class Engine.DominantPointLight
// 0x0000 (0x0224 - 0x0224)
class ADominantPointLight : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantPointLight");
		return ptr;
	}

};


// Class Engine.PointLightMovable
// 0x0000 (0x0224 - 0x0224)
class APointLightMovable : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightMovable");
		return ptr;
	}

};


// Class Engine.PointLightToggleable
// 0x0000 (0x0224 - 0x0224)
class APointLightToggleable : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightToggleable");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
};


// Class Engine.SkyLight
// 0x0000 (0x0224 - 0x0224)
class ASkyLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}

};


// Class Engine.SkyLightToggleable
// 0x0000 (0x0224 - 0x0224)
class ASkyLightToggleable : public ASkyLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightToggleable");
		return ptr;
	}

};


// Class Engine.SpotLight
// 0x0000 (0x0224 - 0x0224)
class ASpotLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}

};


// Class Engine.DominantSpotLight
// 0x0000 (0x0224 - 0x0224)
class ADominantSpotLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantSpotLight");
		return ptr;
	}

};


// Class Engine.SpotLightMovable
// 0x0000 (0x0224 - 0x0224)
class ASpotLightMovable : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightMovable");
		return ptr;
	}

};


// Class Engine.SpotLightToggleable
// 0x0000 (0x0224 - 0x0224)
class ASpotLightToggleable : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightToggleable");
		return ptr;
	}


	void ApplyCheckpointRecord();
	void CreateCheckpointRecord();
	void ShouldSaveForCheckpoint();
};


// Class Engine.StaticLightCollectionActor
// 0x0010 (0x0234 - 0x0224)
class AStaticLightCollectionActor : public ALight
{
public:
	TArray<class ULightComponent*>                     LightComponents;                                          // 0x0224(0x000C)
	int                                                MaxLightComponents;                                       // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticLightCollectionActor");
		return ptr;
	}

};


// Class Engine.DirectionalLightComponent
// 0x0018 (0x01B4 - 0x019C)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                            // 0x019C(0x0004)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x01A0(0x0004)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                        // 0x01A4(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}


	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyLightColor();
};


// Class Engine.DominantDirectionalLightComponent
// 0x00C8 (0x027C - 0x01B4)
class UDominantDirectionalLightComponent : public UDirectionalLightComponent
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x01B4(0x000C) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                                  // 0x01C0(0x00B0)
	struct FArray_Mirror                               DominantLightShadowMap;                                   // 0x0270(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantDirectionalLightComponent");
		return ptr;
	}

};


// Class Engine.PointLightComponent
// 0x0078 (0x0214 - 0x019C)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                                   // 0x019C(0x0004) (Const)
	float                                              Radius;                                                   // 0x01A0(0x0004) (Const)
	float                                              FalloffExponent;                                          // 0x01A4(0x0004) (Const)
	float                                              ShadowFalloffExponent;                                    // 0x01A8(0x0004)
	float                                              MinShadowFalloffRadius;                                   // 0x01AC(0x0004)
	struct FMatrix                                     CachedParentToWorld;                                      // 0x01B0(0x0040)
	struct FVector                                     Translation;                                              // 0x01F0(0x000C)
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                                       // 0x01FC(0x0004)
	struct FLightmassPointLightSettings                LightmassSettings;                                        // 0x0200(0x0010)
	class UDrawLightRadiusComponent*                   PreviewLightSourceRadius;                                 // 0x0210(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}


	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyLightColor();
	void SetTranslation();
};


// Class Engine.DominantPointLightComponent
// 0x0000 (0x0214 - 0x0214)
class UDominantPointLightComponent : public UPointLightComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantPointLightComponent");
		return ptr;
	}

};


// Class Engine.SpotLightComponent
// 0x0010 (0x0224 - 0x0214)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                           // 0x0214(0x0004)
	float                                              OuterConeAngle;                                           // 0x0218(0x0004)
	class UDrawLightConeComponent*                     PreviewInnerCone;                                         // 0x021C(0x0004)
	class UDrawLightConeComponent*                     PreviewOuterCone;                                         // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}

};


// Class Engine.DominantSpotLightComponent
// 0x0000 (0x0224 - 0x0224)
class UDominantSpotLightComponent : public USpotLightComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantSpotLightComponent");
		return ptr;
	}

};


// Class Engine.SkyLightComponent
// 0x0008 (0x01A4 - 0x019C)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                          // 0x019C(0x0004)
	struct FColor                                      LowerColor;                                               // 0x01A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}

};


// Class Engine.SphericalHarmonicLightComponent
// 0x0098 (0x0234 - 0x019C)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                               // 0x01A0(0x0090)
	unsigned long                                      bRenderBeforeModShadows : 1;                              // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphericalHarmonicLightComponent");
		return ptr;
	}

};


// Class Engine.DrawLightConeComponent
// 0x0000 (0x01D4 - 0x01D4)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawLightConeComponent");
		return ptr;
	}

};


// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x01D8 - 0x01D8)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawLightRadiusComponent");
		return ptr;
	}

};


// Class Engine.LightFunction
// 0x0010 (0x004C - 0x003C)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                           // 0x003C(0x0004)
	struct FVector                                     Scale;                                                    // 0x0040(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightFunction");
		return ptr;
	}

};


// Class Engine.SkeletalMeshComponent
// 0x0378 (0x0548 - 0x01D0)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x01D0(0x0004)
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                                  // 0x01D4(0x0004)
	class UAnimTree*                                   AnimTreeTemplate;                                         // 0x01D8(0x0004)
	class UAnimNode*                                   Animations;                                               // 0x01DC(0x0004)
	TArray<class UAnimNode*>                           AnimTickArray;                                            // 0x01E0(0x000C)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x01EC(0x0004)
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                                     // 0x01F0(0x0004)
	float                                              PhysicsWeight;                                            // 0x01F4(0x0004) (Const)
	float                                              GlobalAnimRateScale;                                      // 0x01F8(0x0004)
	struct FPointer                                    MeshObject;                                               // 0x01FC(0x0004)
	struct FColor                                      WireframeColor;                                           // 0x0200(0x0004)
	TArray<struct FMatrix>                             SpaceBases;                                               // 0x0204(0x000C)
	TArray<struct FBoneAtom>                           LocalAtoms;                                               // 0x0210(0x000C)
	TArray<unsigned char>                              RequiredBones;                                            // 0x021C(0x000C)
	TArray<unsigned char>                              ComposePass1RequiredBones;                                // 0x0228(0x000C)
	TArray<unsigned char>                              ComposePass2RequiredBones;                                // 0x0234(0x000C)
	TArray<unsigned char>                              ComposePass3RequiredBones;                                // 0x0240(0x000C)
	class USkeletalMeshComponent*                      ParentAnimComponent;                                      // 0x024C(0x0004)
	TArray<int>                                        ParentBoneMap;                                            // 0x0250(0x000C)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x025C(0x000C)
	TArray<class USoundCue*>                           AnimNotifySoundCues;                                      // 0x0268(0x000C)
	TArray<class UAnimSet*>                            TemporarySavedAnimSets;                                   // 0x0274(0x000C)
	TArray<class UMorphTargetSet*>                     MorphSets;                                                // 0x0280(0x000C)
	TArray<struct FActiveMorph>                        ActiveMorphs;                                             // 0x028C(0x000C)
	TArray<struct FActiveMorph>                        ActiveCurveMorphs;                                        // 0x0298(0x000C)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x02A4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMeshComponent.MorphTargetIndexMap
	TArray<struct FAttachment>                         Attachments;                                              // 0x02E0(0x000C)
	TArray<unsigned char>                              SkelControlIndex;                                         // 0x02EC(0x000C)
	TArray<unsigned char>                              PostPhysSkelControlIndex;                                 // 0x02F8(0x000C)
	int                                                ForcedLodModel;                                           // 0x0304(0x0004)
	int                                                MinLodModel;                                              // 0x0308(0x0004)
	int                                                PredictedLODLevel;                                        // 0x030C(0x0004)
	int                                                OldPredictedLODLevel;                                     // 0x0310(0x0004)
	float                                              MaxDistanceFactor;                                        // 0x0314(0x0004)
	int                                                bForceWireframe;                                          // 0x0318(0x0004)
	int                                                bForceRefpose;                                            // 0x031C(0x0004)
	int                                                bOldForceRefPose;                                         // 0x0320(0x0004)
	unsigned long                                      bNoSkeletonUpdate : 1;                                    // 0x0324(0x0004)
	int                                                bDisplayBones;                                            // 0x0328(0x0004)
	int                                                bShowPrePhysBones;                                        // 0x032C(0x0004)
	int                                                bHideSkin;                                                // 0x0330(0x0004)
	int                                                bForceRawOffset;                                          // 0x0334(0x0004)
	int                                                bIgnoreControllers;                                       // 0x0338(0x0004)
	int                                                bTransformFromAnimParent;                                 // 0x033C(0x0004)
	int                                                TickTag;                                                  // 0x0340(0x0004)
	int                                                CachedAtomsTag;                                           // 0x0344(0x0004)
	int                                                bUseSingleBodyPhysics;                                    // 0x0348(0x0004)
	int                                                bRequiredBonesUpToDate;                                   // 0x034C(0x0004)
	float                                              MinDistFactorForKinematicUpdate;                          // 0x0350(0x0004)
	int                                                FramesPhysicsAsleep;                                      // 0x0354(0x0004)
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;                      // 0x0358(0x0004)
	unsigned long                                      bConsiderAllBodiesForBounds : 1;                          // 0x0358(0x0004)
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                           // 0x0358(0x0004)
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;                    // 0x0358(0x0004)
	unsigned long                                      bTickAnimNodesWhenNotRendered : 1;                        // 0x0358(0x0004)
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;                   // 0x0358(0x0004)
	unsigned long                                      bForceDiscardRootMotion : 1;                              // 0x0358(0x0004)
	unsigned long                                      bRootMotionModeChangeNotify : 1;                          // 0x0358(0x0004)
	unsigned long                                      bRootMotionExtractedNotify : 1;                           // 0x0358(0x0004)
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;               // 0x0358(0x0004)
	unsigned long                                      bAnimTreeInitialised : 1;                                 // 0x0358(0x0004)
	unsigned long                                      bForceMeshObjectUpdate : 1;                               // 0x0358(0x0004)
	unsigned long                                      bHasPhysicsAssetInstance : 1;                             // 0x0358(0x0004)
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;                   // 0x0358(0x0004)
	unsigned long                                      bUpdateJointsFromAnimation : 1;                           // 0x0358(0x0004)
	unsigned long                                      bSkelCompFixed : 1;                                       // 0x0358(0x0004)
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                              // 0x0358(0x0004)
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                        // 0x0358(0x0004)
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                          // 0x0358(0x0004)
	unsigned long                                      bPerBoneVolumeEffects : 1;                                // 0x0358(0x0004)
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;                    // 0x0358(0x0004)
	unsigned long                                      bUseRawData : 1;                                          // 0x0358(0x0004)
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;                      // 0x0358(0x0004)
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;                   // 0x0358(0x0004)
	unsigned long                                      bNeedsToDeleteHitMask : 1;                                // 0x0358(0x0004)
	unsigned long                                      bPauseAnims : 1;                                          // 0x0358(0x0004)
	unsigned long                                      bChartDistanceFactor : 1;                                 // 0x0358(0x0004)
	unsigned long                                      bEnableLineCheckWithBounds : 1;                           // 0x0358(0x0004)
	struct FVector                                     LineCheckBoundsScale;                                     // 0x035C(0x000C)
	unsigned long                                      bEnableClothSimulation : 1;                               // 0x0368(0x0004)
	unsigned long                                      bDisableClothCollision : 1;                               // 0x0368(0x0004)
	unsigned long                                      bClothFrozen : 1;                                         // 0x0368(0x0004)
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;                      // 0x0368(0x0004)
	unsigned long                                      bClothAwakeOnStartup : 1;                                 // 0x0368(0x0004)
	unsigned long                                      bClothBaseVelClamp : 1;                                   // 0x0368(0x0004)
	unsigned long                                      bClothBaseVelInterp : 1;                                  // 0x0368(0x0004)
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                          // 0x0368(0x0004)
	unsigned long                                      bIsClothOnStaticObject : 1;                               // 0x0368(0x0004)
	unsigned long                                      bUpdatedFixedClothVerts : 1;                              // 0x0368(0x0004)
	unsigned long                                      bClothPositionalDampening : 1;                            // 0x0368(0x0004)
	unsigned long                                      bClothWindRelativeToOwner : 1;                            // 0x0368(0x0004)
	unsigned long                                      bRecentlyRendered : 1;                                    // 0x0368(0x0004)
	unsigned long                                      bCacheAnimSequenceNodes : 1;                              // 0x0368(0x0004)
	unsigned long                                      bForceMeshObjectUpdates : 1;                              // 0x0368(0x0004)
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                           // 0x0368(0x0004)
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                            // 0x0368(0x0004)
	unsigned long                                      bUpdateComposeSkeletonPasses : 1;                         // 0x0368(0x0004)
	TArray<unsigned long>                              HiddenMaterials;                                          // 0x036C(0x000C)
	TArray<struct FBonePair>                           InstanceVertexWeightBones;                                // 0x0378(0x000C)
	struct FVector                                     FrozenLocalToWorldPos;                                    // 0x0384(0x000C)
	struct FRotator                                    FrozenLocalToWorldRot;                                    // 0x0390(0x000C)
	struct FVector                                     ClothExternalForce;                                       // 0x039C(0x000C)
	struct FVector                                     ClothWind;                                                // 0x03A8(0x000C)
	struct FVector                                     ClothBaseVelClampRange;                                   // 0x03B4(0x000C)
	float                                              ClothBlendWeight;                                         // 0x03C0(0x0004)
	float                                              ClothDynamicBlendWeight;                                  // 0x03C4(0x0004)
	float                                              ClothBlendMinDistanceFactor;                              // 0x03C8(0x0004)
	float                                              ClothBlendMaxDistanceFactor;                              // 0x03CC(0x0004)
	struct FVector                                     MinPosDampRange;                                          // 0x03D0(0x000C)
	struct FVector                                     MaxPosDampRange;                                          // 0x03DC(0x000C)
	struct FVector                                     MinPosDampScale;                                          // 0x03E8(0x000C)
	struct FVector                                     MaxPosDampScale;                                          // 0x03F4(0x000C)
	struct FPointer                                    ClothSim;                                                 // 0x0400(0x0004)
	int                                                SceneIndex;                                               // 0x0404(0x0004)
	TArray<struct FVector>                             ClothMeshPosData;                                         // 0x0408(0x000C)
	TArray<struct FVector>                             ClothMeshNormalData;                                      // 0x0414(0x000C)
	TArray<int>                                        ClothMeshIndexData;                                       // 0x0420(0x000C)
	int                                                NumClothMeshVerts;                                        // 0x042C(0x0004)
	int                                                NumClothMeshIndices;                                      // 0x0430(0x0004)
	TArray<int>                                        ClothMeshParentData;                                      // 0x0434(0x000C)
	int                                                NumClothMeshParentIndices;                                // 0x0440(0x0004)
	TArray<struct FVector>                             ClothMeshWeldedPosData;                                   // 0x0444(0x000C)
	TArray<struct FVector>                             ClothMeshWeldedNormalData;                                // 0x0450(0x000C)
	TArray<int>                                        ClothMeshWeldedIndexData;                                 // 0x045C(0x000C)
	int                                                ClothDirtyBufferFlag;                                     // 0x0468(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   ClothRBChannel;                                           // 0x046C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                               // 0x0470(0x0004)
	float                                              ClothForceScale;                                          // 0x0474(0x0004)
	float                                              ClothImpulseScale;                                        // 0x0478(0x0004)
	float                                              ClothAttachmentTearFactor;                                // 0x047C(0x0004)
	unsigned long                                      bClothUseCompartment : 1;                                 // 0x0480(0x0004)
	float                                              MinDistanceForClothReset;                                 // 0x0484(0x0004)
	struct FVector                                     LastClothLocation;                                        // 0x0488(0x000C)
	struct FPointer                                    SoftBodySim;                                              // 0x0494(0x0004)
	int                                                SoftBodySceneIndex;                                       // 0x0498(0x0004)
	unsigned long                                      bEnableSoftBodySimulation : 1;                            // 0x049C(0x0004)
	TArray<struct FVector>                             SoftBodyTetraPosData;                                     // 0x04A0(0x000C)
	TArray<int>                                        SoftBodyTetraIndexData;                                   // 0x04AC(0x000C)
	int                                                NumSoftBodyTetraVerts;                                    // 0x04B8(0x0004)
	int                                                NumSoftBodyTetraIndices;                                  // 0x04BC(0x0004)
	float                                              SoftBodyImpulseScale;                                     // 0x04C0(0x0004)
	unsigned long                                      bSoftBodyFrozen : 1;                                      // 0x04C4(0x0004)
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;                   // 0x04C4(0x0004)
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                              // 0x04C4(0x0004)
	unsigned long                                      bSoftBodyUseCompartment : 1;                              // 0x04C4(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   SoftBodyRBChannel;                                        // 0x04C8(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04C9(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                SoftBodyRBCollideWithChannels;                            // 0x04CC(0x0004)
	struct FPointer                                    SoftBodyASVPlane;                                         // 0x04D0(0x0004)
	class UMaterial*                                   LimitMaterial;                                            // 0x04D4(0x0004)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET
	struct FBoneAtom                                   RootMotionDelta;                                          // 0x04E0(0x0020)
	struct FVector                                     RootMotionVelocity;                                       // 0x0500(0x000C)
	struct FVector                                     RootBoneTranslation;                                      // 0x050C(0x000C)
	struct FVector                                     RootMotionAccelScale;                                     // 0x0518(0x000C)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x0524(0x0001)
	TEnumAsByte<ERootMotionMode>                       PreviousRMM;                                              // 0x0525(0x0001)
	TEnumAsByte<ERootMotionMode>                       PendingRMM;                                               // 0x0526(0x0001)
	TEnumAsByte<ERootMotionMode>                       OldPendingRMM;                                            // 0x0527(0x0001)
	int                                                bRMMOneFrameDelay;                                        // 0x0528(0x0004)
	TEnumAsByte<ERootMotionRotationMode>               RootMotionRotationMode;                                   // 0x052C(0x0001)
	TEnumAsByte<EFaceFXBlendMode>                      FaceFXBlendMode;                                          // 0x052D(0x0001)
	unsigned char                                      UnknownData04[0x2];                                       // 0x052E(0x0002) MISSED OFFSET
	struct FPointer                                    FaceFXActorInstance;                                      // 0x0530(0x0004)
	class UAudioComponent*                             CachedFaceFXAudioComp;                                    // 0x0534(0x0004)
	TArray<unsigned char>                              BoneVisibility;                                           // 0x0538(0x000C)
	float                                              ProgressiveDrawingFraction;                               // 0x0544(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return ptr;
	}


	void BreakConstraint();
	void SkelMeshCompOnParticleSystemFinished();
	void PlayParticleEffect();
	void StopAnim();
	void PlayAnim();
	void ShowMaterialSection();
	void UpdateMeshForBrokenConstraints();
	void UnHideBoneByName();
	void HideBoneByName();
	void IsBoneHidden();
	void UnHideBone();
	void HideBone();
	void SetFaceFXRegisterEx();
	void SetFaceFXRegister();
	void GetFaceFXRegister();
	void DeclareFaceFXRegister();
	void IsPlayingFaceFXAnim();
	void StopFaceFXAnim();
	void PlayFaceFXAnim();
	void ToggleInstanceVertexWeights();
	void UpdateInstanceVertexWeightBones();
	void FindInstanceVertexweightBonePair();
	void RemoveInstanceVertexWeightBoneParented();
	void AddInstanceVertexWeightBoneParented();
	void GetBonesWithinRadius();
	void UpdateAnimations();
	void ForceSkelUpdate();
	void UpdateRBBonesFromSpaceBases();
	void SetHasPhysicsAssetInstance();
	void FindBodyInstanceNamed();
	void FindConstraintBoneName();
	void FindConstraintIndex();
	void InitMorphTargets();
	void InitSkelControls();
	void UpdateParentBoneMap();
	void SetParentAnimComponent();
	void SetAnimTreeTemplate();
	void GetClosestCollidingBoneLocation();
	void FindClosestBone();
	void TransformFromBoneSpace();
	void TransformToBoneSpace();
	void GetBoneAxis();
	void GetRefPosePosition();
	void BoneIsChildOf();
	void GetBoneNames();
	void GetParentBone();
	void GetBoneMatrix();
	void GetBoneName();
	void MatchRefBone();
	void GetBoneLocation();
	void GetBoneQuaternion();
	void FindMorphNode();
	void FindSkelControl();
	void AllAnimNodes();
	void FindAnimNode();
	void FindMorphTarget();
	void GetAnimLength();
	void GetAnimRateByDuration();
	void RestoreSavedAnimSets();
	void SaveAnimSets();
	void FindAnimSequence();
	void WakeSoftBody();
	void SetSoftBodyFrozen();
	void UpdateSoftBodyParams();
	void SetClothValidBounds();
	void EnableClothValidBounds();
	void AttachClothToCollidingShapes();
	void SetClothVelocity();
	void SetClothPosition();
	void SetClothSleep();
	void SetClothThickness();
	void SetClothTearFactor();
	void SetClothStretchingStiffness();
	void SetClothSolverIterations();
	void SetClothSleepLinearVelocity();
	void SetClothPressure();
	void SetClothFriction();
	void SetClothFlags();
	void SetClothDampingCoefficient();
	void SetClothCollisionResponseCoefficient();
	void SetClothBendingStiffness();
	void SetClothAttachmentTearFactor();
	void SetClothAttachmentResponseCoefficient();
	void GetClothThickness();
	void GetClothTearFactor();
	void GetClothStretchingStiffness();
	void GetClothSolverIterations();
	void GetClothSleepLinearVelocity();
	void GetClothPressure();
	void GetClothFriction();
	void GetClothFlags();
	void GetClothDampingCoefficient();
	void GetClothCollisionResponseCoefficient();
	void GetClothBendingStiffness();
	void GetClothAttachmentTearFactor();
	void GetClothAttachmentResponseCoefficient();
	void ResetClothVertsToRefPose();
	void SetAttachClothVertsToBaseBody();
	void SetClothExternalForce();
	void UpdateClothParams();
	void SetClothFrozen();
	void SetEnableClothSimulation();
	void SetForceRefPose();
	void SetPhysicsAsset();
	void SetSkeletalMesh();
	void AttachedComponents();
	void IsComponentAttached();
	void FindComponentAttachedToBone();
	void GetSocketBoneName();
	void GetSocketByName();
	void GetSocketWorldLocationAndRotation();
	void AttachComponentToSocket();
	void DetachComponent();
	void AttachComponent();
};


// Class Engine.SkeletalMesh
// 0x0360 (0x039C - 0x003C)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                                   // 0x003C(0x001C)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0058(0x000C)
	struct FVector                                     Origin;                                                   // 0x0064(0x000C)
	struct FRotator                                    RotOrigin;                                                // 0x0070(0x000C)
	struct FVector                                     PreviewScale;                                             // 0x007C(0x000C)
	TArray<int>                                        RefSkeleton;                                              // 0x0088(0x000C)
	int                                                SkeletalDepth;                                            // 0x0094(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0098(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                                // 0x00D4(0x000C)
	TArray<struct FBoneTransform>                      RefBasesInvMatrix;                                        // 0x00E0(0x000C)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                          // 0x00EC(0x000C)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x00F8(0x0001)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x00F9(0x0001)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00FA(0x0002) MISSED OFFSET
	struct FVector                                     Scale;                                                    // 0x00FC(0x000C)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x0108(0x000C)
	TArray<struct FString>                             BoneBreakNames;                                           // 0x0114(0x000C)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                  // 0x0120(0x000C)
	TArray<struct FName>                               PerPolyCollisionBones;                                    // 0x012C(0x000C)
	TArray<struct FName>                               AddToParentPerPolyCollisionBone;                          // 0x0138(0x000C)
	TArray<int>                                        PerPolyBoneKDOPs;                                         // 0x0144(0x000C)
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                             // 0x0150(0x0004)
	unsigned long                                      bUseSimpleLineCollision : 1;                              // 0x0150(0x0004)
	unsigned long                                      bUseSimpleBoxCollision : 1;                               // 0x0150(0x0004)
	unsigned long                                      bForceCPUSkinning : 1;                                    // 0x0150(0x0004)
	unsigned long                                      bUseFullPrecisionUVs : 1;                                 // 0x0150(0x0004)
	unsigned long                                      bUsePackedPosition : 1;                                   // 0x0150(0x0004)
	class UFaceFXAsset*                                FaceFXAsset;                                              // 0x0154(0x0004)
	class UPhysicsAsset*                               BoundsPreviewAsset;                                       // 0x0158(0x0004) (ExportObject)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x015C(0x000C) (ExportObject)
	int                                                LODBiasPC;                                                // 0x0168(0x0004)
	int                                                LODBiasPS3;                                               // 0x016C(0x0004)
	int                                                LODBiasXbox360;                                           // 0x0170(0x0004)
	TArray<struct FPointer>                            ClothMesh;                                                // 0x0174(0x000C)
	TArray<float>                                      ClothMeshScale;                                           // 0x0180(0x000C)
	TArray<int>                                        ClothToGraphicsVertMap;                                   // 0x018C(0x000C)
	TArray<float>                                      ClothMovementScale;                                       // 0x0198(0x000C)
	TEnumAsByte<EClothMovementScaleGen>                ClothMovementScaleGenMode;                                // 0x01A4(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01A5(0x0003) MISSED OFFSET
	float                                              ClothToAnimMeshMaxDist;                                   // 0x01A8(0x0004)
	unsigned long                                      bLimitClothToAnimMesh : 1;                                // 0x01AC(0x0004)
	struct FString                                     SourceFilePath;                                           // 0x01B0(0x000C) (ExportObject)
	struct FString                                     SourceFileTimestamp;                                      // 0x01BC(0x000C) (ExportObject)
	TArray<int>                                        ClothWeldingMap;                                          // 0x01C8(0x000C)
	int                                                ClothWeldingDomain;                                       // 0x01D4(0x0004)
	TArray<int>                                        ClothWeldedIndices;                                       // 0x01D8(0x000C)
	unsigned long                                      bForceNoWelding : 1;                                      // 0x01E4(0x0004)
	int                                                NumFreeClothVerts;                                        // 0x01E8(0x0004)
	TArray<int>                                        ClothIndexBuffer;                                         // 0x01EC(0x000C)
	TArray<struct FName>                               ClothBones;                                               // 0x01F8(0x000C)
	int                                                ClothHierarchyLevels;                                     // 0x0204(0x0004)
	unsigned long                                      bEnableClothBendConstraints : 1;                          // 0x0208(0x0004)
	unsigned long                                      bEnableClothDamping : 1;                                  // 0x0208(0x0004)
	unsigned long                                      bUseClothCOMDamping : 1;                                  // 0x0208(0x0004)
	float                                              ClothStretchStiffness;                                    // 0x020C(0x0004)
	float                                              ClothBendStiffness;                                       // 0x0210(0x0004)
	float                                              ClothDensity;                                             // 0x0214(0x0004)
	float                                              ClothThickness;                                           // 0x0218(0x0004)
	float                                              ClothDamping;                                             // 0x021C(0x0004)
	int                                                ClothIterations;                                          // 0x0220(0x0004)
	int                                                ClothHierarchicalIterations;                              // 0x0224(0x0004)
	float                                              ClothFriction;                                            // 0x0228(0x0004)
	float                                              ClothRelativeGridSpacing;                                 // 0x022C(0x0004)
	float                                              ClothPressure;                                            // 0x0230(0x0004)
	float                                              ClothCollisionResponseCoefficient;                        // 0x0234(0x0004)
	float                                              ClothAttachmentResponseCoefficient;                       // 0x0238(0x0004)
	float                                              ClothAttachmentTearFactor;                                // 0x023C(0x0004)
	float                                              ClothSleepLinearVelocity;                                 // 0x0240(0x0004)
	float                                              HardStretchLimitFactor;                                   // 0x0244(0x0004)
	unsigned long                                      bHardStretchLimit : 1;                                    // 0x0248(0x0004)
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;                     // 0x0248(0x0004)
	unsigned long                                      bEnableClothSelfCollision : 1;                            // 0x0248(0x0004)
	unsigned long                                      bEnableClothPressure : 1;                                 // 0x0248(0x0004)
	unsigned long                                      bEnableClothTwoWayCollision : 1;                          // 0x0248(0x0004)
	TArray<struct FClothSpecialBoneInfo>               ClothSpecialBones;                                        // 0x024C(0x000C)
	unsigned long                                      bEnableClothLineChecks : 1;                               // 0x0258(0x0004)
	unsigned long                                      bClothMetal : 1;                                          // 0x0258(0x0004)
	float                                              ClothMetalImpulseThreshold;                               // 0x025C(0x0004)
	float                                              ClothMetalPenetrationDepth;                               // 0x0260(0x0004)
	float                                              ClothMetalMaxDeformationDistance;                         // 0x0264(0x0004)
	unsigned long                                      bEnableClothTearing : 1;                                  // 0x0268(0x0004)
	float                                              ClothTearFactor;                                          // 0x026C(0x0004)
	int                                                ClothTearReserve;                                         // 0x0270(0x0004)
	unsigned long                                      bEnableValidBounds : 1;                                   // 0x0274(0x0004)
	struct FVector                                     ValidBoundsMin;                                           // 0x0278(0x000C)
	struct FVector                                     ValidBoundsMax;                                           // 0x0284(0x000C)
	struct FMap_Mirror                                 ClothTornTriMap;                                          // 0x0290(0x003C)
	TArray<int>                                        SoftBodySurfaceToGraphicsVertMap;                         // 0x02CC(0x000C)
	TArray<int>                                        SoftBodySurfaceIndices;                                   // 0x02D8(0x000C)
	TArray<struct FVector>                             SoftBodyTetraVertsUnscaled;                               // 0x02E4(0x000C)
	TArray<int>                                        SoftBodyTetraIndices;                                     // 0x02F0(0x000C)
	TArray<struct FSoftBodyTetraLink>                  SoftBodyTetraLinks;                                       // 0x02FC(0x000C)
	TArray<struct FPointer>                            CachedSoftBodyMeshes;                                     // 0x0308(0x000C)
	TArray<float>                                      CachedSoftBodyMeshScales;                                 // 0x0314(0x000C)
	TArray<struct FName>                               SoftBodyBones;                                            // 0x0320(0x000C)
	TArray<struct FSoftBodySpecialBoneInfo>            SoftBodySpecialBones;                                     // 0x032C(0x000C)
	float                                              SoftBodyVolumeStiffness;                                  // 0x0338(0x0004)
	float                                              SoftBodyStretchingStiffness;                              // 0x033C(0x0004)
	float                                              SoftBodyDensity;                                          // 0x0340(0x0004)
	float                                              SoftBodyParticleRadius;                                   // 0x0344(0x0004)
	float                                              SoftBodyDamping;                                          // 0x0348(0x0004)
	int                                                SoftBodySolverIterations;                                 // 0x034C(0x0004)
	float                                              SoftBodyFriction;                                         // 0x0350(0x0004)
	float                                              SoftBodyRelativeGridSpacing;                              // 0x0354(0x0004)
	float                                              SoftBodySleepLinearVelocity;                              // 0x0358(0x0004)
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                         // 0x035C(0x0004)
	float                                              SoftBodyAttachmentResponse;                               // 0x0360(0x0004)
	float                                              SoftBodyCollisionResponse;                                // 0x0364(0x0004)
	float                                              SoftBodyDetailLevel;                                      // 0x0368(0x0004)
	int                                                SoftBodySubdivisionLevel;                                 // 0x036C(0x0004)
	unsigned long                                      bSoftBodyIsoSurface : 1;                                  // 0x0370(0x0004)
	unsigned long                                      bEnableSoftBodyDamping : 1;                               // 0x0370(0x0004)
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                               // 0x0370(0x0004)
	float                                              SoftBodyAttachmentThreshold;                              // 0x0374(0x0004)
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;                       // 0x0378(0x0004)
	float                                              SoftBodyAttachmentTearFactor;                             // 0x037C(0x0004)
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                            // 0x0380(0x0004)
	TArray<unsigned long>                              GraphicsIndexIsCloth;                                     // 0x0384(0x000C)
	int                                                ReleaseResourcesFence;                                    // 0x0390(0x0004)
	struct FQWord                                      SkelMeshRUID;                                             // 0x0394(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0040 (0x007C - 0x003C)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x003C(0x0008)
	struct FName                                       BoneName;                                                 // 0x0044(0x0008)
	struct FVector                                     RelativeLocation;                                         // 0x004C(0x000C)
	struct FRotator                                    RelativeRotation;                                         // 0x0058(0x000C)
	struct FVector                                     RelativeScale;                                            // 0x0064(0x000C)
	class USkeletalMesh*                               PreviewSkelMesh;                                          // 0x0070(0x0004) (ExportObject)
	class USkeletalMeshComponent*                      PreviewSkelComp;                                          // 0x0074(0x0004)
	class UStaticMesh*                                 PreviewStaticMesh;                                        // 0x0078(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}

};


// Class Engine.SplineActor
// 0x0050 (0x026C - 0x021C)
class ASplineActor : public AActor
{
public:
	TArray<struct FSplineConnection>                   Connections;                                              // 0x021C(0x000C)
	struct FVector                                     SplineActorTangent;                                       // 0x0228(0x000C)
	struct FColor                                      SplineColor;                                              // 0x0234(0x0004)
	unsigned long                                      bDisableDestination : 1;                                  // 0x0238(0x0004)
	unsigned long                                      bAlreadyVisited : 1;                                      // 0x0238(0x0004)
	TArray<class ASplineActor*>                        LinksFrom;                                                // 0x023C(0x000C)
	class ASplineActor*                                nextOrdered;                                              // 0x0248(0x0004)
	class ASplineActor*                                prevOrdered;                                              // 0x024C(0x0004)
	class ASplineActor*                                previousPath;                                             // 0x0250(0x0004)
	int                                                bestPathWeight;                                           // 0x0254(0x0004)
	int                                                visitedWeight;                                            // 0x0258(0x0004)
	struct FInterpCurveFloat                           SplineVelocityOverTime;                                   // 0x025C(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineActor");
		return ptr;
	}


	void OnToggle();
	void GetAllConnectedSplineActors();
	void FindSplinePathTo();
	void GetBestConnectionInDirection();
	void GetRandomConnection();
	void BreakAllConnectionsFrom();
	void BreakAllConnections();
	void BreakConnectionTo();
	void FindTargetForComponent();
	void FindSplineComponentTo();
	void IsConnectedTo();
	void AddConnectionTo();
	void UpdateConnectedSplineComponents();
	void UpdateSplineComponents();
	void GetWorldSpaceTangent();
};


// Class Engine.SplineLoftActor
// 0x0040 (0x02AC - 0x026C)
class ASplineLoftActor : public ASplineActor
{
public:
	float                                              ScaleX;                                                   // 0x026C(0x0004)
	float                                              ScaleY;                                                   // 0x0270(0x0004)
	TArray<class USplineMeshComponent*>                SplineMeshComps;                                          // 0x0274(0x000C)
	class UStaticMesh*                                 DeformMesh;                                               // 0x0280(0x0004)
	TArray<class UMaterialInterface*>                  DeformMeshMaterials;                                      // 0x0284(0x000C)
	float                                              Roll;                                                     // 0x0290(0x0004)
	struct FVector                                     WorldXDir;                                                // 0x0294(0x000C)
	struct FVector2D                                   Offset;                                                   // 0x02A0(0x0008)
	unsigned long                                      bSmoothInterpRollAndScale : 1;                            // 0x02A8(0x0004)
	unsigned long                                      bAcceptsLights : 1;                                       // 0x02A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineLoftActor");
		return ptr;
	}


	void ClearLoftMesh();
};


// Class Engine.SplineComponent
// 0x0034 (0x01F8 - 0x01C4)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                               // 0x01C4(0x0010)
	float                                              SplineCurviness;                                          // 0x01D4(0x0004)
	struct FColor                                      SplineColor;                                              // 0x01D8(0x0004)
	float                                              SplineDrawRes;                                            // 0x01DC(0x0004)
	float                                              SplineArrowSize;                                          // 0x01E0(0x0004)
	unsigned long                                      bSplineDisabled : 1;                                      // 0x01E4(0x0004)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x01E8(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineComponent");
		return ptr;
	}


	void GetTangentAtDistanceAlongSpline();
	void GetLocationAtDistanceAlongSpline();
	void GetSplineLength();
	void UpdateSplineReparamTable();
	void UpdateSplineCurviness();
};


// Class Engine.ProcBuilding
// 0x00CC (0x0324 - 0x0258)
class AProcBuilding : public AVolume
{
public:
	class UProcBuildingRuleset*                        Ruleset;                                                  // 0x0258(0x0004) (ExportObject)
	TArray<struct FPBMeshCompInfo>                     BuildingMeshCompInfos;                                    // 0x025C(0x000C)
	TArray<struct FPBFracMeshCompInfo>                 BuildingFracMeshCompInfos;                                // 0x0268(0x000C)
	class UStaticMeshComponent*                        SimpleMeshComp;                                           // 0x0274(0x0004)
	unsigned long                                      bGenerateRoofMesh : 1;                                    // 0x0278(0x0004)
	unsigned long                                      bGenerateFloorMesh : 1;                                   // 0x0278(0x0004)
	unsigned long                                      bApplyRulesToRoof : 1;                                    // 0x0278(0x0004)
	unsigned long                                      bApplyRulesToFloor : 1;                                   // 0x0278(0x0004)
	unsigned long                                      bSplitWallsAtRoofLevels : 1;                              // 0x0278(0x0004)
	unsigned long                                      bSplitWallsAtWallEdges : 1;                               // 0x0278(0x0004)
	unsigned long                                      bQuickEdited : 1;                                         // 0x0278(0x0004)
	unsigned long                                      bBuildingBrushCollision : 1;                              // 0x0278(0x0004)
	unsigned long                                      bDebugDrawEdgeInfo : 1;                                   // 0x0278(0x0004)
	unsigned long                                      bDebugDrawScopes : 1;                                     // 0x0278(0x0004)
	TArray<class UStaticMeshComponent*>                LODMeshComps;                                             // 0x027C(0x000C)
	TArray<struct FPBFaceUVInfo>                       LODMeshUVInfos;                                           // 0x0288(0x000C) (ExportObject)
	TArray<struct FPBScope2D>                          TopLevelScopes;                                           // 0x0294(0x000C) (ExportObject)
	int                                                NumMeshedTopLevelScopes;                                  // 0x02A0(0x0004)
	TArray<struct FPBFaceUVInfo>                       TopLevelScopeUVInfos;                                     // 0x02A4(0x000C) (ExportObject)
	TArray<struct FPBScopeProcessInfo>                 TopLevelScopeInfos;                                       // 0x02B0(0x000C) (ExportObject)
	TArray<struct FPBEdgeInfo>                         EdgeInfos;                                                // 0x02BC(0x000C) (ExportObject)
	float                                              MaxFacadeZ;                                               // 0x02C8(0x0004)
	float                                              MinFacadeZ;                                               // 0x02CC(0x0004)
	TArray<class AProcBuilding*>                       OverlappingBuildings;                                     // 0x02D0(0x000C)
	float                                              SimpleMeshMassiveLODDistance;                             // 0x02DC(0x0004)
	float                                              RenderToTexturePullBackAmount;                            // 0x02E0(0x0004)
	int                                                RoofLightmapRes;                                          // 0x02E4(0x0004)
	int                                                NonRectWallLightmapRes;                                   // 0x02E8(0x0004)
	float                                              LODRenderToTextureScale;                                  // 0x02EC(0x0004) (ExportObject)
	TArray<struct FPBMaterialParam>                    BuildingMaterialParams;                                   // 0x02F0(0x000C)
	TArray<class UMaterialInstanceConstant*>           BuildingMatParamMICs;                                     // 0x02FC(0x000C) (ExportObject)
	class AStaticMeshActor*                            LowLODPersistentActor;                                    // 0x0308(0x0004) (Native)
	class UStaticMeshComponent*                        CurrentSimpleMeshComp;                                    // 0x030C(0x0004)
	class AActor*                                      CurrentSimpleMeshActor;                                   // 0x0310(0x0004)
	TArray<class AProcBuilding*>                       AttachedBuildings;                                        // 0x0314(0x000C) (ExportObject)
	int                                                BuildingInstanceVersion;                                  // 0x0320(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProcBuilding");
		return ptr;
	}


	void FindEdgeForTopLevelScope();
	void BreakFractureComponent();
	void GetAllGroupedProcBuildings();
	void GetBaseMostBuilding();
	void FindComponentsForTopLevelScope();
	void ClearBuildingMeshes();
};


// Class Engine.PBRuleNodeBase
// 0x002C (0x0068 - 0x003C)
class UPBRuleNodeBase : public UObject
{
public:
	TArray<struct FPBRuleLink>                         NextRules;                                                // 0x003C(0x000C)
	struct FString                                     Comment;                                                  // 0x0048(0x000C) (ExportObject)
	int                                                RulePosX;                                                 // 0x0054(0x0004) (ExportObject)
	int                                                RulePosY;                                                 // 0x0058(0x0004) (ExportObject)
	int                                                InDrawY;                                                  // 0x005C(0x0004) (ExportObject)
	int                                                DrawWidth;                                                // 0x0060(0x0004) (ExportObject)
	int                                                DrawHeight;                                               // 0x0064(0x0004) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeBase");
		return ptr;
	}

};


// Class Engine.PBRuleNodeAlternate
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeAlternate : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     RepeatAxis;                                               // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              ASize;                                                    // 0x006C(0x0004)
	float                                              BMaxSize;                                                 // 0x0070(0x0004)
	unsigned long                                      bInvertPatternOrder : 1;                                  // 0x0074(0x0004)
	unsigned long                                      bEqualSizeAB : 1;                                         // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeAlternate");
		return ptr;
	}

};


// Class Engine.PBRuleNodeComment
// 0x0018 (0x0080 - 0x0068)
class UPBRuleNodeComment : public UPBRuleNodeBase
{
public:
	int                                                SizeX;                                                    // 0x0068(0x0004)
	int                                                SizeY;                                                    // 0x006C(0x0004)
	int                                                BorderWidth;                                              // 0x0070(0x0004)
	struct FColor                                      BorderColor;                                              // 0x0074(0x0004)
	unsigned long                                      bFilled : 1;                                              // 0x0078(0x0004)
	struct FColor                                      FillColor;                                                // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeComment");
		return ptr;
	}

};


// Class Engine.PBRuleNodeCorner
// 0x0028 (0x0090 - 0x0068)
class UPBRuleNodeCorner : public UPBRuleNodeBase
{
public:
	float                                              CornerSize;                                               // 0x0068(0x0004)
	TArray<struct FRBCornerAngleInfo>                  Angles;                                                   // 0x006C(0x000C)
	float                                              FlatThreshold;                                            // 0x0078(0x0004)
	unsigned long                                      bNoMeshForConcaveCorners : 1;                             // 0x007C(0x0004)
	unsigned long                                      bUseAdjacentRulesetForRightGap : 1;                       // 0x007C(0x0004)
	TEnumAsByte<EPBCornerType>                         CornerType;                                               // 0x0080(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              CornerShapeOffset;                                        // 0x0084(0x0004)
	int                                                RoundTesselation;                                         // 0x0088(0x0004)
	float                                              RoundCurvature;                                           // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeCorner");
		return ptr;
	}

};


// Class Engine.PBRuleNodeEdgeAngle
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeEdgeAngle : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingEdge>                     Edge;                                                     // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	TArray<struct FRBEdgeAngleInfo>                    Angles;                                                   // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeEdgeAngle");
		return ptr;
	}

};


// Class Engine.PBRuleNodeEdgeMesh
// 0x0008 (0x0070 - 0x0068)
class UPBRuleNodeEdgeMesh : public UPBRuleNodeBase
{
public:
	float                                              FlatThreshold;                                            // 0x0068(0x0004)
	float                                              MainXPullIn;                                              // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeEdgeMesh");
		return ptr;
	}

};


// Class Engine.PBRuleNodeExtractTopBottom
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeExtractTopBottom : public UPBRuleNodeBase
{
public:
	float                                              ExtractTopZ;                                              // 0x0068(0x0004)
	float                                              ExtractNotTopZ;                                           // 0x006C(0x0004)
	float                                              ExtractBottomZ;                                           // 0x0070(0x0004)
	float                                              ExtractNotBottomZ;                                        // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeExtractTopBottom");
		return ptr;
	}

};


// Class Engine.PBRuleNodeLODQuad
// 0x0004 (0x006C - 0x0068)
class UPBRuleNodeLODQuad : public UPBRuleNodeBase
{
public:
	float                                              MassiveLODDistanceScale;                                  // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeLODQuad");
		return ptr;
	}

};


// Class Engine.PBRuleNodeMesh
// 0x0048 (0x00B0 - 0x0068)
class UPBRuleNodeMesh : public UPBRuleNodeBase
{
public:
	TArray<struct FBuildingMeshInfo>                   BuildingMeshes;                                           // 0x0068(0x000C)
	struct FBuildingMeshInfo                           PartialOccludedBuildingMesh;                              // 0x0074(0x0038)
	unsigned long                                      bDoOcclusionTest : 1;                                     // 0x00AC(0x0004)
	unsigned long                                      bBlockAll : 1;                                            // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeMesh");
		return ptr;
	}


	void PickRandomBuildingMesh();
};


// Class Engine.PBRuleNodeOcclusion
// 0x0000 (0x0068 - 0x0068)
class UPBRuleNodeOcclusion : public UPBRuleNodeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeOcclusion");
		return ptr;
	}

};


// Class Engine.PBRuleNodeQuad
// 0x0018 (0x0080 - 0x0068)
class UPBRuleNodeQuad : public UPBRuleNodeBase
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0068(0x0004)
	float                                              RepeatMaxSizeX;                                           // 0x006C(0x0004)
	float                                              RepeatMaxSizeZ;                                           // 0x0070(0x0004)
	int                                                QuadLightmapRes;                                          // 0x0074(0x0004)
	float                                              YOffset;                                                  // 0x0078(0x0004)
	unsigned long                                      bDisableMaterialRepeat : 1;                               // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeQuad");
		return ptr;
	}

};


// Class Engine.PBRuleNodeRandom
// 0x000C (0x0074 - 0x0068)
class UPBRuleNodeRandom : public UPBRuleNodeBase
{
public:
	int                                                NumOutputs;                                               // 0x0068(0x0004)
	int                                                MinNumExecuted;                                           // 0x006C(0x0004)
	int                                                MaxNumExecuted;                                           // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeRandom");
		return ptr;
	}

};


// Class Engine.PBRuleNodeRepeat
// 0x0008 (0x0070 - 0x0068)
class UPBRuleNodeRepeat : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     RepeatAxis;                                               // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              RepeatMaxSize;                                            // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeRepeat");
		return ptr;
	}

};


// Class Engine.PBRuleNodeSize
// 0x000C (0x0074 - 0x0068)
class UPBRuleNodeSize : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     SizeAxis;                                                 // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              DecisionSize;                                             // 0x006C(0x0004)
	unsigned long                                      bUseTopLevelScopeSize : 1;                                // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeSize");
		return ptr;
	}

};


// Class Engine.PBRuleNodeSplit
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeSplit : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     SplitAxis;                                                // 0x0068(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	TArray<struct FRBSplitInfo>                        SplitSetup;                                               // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeSplit");
		return ptr;
	}

};


// Class Engine.PBRuleNodeSubRuleset
// 0x0004 (0x006C - 0x0068)
class UPBRuleNodeSubRuleset : public UPBRuleNodeBase
{
public:
	class UProcBuildingRuleset*                        SubRuleset;                                               // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeSubRuleset");
		return ptr;
	}

};


// Class Engine.PBRuleNodeVariation
// 0x0004 (0x006C - 0x0068)
class UPBRuleNodeVariation : public UPBRuleNodeBase
{
public:
	unsigned long                                      bVariationOfScopeOnLeft : 1;                              // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeVariation");
		return ptr;
	}

};


// Class Engine.PBRuleNodeWindowWall
// 0x0024 (0x008C - 0x0068)
class UPBRuleNodeWindowWall : public UPBRuleNodeBase
{
public:
	float                                              CellMaxSizeX;                                             // 0x0068(0x0004)
	float                                              CellMaxSizeZ;                                             // 0x006C(0x0004)
	float                                              WindowSizeX;                                              // 0x0070(0x0004)
	float                                              WindowSizeZ;                                              // 0x0074(0x0004)
	float                                              WindowPosX;                                               // 0x0078(0x0004)
	float                                              WindowPosZ;                                               // 0x007C(0x0004)
	unsigned long                                      bScaleWindowWithCell : 1;                                 // 0x0080(0x0004)
	float                                              YOffset;                                                  // 0x0084(0x0004)
	class UMaterialInterface*                          Material;                                                 // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeWindowWall");
		return ptr;
	}

};


// Class Engine.ProcBuildingRuleset
// 0x0054 (0x0090 - 0x003C)
class UProcBuildingRuleset : public UObject
{
public:
	class UPBRuleNodeBase*                             RootRule;                                                 // 0x003C(0x0004)
	unsigned long                                      bBeingEdited : 1;                                         // 0x0040(0x0004) (ExportObject)
	unsigned long                                      bEnableInteriorTexture : 1;                               // 0x0040(0x0004)
	unsigned long                                      bLODOnlyRoof : 1;                                         // 0x0040(0x0004)
	class UMaterialInterface*                          DefaultRoofMaterial;                                      // 0x0044(0x0004)
	class UMaterialInterface*                          DefaultFloorMaterial;                                     // 0x0048(0x0004)
	class UMaterialInterface*                          DefaultNonRectWallMaterial;                               // 0x004C(0x0004)
	float                                              RoofZOffset;                                              // 0x0050(0x0004)
	float                                              NotRoofZOffset;                                           // 0x0054(0x0004)
	float                                              FloorZOffset;                                             // 0x0058(0x0004)
	float                                              NotFloorZOffset;                                          // 0x005C(0x0004)
	float                                              RoofPolyInset;                                            // 0x0060(0x0004)
	float                                              FloorPolyInset;                                           // 0x0064(0x0004)
	float                                              BuildingLODSpecular;                                      // 0x0068(0x0004)
	float                                              RoofEdgeScopeRaise;                                       // 0x006C(0x0004)
	class UTexture*                                    LODCubemap;                                               // 0x0070(0x0004)
	class UTexture*                                    InteriorTexture;                                          // 0x0074(0x0004)
	TArray<struct FPBVariationInfo>                    Variations;                                               // 0x0078(0x000C)
	TArray<class UPBRuleNodeComment*>                  Comments;                                                 // 0x0084(0x000C) (ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProcBuildingRuleset");
		return ptr;
	}

};


// Class Engine.ReplicationInfo
// 0x0000 (0x021C - 0x021C)
class AReplicationInfo : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReplicationInfo");
		return ptr;
	}

};


// Class Engine.GameReplicationInfo
// 0x0060 (0x027C - 0x021C)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                                // 0x021C(0x0004) (Edit)
	class UCurrentGameDataStore*                       CurrentGameData;                                          // 0x0220(0x0004)
	unsigned long                                      bStopCountDown : 1;                                       // 0x0224(0x0004)
	unsigned long                                      bMatchHasBegun : 1;                                       // 0x0224(0x0004) (Edit)
	unsigned long                                      bMatchIsOver : 1;                                         // 0x0224(0x0004) (Edit)
	int                                                RemainingTime;                                            // 0x0228(0x0004)
	int                                                ElapsedTime;                                              // 0x022C(0x0004)
	int                                                RemainingMinute;                                          // 0x0230(0x0004)
	int                                                GoalScore;                                                // 0x0234(0x0004)
	int                                                TimeLimit;                                                // 0x0238(0x0004)
	TArray<class ATeamInfo*>                           Teams;                                                    // 0x023C(0x000C)
	struct FString                                     ServerName;                                               // 0x0248(0x000C)
	struct FString                                     MessageOfTheDay;                                          // 0x0254(0x000C)
	class AActor*                                      Winner;                                                   // 0x0260(0x0004)
	TArray<class APlayerReplicationInfo*>              PRIArray;                                                 // 0x0264(0x000C)
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                         // 0x0270(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameReplicationInfo");
		return ptr;
	}


	void ShouldShowGore();
	void IsCoopMultiplayerGame();
	void IsMultiplayerGame();
	void EndGame();
	void StartMatch();
	void CleanupGameDataStore();
	void InitializeGameDataStore();
	void ReplicatedDataBinding();
	void SortPRIArray();
	void InOrder();
	void GetPRIArray();
	void SetTeam();
	void RemovePRI();
	void AddPRI();
	void FindPlayerByID();
	void OnSameTeam();
	void Timer();
	void Destroyed();
	void Reset();
	void ReceivedGameClass();
	void ReplicatedEvent();
	void PostBeginPlay();
	void GetMaxPlayers();
	void IsAtLobbyLevel();
	void GetFinalWaveNumber();
	void GetWaveNumber();
	void IsInHardCoreMode();
	void GetGameDifficultyAsInt();
	void GetLevelFriendlyNameWithoutFormatting();
};


// Class Engine.PlayerReplicationInfo
// 0x00B8 (0x02D4 - 0x021C)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                                    // 0x021C(0x0004) (Edit)
	int                                                Deaths;                                                   // 0x0220(0x0004)
	unsigned char                                      Ping;                                                     // 0x0224(0x0001)
	TEnumAsByte<ETTSSpeaker>                           TTSSpeaker;                                               // 0x0225(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0226(0x0002) MISSED OFFSET
	class AActor*                                      PlayerLocationHint;                                       // 0x0228(0x0004)
	int                                                NumLives;                                                 // 0x022C(0x0004)
	struct FString                                     PlayerName;                                               // 0x0230(0x000C) (Edit)
	struct FString                                     OldName;                                                  // 0x023C(0x000C)
	int                                                PlayerID;                                                 // 0x0248(0x0004)
	class ATeamInfo*                                   Team;                                                     // 0x024C(0x0004) (Edit)
	int                                                SplitscreenIndex;                                         // 0x0250(0x0004)
	unsigned long                                      bAdmin : 1;                                               // 0x0254(0x0004)
	unsigned long                                      bIsFemale : 1;                                            // 0x0254(0x0004)
	unsigned long                                      bIsSpectator : 1;                                         // 0x0254(0x0004)
	unsigned long                                      bOnlySpectator : 1;                                       // 0x0254(0x0004)
	unsigned long                                      bWaitingPlayer : 1;                                       // 0x0254(0x0004)
	unsigned long                                      bReadyToPlay : 1;                                         // 0x0254(0x0004)
	unsigned long                                      bOutOfLives : 1;                                          // 0x0254(0x0004)
	unsigned long                                      bBot : 1;                                                 // 0x0254(0x0004)
	unsigned long                                      bHasFlag : 1;                                             // 0x0254(0x0004)
	unsigned long                                      bHasBeenWelcomed : 1;                                     // 0x0254(0x0004)
	unsigned long                                      bIsInactive : 1;                                          // 0x0254(0x0004) (Edit)
	unsigned long                                      bFromPreviousLevel : 1;                                   // 0x0254(0x0004)
	int                                                StartTime;                                                // 0x0258(0x0004)
	struct FString                                     StringSpectating;                                         // 0x025C(0x000C)
	struct FString                                     StringUnknown;                                            // 0x0268(0x000C)
	int                                                Kills;                                                    // 0x0274(0x0004)
	class UClass*                                      GameMessageClass;                                         // 0x0278(0x0004)
	float                                              ExactPing;                                                // 0x027C(0x0004)
	struct FString                                     SavedNetworkAddress;                                      // 0x0280(0x000C)
	struct FUniqueNetId                                UniqueId;                                                 // 0x028C(0x0008) (Edit)
	struct FName                                       SessionName;                                              // 0x0294(0x0008)
	struct FAutomatedTestingDatum                      AutomatedTestingData;                                     // 0x029C(0x0008)
	int                                                StatConnectionCounts;                                     // 0x02A4(0x0004)
	int                                                StatPingTotals;                                           // 0x02A8(0x0004)
	int                                                StatPingMin;                                              // 0x02AC(0x0004)
	int                                                StatPingMax;                                              // 0x02B0(0x0004)
	int                                                StatPKLTotal;                                             // 0x02B4(0x0004)
	int                                                StatPKLMin;                                               // 0x02B8(0x0004)
	int                                                StatPKLMax;                                               // 0x02BC(0x0004)
	int                                                StatMaxInBPS;                                             // 0x02C0(0x0004)
	int                                                StatAvgInBPS;                                             // 0x02C4(0x0004)
	int                                                StatMaxOutBPS;                                            // 0x02C8(0x0004)
	int                                                StatAvgOutBPS;                                            // 0x02CC(0x0004)
	class UTexture2D*                                  Avatar;                                                   // 0x02D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerReplicationInfo");
		return ptr;
	}


	void UnregisterPlayerFromSession();
	void RegisterPlayerWithSession();
	void IsInvalidName();
	void GetTeamNum();
	void SetUniqueId();
	void ServerSetSplitscreenIndex();
	void SetSplitscreenIndex();
	void IsLocalPlayerPRI();
	void BindPlayerOwnerDataProvider();
	void NotifyLocalPlayerTeamReceived();
	void UpdateTeamDataProvider();
	void UpdatePlayerDataProvider();
	void GetCurrentGameDS();
	void SeamlessTravelTo();
	void IncrementDeaths();
	void CopyProperties();
	void OverrideWith();
	void Duplicate();
	void SetWaitingPlayer();
	void SetPlayerName();
	void Timer();
	void DisplayDebug();
	void UpdatePlayerLocation();
	void GetLocationName();
	void GetHumanReadableName();
	void Reset();
	void Destroyed();
	void ShouldBroadCastWelcomeMessage();
	void UpdatePing();
	void ReplicatedDataBinding();
	void ReplicatedEvent();
	void SetPlayerTeam();
	void ClientInitialize();
	void PostBeginPlay();
	void GetPlayerAlias();
};


// Class Engine.TeamInfo
// 0x001C (0x0238 - 0x021C)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                                 // 0x021C(0x000C)
	int                                                Size;                                                     // 0x0228(0x0004)
	float                                              Score;                                                    // 0x022C(0x0004)
	int                                                TeamIndex;                                                // 0x0230(0x0004) (Edit)
	struct FColor                                      TeamColor;                                                // 0x0234(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeamInfo");
		return ptr;
	}


	void GetTeamNum();
	void GetTextColor();
	void GetHUDColor();
	void GetHumanReadableName();
	void RemoveFromTeam();
	void AddToTeam();
	void Destroyed();
	void UnbindTeamDataProvider();
	void GetCurrentGameDS();
	void ReplicatedEvent();
};


// Class Engine.CameraActor
// 0x00B8 (0x02D4 - 0x021C)
class ACameraActor : public AActor
{
public:
	unsigned long                                      bConstrainAspectRatio : 1;                                // 0x021C(0x0004)
	unsigned long                                      bCamOverridePostProcess : 1;                              // 0x021C(0x0004)
	float                                              AspectRatio;                                              // 0x0220(0x0004) (Const)
	float                                              FOVAngle;                                                 // 0x0224(0x0004) (Const)
	float                                              CamOverridePostProcessAlpha;                              // 0x0228(0x0004) (Const)
	struct FPostProcessSettings                        CamOverridePostProcess;                                   // 0x022C(0x00A0) (Const)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x02CC(0x0004)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x02D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}


	void DisplayDebug();
	void GetCameraView();
};


// Class Engine.DynamicCameraActor
// 0x0000 (0x02D4 - 0x02D4)
class ADynamicCameraActor : public ACameraActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicCameraActor");
		return ptr;
	}

};


// Class Engine.CameraAnim
// 0x00CC (0x0108 - 0x003C)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                        // 0x003C(0x0004)
	float                                              AnimLength;                                               // 0x0040(0x0004)
	struct FBox                                        BoundingBox;                                              // 0x0044(0x001C)
	struct FPostProcessSettings                        BasePPSettings;                                           // 0x0060(0x00A0)
	float                                              BasePPSettingsAlpha;                                      // 0x0100(0x0004)
	float                                              BaseFOV;                                                  // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x0128 (0x0164 - 0x003C)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                  // 0x003C(0x0004)
	class UInterpGroupInst*                            InterpGroupInst;                                          // 0x0040(0x0004)
	float                                              CurTime;                                                  // 0x0044(0x0004)
	unsigned long                                      bLooping : 1;                                             // 0x0048(0x0004)
	unsigned long                                      bFinished : 1;                                            // 0x0048(0x0004)
	unsigned long                                      bAutoReleaseWhenFinished : 1;                             // 0x0048(0x0004)
	unsigned long                                      bBlendingIn : 1;                                          // 0x0048(0x0004)
	unsigned long                                      bBlendingOut : 1;                                         // 0x0048(0x0004)
	float                                              BlendInTime;                                              // 0x004C(0x0004)
	float                                              BlendOutTime;                                             // 0x0050(0x0004)
	float                                              CurBlendInTime;                                           // 0x0054(0x0004)
	float                                              CurBlendOutTime;                                          // 0x0058(0x0004)
	float                                              PlayRate;                                                 // 0x005C(0x0004)
	float                                              BasePlayScale;                                            // 0x0060(0x0004)
	float                                              TransientScaleModifier;                                   // 0x0064(0x0004)
	float                                              CurrentBlendWeight;                                       // 0x0068(0x0004)
	float                                              RemainingTime;                                            // 0x006C(0x0004)
	class UInterpTrackMove*                            MoveTrack;                                                // 0x0070(0x0004)
	class UInterpTrackInstMove*                        MoveInst;                                                 // 0x0074(0x0004)
	class UAnimNodeSequence*                           SourceAnimNode;                                           // 0x0078(0x0004)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x007C(0x0001) (Parm)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	struct FMatrix                                     UserPlaySpaceMatrix;                                      // 0x0080(0x0040)
	struct FPostProcessSettings                        LastPPSettings;                                           // 0x00C0(0x00A0)
	float                                              LastPPSettingsAlpha;                                      // 0x0160(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}


	void SetPlaySpace();
	void ApplyTransientScaling();
	void Stop();
	void AdvanceAnim();
	void Update();
	void Play();
};


// Class Engine.CameraModifier
// 0x001C (0x0058 - 0x003C)
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                            // 0x003C(0x0004)
	unsigned long                                      bPendingDisable : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bExclusive : 1;                                           // 0x003C(0x0004)
	unsigned long                                      bDebug : 1;                                               // 0x003C(0x0004)
	class ACamera*                                     CameraOwner;                                              // 0x0040(0x0004)
	unsigned char                                      Priority;                                                 // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              AlphaInTime;                                              // 0x0048(0x0004)
	float                                              AlphaOutTime;                                             // 0x004C(0x0004)
	float                                              Alpha;                                                    // 0x0050(0x0004)
	float                                              TargetAlpha;                                              // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}


	void UpdateAlpha();
	void ProcessViewRotation();
	void ToggleModifier();
	void EnableModifier();
	void DisableModifier();
	void RemoveCameraModifier();
	void AddCameraModifier();
	void IsDisabled();
	void ModifyCamera();
	void Init();
};


// Class Engine.CameraShake
// 0x007C (0x00B8 - 0x003C)
class UCameraShake : public UObject
{
public:
	unsigned long                                      bSingleInstance : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bRandomAnimSegment : 1;                                   // 0x003C(0x0004)
	float                                              OscillationDuration;                                      // 0x0040(0x0004)
	float                                              OscillationBlendInTime;                                   // 0x0044(0x0004)
	float                                              OscillationBlendOutTime;                                  // 0x0048(0x0004)
	struct FROscillator                                RotOscillation;                                           // 0x004C(0x0024)
	struct FVOscillator                                LocOscillation;                                           // 0x0070(0x0024)
	struct FFOscillator                                FOVOscillation;                                           // 0x0094(0x000C)
	class UCameraAnim*                                 Anim;                                                     // 0x00A0(0x0004)
	float                                              AnimPlayRate;                                             // 0x00A4(0x0004)
	float                                              AnimScale;                                                // 0x00A8(0x0004)
	float                                              AnimBlendInTime;                                          // 0x00AC(0x0004)
	float                                              AnimBlendOutTime;                                         // 0x00B0(0x0004)
	float                                              RandomAnimSegmentDuration;                                // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraShake");
		return ptr;
	}


	void GetLocOscillationMagnitude();
	void GetRotOscillationMagnitude();
};


// Class Engine.CameraModifier_CameraShake
// 0x0010 (0x0068 - 0x0058)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FCameraShakeInstance>                ActiveShakes;                                             // 0x0058(0x000C)
	float                                              SplitScreenShakeScale;                                    // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		return ptr;
	}


	void ModifyCamera();
	void UpdateCameraShake();
	void RemoveAllCameraShakes();
	void RemoveCameraShake();
	void AddCameraShake();
	void InitializeShake();
	void ReinitShake();
	void STATIC_InitializeOffset();
};


// Class Engine.SeqEvent_HitWall
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_HitWall : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_HitWall");
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0014 (0x0050 - 0x003C)
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                           // 0x003C(0x0004)
	unsigned long                                      bIsUnique : 1;                                            // 0x003C(0x0004)
	unsigned long                                      bIsPartiallyUnique : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bIsConsoleMessage : 1;                                    // 0x003C(0x0004)
	unsigned long                                      bBeep : 1;                                                // 0x003C(0x0004)
	unsigned long                                      bCountInstances : 1;                                      // 0x003C(0x0004)
	float                                              Lifetime;                                                 // 0x0040(0x0004)
	struct FColor                                      DrawColor;                                                // 0x0044(0x0004)
	float                                              PosY;                                                     // 0x0048(0x0004)
	int                                                FontSize;                                                 // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}


	void STATIC_PartiallyDuplicates();
	void STATIC_IsKeyObjectiveMessage();
	void STATIC_IsConsoleMessage();
	void STATIC_GetLifeTime();
	void STATIC_GetFontSize();
	void STATIC_GetPos();
	void STATIC_GetColor();
	void STATIC_GetConsoleColor();
	void STATIC_GetString();
	void STATIC_ClientReceive();
};


// Class Engine.SeqAct_Destroy
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_Destroy : public USequenceAction
{
public:
	unsigned long                                      bDestroyBasedActors : 1;                                  // 0x00E8(0x0004)
	TArray<class UClass*>                              IgnoreBasedClasses;                                       // 0x00EC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Destroy");
		return ptr;
	}

};


// Class Engine.SeqAct_Teleport
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                                      // 0x00E8(0x0004)
	unsigned long                                      bUnbaseAttachments : 1;                                   // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Teleport");
		return ptr;
	}

};


// Class Engine.SeqAct_SetVelocity
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_SetVelocity : public USequenceAction
{
public:
	struct FVector                                     VelocityDir;                                              // 0x00E8(0x000C)
	float                                              VelocityMag;                                              // 0x00F4(0x0004)
	unsigned long                                      bVelocityRelativeToActorRotation : 1;                     // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetVelocity");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ToggleHidden
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleBasedActors : 1;                                   // 0x00E8(0x0004)
	TArray<class UClass*>                              IgnoreBasedClasses;                                       // 0x00EC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleHidden");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x010C - 0x00E8)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                              // 0x00E8(0x0004)
	unsigned long                                      bHardAttach : 1;                                          // 0x00E8(0x0004)
	unsigned long                                      bUseRelativeOffset : 1;                                   // 0x00E8(0x0004)
	unsigned long                                      bUseRelativeRotation : 1;                                 // 0x00E8(0x0004)
	struct FName                                       BoneName;                                                 // 0x00EC(0x0008)
	struct FVector                                     RelativeOffset;                                           // 0x00F4(0x000C)
	struct FRotator                                    RelativeRotation;                                         // 0x0100(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AttachToActor");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.OnlinePartyChatInterface
// 0x000C (0x0048 - 0x003C)
class UOnlinePartyChatInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnSendPartyGameInvitesComplete__Delegate;               // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePartyChatInterface");
		return ptr;
	}


	void ShowCommunitySessionsUI();
	void ShowVoiceChannelUI();
	void ShowPartyUI();
	void GetPartyBandwidth();
	void SetPartyMemberCustomData();
	void GetPartyMemberInformation();
	void ClearSendPartyGameInvitesCompleteDelegate();
	void AddSendPartyGameInvitesCompleteDelegate();
	void OnSendPartyGameInvitesComplete();
	void SendPartyGameInvites();
};


// Class Engine.OnlineNewsInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineNewsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadNewsCompleted__Delegate;                          // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineNewsInterface");
		return ptr;
	}


	void GetNews();
	void ClearReadNewsCompletedDelegate();
	void AddReadNewsCompletedDelegate();
	void OnReadNewsCompleted();
	void ReadNews();
};


// Class Engine.OnlineStatsInterface
// 0x0024 (0x0060 - 0x003C)
class UOnlineStatsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadOnlineStatsComplete__Delegate;                    // 0x003C(0x000C)
	struct FScriptDelegate                             __OnFlushOnlineStatsComplete__Delegate;                   // 0x0048(0x000C)
	struct FScriptDelegate                             __OnRegisterHostStatGuidComplete__Delegate;               // 0x0054(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsInterface");
		return ptr;
	}


	void RegisterStatGuid();
	void GetClientStatGuid();
	void ClearRegisterHostStatGuidCompleteDelegateDelegate();
	void AddRegisterHostStatGuidCompleteDelegate();
	void OnRegisterHostStatGuidComplete();
	void RegisterHostStatGuid();
	void GetHostStatGuid();
	void WriteOnlinePlayerScores();
	void ClearAllFlushOnlineStatsCompleteDelegates();
	void ClearFlushOnlineStatsCompleteDelegate();
	void AddFlushOnlineStatsCompleteDelegate();
	void OnFlushOnlineStatsComplete();
	void FlushOnlineStats();
	void WriteOnlineStats();
	void FreeStats();
	void ClearReadOnlineStatsCompleteDelegate();
	void AddReadOnlineStatsCompleteDelegate();
	void OnReadOnlineStatsComplete();
	void ReadOnlineStatsByRankAroundPlayer();
	void ReadOnlineStatsByRank();
	void ReadOnlineStatsForFriends();
	void ReadOnlineStats();
};


// Class Engine.OnlineVoiceInterface
// 0x0030 (0x006C - 0x003C)
class UOnlineVoiceInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnPlayerBeginTalking__Delegate;                         // 0x003C(0x000C)
	struct FScriptDelegate                             __OnPlayerStopTalking__Delegate;                          // 0x0048(0x000C)
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                        // 0x0054(0x000C)
	struct FScriptDelegate                             __OnDeviceFound__Delegate;                                // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineVoiceInterface");
		return ptr;
	}


	void ClearDeviceFoundDelegate();
	void AddDeviceFoundDelegate();
	void OnDeviceFound();
	void HasBeenRegistered();
	void SetCaptureVolume();
	void SetPlaybackVolume();
	void UnmuteAll();
	void MuteAll();
	void SetSpeechRecognitionObject();
	void SelectVocabulary();
	void ClearRecognitionCompleteDelegate();
	void AddRecognitionCompleteDelegate();
	void OnRecognitionComplete();
	void GetRecognitionResults();
	void StopSpeechRecognition();
	void StartSpeechRecognition();
	void StopNetworkedVoice();
	void StartNetworkedVoice();
	void ClearPlayerTalkingDelegates();
	void ClearPlayerStoppedTalkingDelegate();
	void AddPlayerStoppedTalkingDelegate();
	void ClearPlayerStartedTalkingDelegate();
	void AddPlayerStartedTalkingDelegate();
	void OnPlayerStopTalking();
	void OnPlayerBeginTalking();
	void UnmuteRemoteTalker();
	void MuteRemoteTalker();
	void SetRemoteTalkerPriority();
	void IsHeadsetPresent();
	void IsRemotePlayerTalking();
	void IsLocalPlayerTalking();
	void UnregisterRemoteTalker();
	void RegisterRemoteTalker();
	void UnregisterLocalTalker();
	void RegisterLocalTalker();
};


// Class Engine.OnlineContentInterface
// 0x0030 (0x006C - 0x003C)
class UOnlineContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnContentChange__Delegate;                              // 0x003C(0x000C)
	struct FScriptDelegate                             __OnReadContentComplete__Delegate;                        // 0x0048(0x000C)
	struct FScriptDelegate                             __OnQueryAvailableDownloadsComplete__Delegate;            // 0x0054(0x000C)
	struct FScriptDelegate                             __OnQuerySubscribedDownloadsComplete__Delegate;           // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineContentInterface");
		return ptr;
	}


	void ClearQuerySubscribedDownloadsComplete();
	void AddQuerySubscribedDownloadsComplete();
	void OnQuerySubscribedDownloadsComplete();
	void SubscribedDownloadsInformation();
	void QuerySubscribedDownloads();
	void GetAvailableDownloadCounts();
	void ClearQueryAvailableDownloadsComplete();
	void AddQueryAvailableDownloadsComplete();
	void OnQueryAvailableDownloadsComplete();
	void QueryAvailableDownloads();
	void GetContentList();
	void ReadContentList();
	void ClearReadContentComplete();
	void AddReadContentComplete();
	void OnReadContentComplete();
	void ClearContentChangeDelegate();
	void AddContentChangeDelegate();
	void OnContentChange();
};


// Class Engine.OnlineGameInterface
// 0x0090 (0x00CC - 0x003C)
class UOnlineGameInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineGameComplete__Delegate;                   // 0x003C(0x000C)
	struct FScriptDelegate                             __OnUpdateOnlineGameComplete__Delegate;                   // 0x0048(0x000C)
	struct FScriptDelegate                             __OnDestroyOnlineGameComplete__Delegate;                  // 0x0054(0x000C)
	struct FScriptDelegate                             __OnFindOnlineGamesComplete__Delegate;                    // 0x0060(0x000C)
	struct FScriptDelegate                             __OnCancelFindOnlineGamesComplete__Delegate;              // 0x006C(0x000C)
	struct FScriptDelegate                             __OnJoinOnlineGameComplete__Delegate;                     // 0x0078(0x000C)
	struct FScriptDelegate                             __OnRegisterPlayerComplete__Delegate;                     // 0x0084(0x000C)
	struct FScriptDelegate                             __OnUnregisterPlayerComplete__Delegate;                   // 0x0090(0x000C)
	struct FScriptDelegate                             __OnStartOnlineGameComplete__Delegate;                    // 0x009C(0x000C)
	struct FScriptDelegate                             __OnEndOnlineGameComplete__Delegate;                      // 0x00A8(0x000C)
	struct FScriptDelegate                             __OnArbitrationRegistrationComplete__Delegate;            // 0x00B4(0x000C)
	struct FScriptDelegate                             __OnGameInviteAccepted__Delegate;                         // 0x00C0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameInterface");
		return ptr;
	}


	void CancelPendingAsyncTasks();
	void RecalculateSkillRating();
	void AcceptGameInvite();
	void ClearGameInviteAcceptedDelegate();
	void AddGameInviteAcceptedDelegate();
	void OnGameInviteAccepted();
	void GetArbitratedPlayers();
	void ClearArbitrationRegistrationCompleteDelegate();
	void AddArbitrationRegistrationCompleteDelegate();
	void OnArbitrationRegistrationComplete();
	void RegisterForArbitration();
	void ClearEndOnlineGameCompleteDelegate();
	void AddEndOnlineGameCompleteDelegate();
	void OnEndOnlineGameComplete();
	void EndOnlineGame();
	void ClearStartOnlineGameCompleteDelegate();
	void AddStartOnlineGameCompleteDelegate();
	void OnStartOnlineGameComplete();
	void StartOnlineGame();
	void ClearUnregisterPlayerCompleteDelegate();
	void AddUnregisterPlayerCompleteDelegate();
	void OnUnregisterPlayerComplete();
	void UnregisterPlayer();
	void ClearRegisterPlayerCompleteDelegate();
	void AddRegisterPlayerCompleteDelegate();
	void OnRegisterPlayerComplete();
	void RegisterPlayer();
	void GetResolvedConnectString();
	void ClearJoinOnlineGameCompleteDelegate();
	void AddJoinOnlineGameCompleteDelegate();
	void OnJoinOnlineGameComplete();
	void JoinOnlineGame();
	void QueryNonAdvertisedData();
	void FreeSearchResults();
	void GetGameSearch();
	void BindPlatformSpecificSessionToSearch();
	void ReadPlatformSpecificSessionInfoBySessionName();
	void ReadPlatformSpecificSessionInfo();
	void ClearCancelFindOnlineGamesCompleteDelegate();
	void AddCancelFindOnlineGamesCompleteDelegate();
	void OnCancelFindOnlineGamesComplete();
	void CancelFindOnlineGames();
	void ClearFindOnlineGamesCompleteDelegate();
	void AddFindOnlineGamesCompleteDelegate();
	void OnFindOnlineGamesComplete();
	void FindOnlineGames();
	void ClearDestroyOnlineGameCompleteDelegate();
	void AddDestroyOnlineGameCompleteDelegate();
	void OnDestroyOnlineGameComplete();
	void DestroyOnlineGame();
	void GetGameSettings();
	void ClearUpdateOnlineGameCompleteDelegate();
	void AddUpdateOnlineGameCompleteDelegate();
	void OnUpdateOnlineGameComplete();
	void UpdateOnlineGame();
	void ClearCreateOnlineGameCompleteDelegate();
	void AddCreateOnlineGameCompleteDelegate();
	void OnCreateOnlineGameComplete();
	void CreateOnlineGameFailureID();
	void CreateOnlineGame();
};


// Class Engine.OnlineSystemInterface
// 0x0060 (0x009C - 0x003C)
class UOnlineSystemInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLinkStatusChange__Delegate;                           // 0x003C(0x000C)
	struct FScriptDelegate                             __OnExternalUIChange__Delegate;                           // 0x0048(0x000C)
	struct FScriptDelegate                             __OnControllerChange__Delegate;                           // 0x0054(0x000C)
	struct FScriptDelegate                             __OnConnectionStatusChange__Delegate;                     // 0x0060(0x000C)
	struct FScriptDelegate                             __OnStorageDeviceChange__Delegate;                        // 0x006C(0x000C)
	struct FScriptDelegate                             __OnDLCStorageDeviceRemoved__Delegate;                    // 0x0078(0x000C)
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;                      // 0x0084(0x000C)
	struct FScriptDelegate                             __OnStringVerificationComplete__Delegate;                 // 0x0090(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSystemInterface");
		return ptr;
	}


	void VerifyStrings();
	void ClearStringVerificationDelegate();
	void AddStringVerificationDelegate();
	void OnStringVerificationComplete();
	void GetTitleFileState();
	void GetTitleFileContents();
	void ClearReadTitleFileCompleteDelegate();
	void AddReadTitleFileCompleteDelegate();
	void ReadTitleFile();
	void OnReadTitleFileComplete();
	void ClearDLCStorageDeviceRemovedDelegate();
	void AddDLCStorageDeviceRemovedDelegate();
	void OnDLCStorageDeviceRemoved();
	void ClearStorageDeviceChangeDelegate();
	void AddStorageDeviceChangeDelegate();
	void OnStorageDeviceChange();
	void GetNATType();
	void ClearConnectionStatusChangeDelegate();
	void AddConnectionStatusChangeDelegate();
	void OnConnectionStatusChange();
	void IsControllerConnected();
	void ClearControllerChangeDelegate();
	void AddControllerChangeDelegate();
	void OnControllerChange();
	void SetNetworkNotificationPosition();
	void GetNetworkNotificationPosition();
	void ClearExternalUIChangeDelegate();
	void AddExternalUIChangeDelegate();
	void OnExternalUIChange();
	void ClearLinkStatusChangeDelegate();
	void AddLinkStatusChangeDelegate();
	void OnLinkStatusChange();
	void HasLinkConnection();
};


// Class Engine.OnlinePlayerInterfaceEx
// 0x0018 (0x0054 - 0x003C)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:
	struct FScriptDelegate                             __OnDeviceSelectionComplete__Delegate;                    // 0x003C(0x000C)
	struct FScriptDelegate                             __OnProfileDataChanged__Delegate;                         // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerInterfaceEx");
		return ptr;
	}


	void ShowCustomPlayersUI();
	void ShowPlayersUI();
	void ShowFriendsInviteUI();
	void ClearProfileDataChangedDelegate();
	void AddProfileDataChangedDelegate();
	void OnProfileDataChanged();
	void UnlockGamerPicture();
	void IsDeviceValid();
	void GetDeviceSelectionResults();
	void ClearDeviceSelectionDoneDelegate();
	void AddDeviceSelectionDoneDelegate();
	void OnDeviceSelectionComplete();
	void ShowDeviceSelectionUI();
	void ShowMembershipMarketplaceUI();
	void ShowContentMarketplaceUI();
	void ShowAchievementsUI();
	void ShowMessagesUI();
	void ShowFeedbackUI();
};


// Class Engine.OnlinePlayerInterface
// 0x0108 (0x0144 - 0x003C)
class UOnlinePlayerInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnLoginChange__Delegate;                                // 0x003C(0x000C)
	struct FScriptDelegate                             __OnLoginCancelled__Delegate;                             // 0x0048(0x000C)
	struct FScriptDelegate                             __OnMutingChange__Delegate;                               // 0x0054(0x000C)
	struct FScriptDelegate                             __OnFriendsChange__Delegate;                              // 0x0060(0x000C)
	struct FScriptDelegate                             __OnLoginFailed__Delegate;                                // 0x006C(0x000C)
	struct FScriptDelegate                             __OnLogoutCompleted__Delegate;                            // 0x0078(0x000C)
	struct FScriptDelegate                             __OnLoginStatusChange__Delegate;                          // 0x0084(0x000C)
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;                // 0x0090(0x000C)
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;               // 0x009C(0x000C)
	struct FScriptDelegate                             __OnReadPlayerStorageComplete__Delegate;                  // 0x00A8(0x000C)
	struct FScriptDelegate                             __OnReadPlayerStorageForNetIdComplete__Delegate;          // 0x00B4(0x000C)
	struct FScriptDelegate                             __OnWritePlayerStorageComplete__Delegate;                 // 0x00C0(0x000C)
	struct FScriptDelegate                             __OnReadFriendsComplete__Delegate;                        // 0x00CC(0x000C)
	struct FScriptDelegate                             __OnKeyboardInputComplete__Delegate;                      // 0x00D8(0x000C)
	struct FScriptDelegate                             __OnAddFriendByNameComplete__Delegate;                    // 0x00E4(0x000C)
	struct FScriptDelegate                             __OnFriendInviteReceived__Delegate;                       // 0x00F0(0x000C)
	struct FScriptDelegate                             __OnReceivedGameInvite__Delegate;                         // 0x00FC(0x000C)
	struct FScriptDelegate                             __OnJoinFriendGameComplete__Delegate;                     // 0x0108(0x000C)
	struct FScriptDelegate                             __OnFriendMessageReceived__Delegate;                      // 0x0114(0x000C)
	struct FScriptDelegate                             __OnUnlockAchievementComplete__Delegate;                  // 0x0120(0x000C)
	struct FScriptDelegate                             __OnReadAchievementsComplete__Delegate;                   // 0x012C(0x000C)
	struct FScriptDelegate                             __OnFindUniqueNetIdForPlayerComplete__Delegate;           // 0x0138(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerInterface");
		return ptr;
	}


	void CancelLogin();
	void ManageInvites();
	void FindUniqueNetIdForPlayer();
	void ClearFindUniqueNetIdForPlayerDelegate();
	void AddFindUniqueNetIdForPlayerDelegate();
	void OnFindUniqueNetIdForPlayerComplete();
	void ShowInviteUI();
	void AddToPlayersMetList();
	void ShowGamerCardUI();
	void GetAchievements();
	void ClearReadAchievementsCompleteDelegate();
	void AddReadAchievementsCompleteDelegate();
	void OnReadAchievementsComplete();
	void ReadAchievements();
	void ClearUnlockAchievementCompleteDelegate();
	void AddUnlockAchievementCompleteDelegate();
	void OnUnlockAchievementComplete();
	void UnlockAchievement();
	void DeleteMessage();
	void ClearFriendMessageReceivedDelegate();
	void AddFriendMessageReceivedDelegate();
	void OnFriendMessageReceived();
	void GetFriendMessages();
	void ClearJoinFriendGameCompleteDelegate();
	void AddJoinFriendGameCompleteDelegate();
	void OnJoinFriendGameComplete();
	void JoinFriendGame();
	void ClearReceivedGameInviteDelegate();
	void AddReceivedGameInviteDelegate();
	void OnReceivedGameInvite();
	void SendGameInviteToFriends();
	void SendGameInviteToFriend();
	void SendMessageToFriend();
	void ClearFriendInviteReceivedDelegate();
	void AddFriendInviteReceivedDelegate();
	void OnFriendInviteReceived();
	void RemoveFriend();
	void DenyFriendInvite();
	void AcceptFriendInvite();
	void ClearAddFriendByNameCompleteDelegate();
	void AddAddFriendByNameCompleteDelegate();
	void OnAddFriendByNameComplete();
	void AddFriendByName();
	void AddFriend();
	void GetKeyboardInputResults();
	void ClearKeyboardInputDoneDelegate();
	void AddKeyboardInputDoneDelegate();
	void OnKeyboardInputComplete();
	void ShowKeyboardUI();
	void SetOnlineStatus();
	void GetFriendsList();
	void ClearReadFriendsCompleteDelegate();
	void AddReadFriendsCompleteDelegate();
	void OnReadFriendsComplete();
	void ReadFriendsList();
	void ClearWritePlayerStorageCompleteDelegate();
	void AddWritePlayerStorageCompleteDelegate();
	void OnWritePlayerStorageComplete();
	void WritePlayerStorage();
	void GetPlayerStorage();
	void ClearReadPlayerStorageForNetIdCompleteDelegate();
	void AddReadPlayerStorageForNetIdCompleteDelegate();
	void OnReadPlayerStorageForNetIdComplete();
	void ReadPlayerStorageForNetId();
	void ClearReadPlayerStorageCompleteDelegate();
	void AddReadPlayerStorageCompleteDelegate();
	void OnReadPlayerStorageComplete();
	void ReadPlayerStorage();
	void ClearWriteProfileSettingsCompleteDelegate();
	void AddWriteProfileSettingsCompleteDelegate();
	void OnWriteProfileSettingsComplete();
	void WriteProfileSettings();
	void GetProfileSettings();
	void ClearReadProfileSettingsCompleteDelegate();
	void AddReadProfileSettingsCompleteDelegate();
	void OnReadProfileSettingsComplete();
	void ReadProfileSettings();
	void ClearFriendsChangeDelegate();
	void AddFriendsChangeDelegate();
	void ClearMutingChangeDelegate();
	void AddMutingChangeDelegate();
	void ClearLoginCancelledDelegate();
	void AddLoginCancelledDelegate();
	void ClearLoginStatusChangeDelegate();
	void AddLoginStatusChangeDelegate();
	void OnLoginStatusChange();
	void ClearLoginChangeDelegate();
	void AddLoginChangeDelegate();
	void ShowFriendsUI();
	void IsMuted();
	void AreAnyFriends();
	void IsFriend();
	void CanShowPresenceInformation();
	void CanViewPlayerProfiles();
	void CanPurchaseContent();
	void CanDownloadUserContent();
	void CanCommunicate();
	void CanPlayOnline();
	void IsLocalLogin();
	void IsGuestLogin();
	void GetPlayerNickname();
	void GetUniquePlayerId();
	void GetLoginStatus();
	void ClearLogoutCompletedDelegate();
	void AddLogoutCompletedDelegate();
	void OnLogoutCompleted();
	void Logout();
	void ClearLoginFailedDelegate();
	void AddLoginFailedDelegate();
	void OnLoginFailed();
	void AutoLogin();
	void Login();
	void ShowLoginUI();
	void OnFriendsChange();
	void OnMutingChange();
	void OnLoginCancelled();
	void OnLoginChange();
};


// Class Engine.OnlineAccountInterface
// 0x000C (0x0048 - 0x003C)
class UOnlineAccountInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineAccountCompleted__Delegate;               // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineAccountInterface");
		return ptr;
	}


	void GetLocalAccountNames();
	void DeleteLocalAccount();
	void RenameLocalAccount();
	void CreateLocalAccount();
	void ClearCreateOnlineAccountCompletedDelegate();
	void AddCreateOnlineAccountCompletedDelegate();
	void OnCreateOnlineAccountCompleted();
	void CreateOnlineAccount();
};


// Class Engine.AccessControl
// 0x00D4 (0x02F0 - 0x021C)
class AAccessControl : public AInfo
{
public:
	TArray<struct FString>                             IPPolicies;                                               // 0x021C(0x000C)
	TArray<struct FUniqueNetId>                        BannedIDs;                                                // 0x0228(0x000C)
	struct FString                                     IPBanned;                                                 // 0x0234(0x000C)
	struct FString                                     WrongPassword;                                            // 0x0240(0x000C)
	struct FString                                     NeedPassword;                                             // 0x024C(0x000C)
	struct FString                                     SessionBanned;                                            // 0x0258(0x000C)
	struct FString                                     KickedMsg;                                                // 0x0264(0x000C)
	struct FString                                     DefaultKickReason;                                        // 0x0270(0x000C)
	struct FString                                     IdleKickReason;                                           // 0x027C(0x000C)
	class UClass*                                      AdminClass;                                               // 0x0288(0x0004)
	struct FString                                     AdminPassword;                                            // 0x028C(0x000C)
	struct FString                                     GamePassword;                                             // 0x0298(0x000C)
	struct FString                                     ACDisplayText[0x3];                                       // 0x02A4(0x000C)
	struct FString                                     ACDescText[0x3];                                          // 0x02C8(0x000C)
	unsigned long                                      bDontAddDefaultAdmin : 1;                                 // 0x02EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AccessControl");
		return ptr;
	}


	void WipeKickedPlayers();
	void IsIDBanned();
	void CheckIPPolicy();
	void PreLogin();
	void ValidLogin();
	void ParseAdminOptions();
	void AdminExited();
	void AdminEntered();
	void AdminLogout();
	void AdminLogin();
	void KickPlayer();
	void ForceKickPlayer();
	void KickBan();
	void Kick();
	void GetControllerFromString();
	void RequiresPassword();
	void SetGamePassword();
	void SetAdminPassword();
	void IsAdmin();
};


// Class Engine.Admin
// 0x0000 (0x0610 - 0x0610)
class AAdmin : public APlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Admin");
		return ptr;
	}


	void ServerSwitch();
	void Switch();
	void ServerRestartMap();
	void RestartMap();
	void PlayerList();
	void ServerKick();
	void Kick();
	void ServerKickBan();
	void KickBan();
	void ServerAdmin();
	void Admin();
	void PostBeginPlay();
};


// Class Engine.EmitterSpawnable
// 0x0004 (0x022C - 0x0228)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                         // 0x0228(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterSpawnable");
		return ptr;
	}


	void ReplicatedEvent();
	void SetTemplate();
};


// Class Engine.KAssetSpawnable
// 0x0000 (0x022C - 0x022C)
class AKAssetSpawnable : public AKAsset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KAssetSpawnable");
		return ptr;
	}

};


// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x006C - 0x006C)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactorySkeletalMeshMAT");
		return ptr;
	}

};


// Class Engine.ActorLists
// 0x0000 (0x003C - 0x003C)
class UActorLists : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorLists");
		return ptr;
	}

};


// Class Engine.SeqEvent_Death
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_Death : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Death");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleGodMode");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_ToggleAffectedByHitEffects
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleAffectedByHitEffects");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_ControlMovieTexture
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                             // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ControlMovieTexture");
		return ptr;
	}


	void Activated();
};


// Class Engine.CoverReplicator
// 0x000C (0x0228 - 0x021C)
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray<struct FCoverReplicationInfo>               CoverReplicationData;                                     // 0x021C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverReplicator");
		return ptr;
	}


	void ClientReceiveLinkDisabledState();
	void ServerSendLinkDisabledState();
	void NotifyLinkDisabledStateChange();
	void ClientReceiveManualCoverTypeSlots();
	void ServerSendManualCoverTypeSlots();
	void NotifySetManualCoverTypeForSlots();
	void ClientReceiveAdjustedSlots();
	void ServerSendAdjustedSlots();
	void NotifyAutoAdjustSlots();
	void ClientReceiveDisabledSlots();
	void ServerSendDisabledSlots();
	void NotifyDisabledSlots();
	void ClientReceiveEnabledSlots();
	void ServerSendEnabledSlots();
	void NotifyEnabledSlots();
	void ClientReceiveInitialCoverReplicationInfo();
	void ServerSendInitialCoverReplicationInfo();
	void ClientSetOwner();
	void ReplicateInitialCoverInfo();
	void PurgeOldEntries();
};


// Class Engine.GameMessage
// 0x0114 (0x0164 - 0x0050)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                                       // 0x0050(0x000C)
	struct FString                                     LeftMessage;                                              // 0x005C(0x000C)
	struct FString                                     FailedTeamMessage;                                        // 0x0068(0x000C)
	struct FString                                     FailedPlaceMessage;                                       // 0x0074(0x000C)
	struct FString                                     FailedSpawnMessage;                                       // 0x0080(0x000C)
	struct FString                                     EnteredMessage;                                           // 0x008C(0x000C)
	struct FString                                     MaxedOutMessage;                                          // 0x0098(0x000C)
	struct FString                                     ArbitrationMessage;                                       // 0x00A4(0x000C)
	struct FString                                     OvertimeMessage;                                          // 0x00B0(0x000C)
	struct FString                                     GlobalNameChange;                                         // 0x00BC(0x000C)
	struct FString                                     NewTeamMessage;                                           // 0x00C8(0x000C)
	struct FString                                     NewTeamMessageTrailer;                                    // 0x00D4(0x000C)
	struct FString                                     NoNameChange;                                             // 0x00E0(0x000C)
	struct FString                                     VoteStarted;                                              // 0x00EC(0x000C)
	struct FString                                     VotePassed;                                               // 0x00F8(0x000C)
	struct FString                                     MustHaveStats;                                            // 0x0104(0x000C)
	struct FString                                     CantBeSpectator;                                          // 0x0110(0x000C)
	struct FString                                     CantBePlayer;                                             // 0x011C(0x000C)
	struct FString                                     BecameSpectator;                                          // 0x0128(0x000C)
	struct FString                                     NewPlayerMessage;                                         // 0x0134(0x000C)
	struct FString                                     KickWarning;                                              // 0x0140(0x000C)
	struct FString                                     NewSpecMessage;                                           // 0x014C(0x000C)
	struct FString                                     SpecEnteredMessage;                                       // 0x0158(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameMessage");
		return ptr;
	}


	void STATIC_GetString();
};


// Class Engine.ScoreBoard
// 0x0004 (0x094C - 0x0948)
class AScoreBoard : public AHUD
{
public:
	unsigned long                                      bDisplayMessages : 1;                                     // 0x0948(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScoreBoard");
		return ptr;
	}


	void ChangeState();
	void UpdateScoreBoard();
	void UpdateGRI();
	void DrawHUD();
};


// Class Engine.DmgType_Suicided
// 0x0000 (0x0088 - 0x0088)
class UDmgType_Suicided : public UKillZDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Suicided");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                                      // 0x00E8(0x0004)
	unsigned long                                      bToggleTurning : 1;                                       // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleInput");
		return ptr;
	}


	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_ToggleHUD
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleHUD");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void IsValidUISequenceObject();
};


// Class Engine.SeqAct_ForceFeedback
// 0x0008 (0x00F0 - 0x00E8)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x00E8(0x0004)
	class UClass*                                      PredefinedWaveForm;                                       // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ForceFeedback");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                                     // 0x00E8(0x0004)
	unsigned long                                      bDisableTurning : 1;                                      // 0x00E8(0x0004)
	unsigned long                                      bHidePlayer : 1;                                          // 0x00E8(0x0004)
	unsigned long                                      bDisableInput : 1;                                        // 0x00E8(0x0004)
	unsigned long                                      bHideHUD : 1;                                             // 0x00E8(0x0004)
	unsigned long                                      bDeadBodies : 1;                                          // 0x00E8(0x0004)
	unsigned long                                      bDroppedPickups : 1;                                      // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleCinematicMode");
		return ptr;
	}


	void IsValidUISequenceObject();
	void Activated();
};


// Class Engine.SeqAct_ConsoleCommand
// 0x0018 (0x0100 - 0x00E8)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                                  // 0x00E8(0x000C)
	TArray<struct FString>                             Commands;                                                 // 0x00F4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ConsoleCommand");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void VersionUpdated();
};


// Class Engine.SeqAct_FlyThroughHasEnded
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_FlyThroughHasEnded");
		return ptr;
	}

};


// Class Engine.SeqAct_SetSoundMode
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetSoundMode : public USequenceAction
{
public:
	class USoundMode*                                  SoundMode;                                                // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSoundMode");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void Activated();
};


// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x0028 (0x0064 - 0x003C)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x003C(0x0004)
	struct FString                                     GroupName;                                                // 0x0040(0x000C)
	struct FString                                     AnimName;                                                 // 0x004C(0x000C)
	class USoundCue*                                   SoundCueToPlay;                                           // 0x0058(0x0004)
	unsigned long                                      bOverridePlayingAnim : 1;                                 // 0x005C(0x0004)
	float                                              PlayFrequency;                                            // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlayFaceFXAnim");
		return ptr;
	}


	void Notify();
};


// Class Engine.BroadcastHandler
// 0x0008 (0x0224 - 0x021C)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                                 // 0x021C(0x0004)
	unsigned long                                      bMuteSpectators : 1;                                      // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BroadcastHandler");
		return ptr;
	}


	void AllowBroadcastLocalizedTeam();
	void AllowBroadcastLocalized();
	void BroadcastTeam();
	void Broadcast();
	void BroadcastLocalized();
	void BroadcastText();
	void AllowsBroadcast();
	void UpdateSentText();
};


// Class Engine.BuffManager
// 0x0000 (0x021C - 0x021C)
class ABuffManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BuffManager");
		return ptr;
	}

};


// Class Engine.ColorScaleVolume
// 0x0010 (0x0268 - 0x0258)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                               // 0x0258(0x000C)
	float                                              InterpTime;                                               // 0x0264(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ColorScaleVolume");
		return ptr;
	}


	void UnTouch();
	void Touch();
};


// Class Engine.UIAction_ConsoleCommand
// 0x000C (0x00F8 - 0x00EC)
class UUIAction_ConsoleCommand : public UUIAction
{
public:
	struct FString                                     Command;                                                  // 0x00EC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIAction_ConsoleCommand");
		return ptr;
	}

};


// Class Engine.UIEvent_Initialized
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_Initialized : public UUIEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_Initialized");
		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x0948 - 0x0948)
class ADebugCameraHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraHUD");
		return ptr;
	}


	void PostRender();
	void DisplayMaterials();
	void PostBeginPlay();
};


// Class Engine.DebugCameraInput
// 0x0000 (0x0170 - 0x0170)
class UDebugCameraInput : public UPlayerInput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraInput");
		return ptr;
	}


	void InputKey();
};


// Class Engine.VolumeTimer
// 0x0004 (0x0220 - 0x021C)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                        // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumeTimer");
		return ptr;
	}


	void Timer();
	void PostBeginPlay();
};


// Class Engine.SeqAct_SetDamageInstigator
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                         // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetDamageInstigator");
		return ptr;
	}

};


// Class Engine.DmgType_Crushed
// 0x0000 (0x0088 - 0x0088)
class UDmgType_Crushed : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Crushed");
		return ptr;
	}

};


// Class Engine.DmgType_Fell
// 0x0000 (0x0088 - 0x0088)
class UDmgType_Fell : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Fell");
		return ptr;
	}

};


// Class Engine.DmgType_Telefragged
// 0x0000 (0x0088 - 0x0088)
class UDmgType_Telefragged : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Telefragged");
		return ptr;
	}

};


// Class Engine.DynamicPhysicsVolume
// 0x0000 (0x0298 - 0x0298)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicPhysicsVolume");
		return ptr;
	}

};


// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x0254 - 0x0254)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicSMActor_Spawnable");
		return ptr;
	}

};


// Class Engine.DynamicTriggerVolume
// 0x0000 (0x0258 - 0x0258)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicTriggerVolume");
		return ptr;
	}

};


// Class Engine.SeqAct_SetParticleSysParam
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x00E8(0x000C)
	unsigned long                                      bOverrideScalar : 1;                                      // 0x00F4(0x0004)
	float                                              ScalarValue;                                              // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetParticleSysParam");
		return ptr;
	}

};


// Class Engine.FailedConnect
// 0x0030 (0x0080 - 0x0050)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[0x4];                                         // 0x0050(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FailedConnect");
		return ptr;
	}


	void STATIC_GetString();
	void STATIC_GetFailSwitch();
};


// Class Engine.FracturedSMActorSpawnable
// 0x0000 (0x0284 - 0x0284)
class AFracturedSMActorSpawnable : public AFracturedStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedSMActorSpawnable");
		return ptr;
	}

};


// Class Engine.SeqEvent_PlayerSpawned
// 0x0004 (0x0104 - 0x0100)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                               // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_PlayerSpawned");
		return ptr;
	}

};


// Class Engine.UIMessageBoxBase
// 0x005C (0x05E0 - 0x0584)
class UUIMessageBoxBase : public UUIScene
{
public:
	class UUILabel*                                    lblTitle;                                                 // 0x0584(0x0004)
	class UUILabel*                                    lblMessage;                                               // 0x0588(0x0004)
	class UUILabel*                                    lblQuestion;                                              // 0x058C(0x0004)
	class UUIImage*                                    imgQuestion;                                              // 0x0590(0x0004)
	class UUICalloutButtonPanel*                       btnbarChoices;                                            // 0x0594(0x0004)
	struct FName                                       TitleWidgetName;                                          // 0x0598(0x0008)
	struct FName                                       MessageWidgetName;                                        // 0x05A0(0x0008)
	struct FName                                       QuestionWidgetName;                                       // 0x05A8(0x0008)
	struct FName                                       ChoicesWidgetName;                                        // 0x05B0(0x0008)
	struct FName                                       QuestionWidgetImageName;                                  // 0x05B8(0x0008)
	struct FName                                       ButtonBarButtonBGStyleName;                               // 0x05C0(0x0008)
	struct FName                                       ButtonBarButtonTextStyleName;                             // 0x05C8(0x0008)
	unsigned long                                      bPerformAutomaticLayout : 1;                              // 0x05D0(0x0004)
	struct FScriptDelegate                             __OnOptionSelected__Delegate;                             // 0x05D4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIMessageBoxBase");
		return ptr;
	}


	void HandleSceneActivated();
	void OptionChosen();
	void SetupDockingRelationships();
	void LayoutControls();
	void GetButtonBar();
	void GetMessageLabel();
	void GetTitleLabel();
	void FindButtonIndex();
	void HasButton();
	void RemoveButton();
	void AddButton();
	void SetButtonCallback();
	void SetQuestion();
	void SetMessage();
	void SetTitle();
	void SetupMessageBox();
	void OnOptionSelected();
};


// Class Engine.UIMessageBox
// 0x0000 (0x05E0 - 0x05E0)
class UUIMessageBox : public UUIMessageBoxBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIMessageBox");
		return ptr;
	}


	void SetupDockingRelationships();
};


// Class Engine.HeightFog
// 0x0008 (0x0224 - 0x021C)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                                // 0x021C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0220(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeightFog");
		return ptr;
	}


	void OnToggle();
	void ReplicatedEvent();
	void PostBeginPlay();
};


// Class Engine.InterpActor_ForCinematic
// 0x0000 (0x0280 - 0x0280)
class AInterpActor_ForCinematic : public AInterpActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpActor_ForCinematic");
		return ptr;
	}

};


// Class Engine.SeqAct_AssignController
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                          // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AssignController");
		return ptr;
	}

};


// Class Engine.SeqAct_GiveInventory
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	TArray<class UClass*>                              InventoryList;                                            // 0x00E8(0x000C)
	unsigned long                                      bClearExisting : 1;                                       // 0x00F4(0x0004)
	unsigned long                                      bForceReplace : 1;                                        // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GiveInventory");
		return ptr;
	}

};


// Class Engine.NavMeshBoundsVolume
// 0x0000 (0x0258 - 0x0258)
class ANavMeshBoundsVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshBoundsVolume");
		return ptr;
	}

};


// Class Engine.OnlineCommunityContentInterface
// 0x003C (0x0078 - 0x003C)
class UOnlineCommunityContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadContentListComplete__Delegate;                    // 0x003C(0x000C)
	struct FScriptDelegate                             __OnReadFriendsContentListComplete__Delegate;             // 0x0048(0x000C)
	struct FScriptDelegate                             __OnUploadContentComplete__Delegate;                      // 0x0054(0x000C)
	struct FScriptDelegate                             __OnDownloadContentComplete__Delegate;                    // 0x0060(0x000C)
	struct FScriptDelegate                             __OnGetContentPayloadComplete__Delegate;                  // 0x006C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineCommunityContentInterface");
		return ptr;
	}


	void RateContent();
	void ClearGetContentPayloadCompleteDelegate();
	void AddGetContentPayloadCompleteDelegate();
	void OnGetContentPayloadComplete();
	void GetContentPayload();
	void ClearDownloadContentCompleteDelegate();
	void AddDownloadContentCompleteDelegate();
	void OnDownloadContentComplete();
	void DownloadContent();
	void ClearUploadContentCompleteDelegate();
	void AddUploadContentCompleteDelegate();
	void OnUploadContentComplete();
	void UploadContent();
	void GetFriendsContentList();
	void ClearReadFriendsContentListCompleteDelegate();
	void AddReadFriendsContentListCompleteDelegate();
	void OnReadFriendsContentListComplete();
	void ReadFriendsContentList();
	void GetContentList();
	void ClearReadContentListCompleteDelegate();
	void AddReadContentListCompleteDelegate();
	void OnReadContentListComplete();
	void ReadContentList();
	void Exit();
	void Init();
};


// Class Engine.OnlineEventsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineEventsInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineEventsInterface");
		return ptr;
	}


	void UploadHardwareData();
	void UploadGameplayEventsData();
	void UploadProfileData();
};


// Class Engine.OnlinePlaylistGameTypeProvider
// 0x0024 (0x00A0 - 0x007C)
class UOnlinePlaylistGameTypeProvider : public UUIResourceDataProvider
{
public:
	struct FName                                       PlaylistGameTypeName;                                     // 0x007C(0x0008)
	struct FString                                     DisplayName;                                              // 0x0084(0x000C)
	struct FString                                     Description;                                              // 0x0090(0x000C)
	int                                                GameTypeId;                                               // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlaylistGameTypeProvider");
		return ptr;
	}

};


// Class Engine.OnlinePlaylistProvider
// 0x0024 (0x00A0 - 0x007C)
class UOnlinePlaylistProvider : public UUIResourceDataProvider
{
public:
	int                                                PlaylistId;                                               // 0x007C(0x0004)
	TArray<struct FName>                               PlaylistGameTypeNames;                                    // 0x0080(0x000C)
	struct FString                                     DisplayName;                                              // 0x008C(0x000C)
	unsigned long                                      bIsArbitrated : 1;                                        // 0x0098(0x0004)
	int                                                Priority;                                                 // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlaylistProvider");
		return ptr;
	}

};


// Class Engine.OnlineRecentPlayersList
// 0x0048 (0x0084 - 0x003C)
class UOnlineRecentPlayersList : public UObject
{
public:
	TArray<struct FUniqueNetId>                        RecentPlayers;                                            // 0x003C(0x000C)
	TArray<struct FRecentParty>                        RecentParties;                                            // 0x0048(0x000C)
	struct FRecentParty                                LastParty;                                                // 0x0054(0x0014)
	int                                                MaxRecentPlayers;                                         // 0x0068(0x0004)
	int                                                MaxRecentParties;                                         // 0x006C(0x0004)
	int                                                RecentPlayersAddIndex;                                    // 0x0070(0x0004)
	int                                                RecentPartiesAddIndex;                                    // 0x0074(0x0004)
	TArray<struct FCurrentPlayerMet>                   CurrentPlayers;                                           // 0x0078(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineRecentPlayersList");
		return ptr;
	}


	void GetCurrentPlayersListCount();
	void SetCurrentPlayersList();
	void ShowCurrentPlayersList();
	void ShowLastPartyPlayerList();
	void ShowRecentPartiesPlayerList();
	void ShowRecentPlayerList();
	void SetLastParty();
	void GetTeamForCurrentPlayer();
	void GetSkillForCurrentPlayer();
	void GetPlayersFromCurrentPlayers();
	void GetPlayersFromRecentParties();
	void ClearRecentParties();
	void AddPartyToRecentParties();
	void ClearRecentPlayers();
	void AddPlayerToRecentPlayers();
};


// Class Engine.PathNode_Dynamic
// 0x0000 (0x02F8 - 0x02F8)
class APathNode_Dynamic : public APathNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathNode_Dynamic");
		return ptr;
	}


	void GetDebugAbbrev();
};


// Class Engine.SeqEvent_AIReachedRouteActor
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_AIReachedRouteActor : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AIReachedRouteActor");
		return ptr;
	}

};


// Class Engine.SeqEvent_PickupStatusChange
// 0x0000 (0x0100 - 0x0100)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_PickupStatusChange");
		return ptr;
	}

};


// Class Engine.RadialBlurActor
// 0x0004 (0x0220 - 0x021C)
class ARadialBlurActor : public AActor
{
public:
	class URadialBlurComponent*                        RadialBlur;                                               // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialBlurActor");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleConstraintDrive
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_ToggleConstraintDrive : public USequenceAction
{
public:
	unsigned long                                      bEnableAngularPositionDrive : 1;                          // 0x00E8(0x0004)
	unsigned long                                      bEnableAngularVelocityDrive : 1;                          // 0x00E8(0x0004)
	unsigned long                                      bEnableLinearPositionDrive : 1;                           // 0x00E8(0x0004)
	unsigned long                                      bEnableLinearvelocityDrive : 1;                           // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleConstraintDrive");
		return ptr;
	}

};


// Class Engine.RB_BSJointActor
// 0x0000 (0x0238 - 0x0238)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BSJointActor");
		return ptr;
	}

};


// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x0238 - 0x0238)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintActorSpawnable");
		return ptr;
	}

};


// Class Engine.RB_HingeActor
// 0x0000 (0x0238 - 0x0238)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_HingeActor");
		return ptr;
	}

};


// Class Engine.RB_PrismaticActor
// 0x0000 (0x0238 - 0x0238)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PrismaticActor");
		return ptr;
	}

};


// Class Engine.RB_PulleyJointActor
// 0x0000 (0x0238 - 0x0238)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PulleyJointActor");
		return ptr;
	}

};


// Class Engine.ScriptConsoleEntry
// 0x000C (0x048C - 0x0480)
class UScriptConsoleEntry : public UUIPanel
{
public:
	class UUIEditBox*                                  InputBox;                                                 // 0x0480(0x0004)
	class UUIImage*                                    UpperConsoleBorder;                                       // 0x0484(0x0004)
	class UUIImage*                                    LowerConsoleBorder;                                       // 0x0488(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptConsoleEntry");
		return ptr;
	}


	void OnCreateChild();
	void SetValue();
	void PostInitialize();
};


// Class Engine.SeqAct_AddRemoveFaceFXAnimSet
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_AddRemoveFaceFXAnimSet : public USequenceAction
{
public:
	TArray<class UFaceFXAnimSet*>                      FaceFXAnimSets;                                           // 0x00E8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddRemoveFaceFXAnimSet");
		return ptr;
	}

};


// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AIAbortMoveToActor");
		return ptr;
	}

};


// Class Engine.SeqAct_SetSkelControlTarget
// 0x0014 (0x00FC - 0x00E8)
class USeqAct_SetSkelControlTarget : public USequenceAction
{
public:
	struct FName                                       SkelControlName;                                          // 0x00E8(0x0008)
	TArray<class UObject*>                             TargetActors;                                             // 0x00F0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSkelControlTarget");
		return ptr;
	}

};


// Class Engine.SeqAct_SetVector
// 0x000C (0x00F4 - 0x00E8)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                             // 0x00E8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetVector");
		return ptr;
	}


	void Activated();
};


// Class Engine.SeqAct_UpdatePhysBonesFromAnim
// 0x0000 (0x00E8 - 0x00E8)
class USeqAct_UpdatePhysBonesFromAnim : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_UpdatePhysBonesFromAnim");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_LOS
// 0x000C (0x010C - 0x0100)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                                     // 0x0100(0x0004)
	float                                              TriggerDistance;                                          // 0x0104(0x0004)
	unsigned long                                      bCheckForObstructions : 1;                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LOS");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
};


// Class Engine.SeqVar_Byte
// 0x0000 (0x0094 - 0x0094)
class USeqVar_Byte : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Byte");
		return ptr;
	}

};


// Class Engine.SeqVar_Name
// 0x0000 (0x0094 - 0x0094)
class USeqVar_Name : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Name");
		return ptr;
	}

};


// Class Engine.SeqVar_UIRange
// 0x0000 (0x0094 - 0x0094)
class USeqVar_UIRange : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_UIRange");
		return ptr;
	}

};


// Class Engine.SeqVar_Union
// 0x0000 (0x0094 - 0x0094)
class USeqVar_Union : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Union");
		return ptr;
	}

};


// Class Engine.SeqVar_UniqueNetId
// 0x0000 (0x0094 - 0x0094)
class USeqVar_UniqueNetId : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_UniqueNetId");
		return ptr;
	}

};


// Class Engine.UISettingsClient
// 0x0000 (0x003C - 0x003C)
class UUISettingsClient : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISettingsClient");
		return ptr;
	}

};


// Class Engine.SessionSettingsProvider_GameInfo
// 0x0000 (0x0084 - 0x0084)
class USessionSettingsProvider_GameInfo : public USessionSettingsProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SessionSettingsProvider_GameInfo");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x025C - 0x025C)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorMATSpawnable");
		return ptr;
	}

};


// Class Engine.Trigger_Dynamic
// 0x0000 (0x0228 - 0x0228)
class ATrigger_Dynamic : public ATrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger_Dynamic");
		return ptr;
	}

};


// Class Engine.Trigger_LOS
// 0x000C (0x0234 - 0x0228)
class ATrigger_LOS : public ATrigger
{
public:
	TArray<class APlayerController*>                   PCsWithLOS;                                               // 0x0228(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger_LOS");
		return ptr;
	}


	void Tick();
};


// Class Engine.TriggeredPath
// 0x0008 (0x02FC - 0x02F4)
class ATriggeredPath : public ANavigationPoint
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x02F4(0x0004)
	class AActor*                                      MyTrigger;                                                // 0x02F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggeredPath");
		return ptr;
	}


	void SuggestMovePreparation();
	void SpecialHandling();
	void OnToggle();
};


// Class Engine.TriggerStreamingLevel
// 0x000C (0x0234 - 0x0228)
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray<struct FLevelStreamingData>                 Levels;                                                   // 0x0228(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerStreamingLevel");
		return ptr;
	}


	void Touch();
};


// Class Engine.UICharacterSummary
// 0x0028 (0x00A4 - 0x007C)
class UUICharacterSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                            // 0x007C(0x000C)
	struct FString                                     CharacterName;                                            // 0x0088(0x000C)
	struct FString                                     CharacterBio;                                             // 0x0094(0x000C)
	unsigned long                                      bIsDisabled : 1;                                          // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICharacterSummary");
		return ptr;
	}


	void IsProviderDisabled();
};


// Class Engine.UICond_SwitchWidget
// 0x0000 (0x00E0 - 0x00E0)
class UUICond_SwitchWidget : public USeqCond_SwitchObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICond_SwitchWidget");
		return ptr;
	}


	void IsValidLevelSequenceObject();
};


// Class Engine.UIEvent_SceneActivated
// 0x0004 (0x012C - 0x0128)
class UUIEvent_SceneActivated : public UUIEvent_Scene
{
public:
	unsigned long                                      bInitialActivation : 1;                                   // 0x0128(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SceneActivated");
		return ptr;
	}


	void STATIC_GetObjClassVersion();
	void Deactivated();
};


// Class Engine.UIEvent_SceneDeactivated
// 0x0000 (0x0128 - 0x0128)
class UUIEvent_SceneDeactivated : public UUIEvent_Scene
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIEvent_SceneDeactivated");
		return ptr;
	}

};


// Class Engine.UIFocusHint
// 0x0000 (0x04CC - 0x04CC)
class UUIFocusHint : public UUILabel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIFocusHint");
		return ptr;
	}


	void RemovedFromParent();
};


// Class Engine.UIGameInfoSummary
// 0x004C (0x00C8 - 0x007C)
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassName;                                                // 0x007C(0x000C)
	struct FString                                     GameAcronym;                                              // 0x0088(0x000C)
	struct FString                                     MapPrefix;                                                // 0x0094(0x000C)
	unsigned long                                      bIsTeamGame : 1;                                          // 0x00A0(0x0004)
	unsigned long                                      bIsDisabled : 1;                                          // 0x00A0(0x0004)
	struct FString                                     GameSettingsClassName;                                    // 0x00A4(0x000C)
	struct FString                                     GameName;                                                 // 0x00B0(0x000C)
	struct FString                                     Description;                                              // 0x00BC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIGameInfoSummary");
		return ptr;
	}


	void IsProviderDisabled();
};


// Class Engine.UIScriptConsoleScene
// 0x000C (0x0590 - 0x0584)
class UUIScriptConsoleScene : public UUIScene
{
public:
	class UUILabel*                                    BufferText;                                               // 0x0584(0x0004)
	class UUIImage*                                    BufferBackground;                                         // 0x0588(0x0004)
	class UScriptConsoleEntry*                         CommandRegion;                                            // 0x058C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIScriptConsoleScene");
		return ptr;
	}


	void OnCreateChild();
	void PostInitialize();
};


// Class Engine.UIWeaponSummary
// 0x0028 (0x00A4 - 0x007C)
class UUIWeaponSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                            // 0x007C(0x000C)
	struct FString                                     FriendlyName;                                             // 0x0088(0x000C)
	struct FString                                     WeaponDescription;                                        // 0x0094(0x000C)
	unsigned long                                      bIsDisabled : 1;                                          // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIWeaponSummary");
		return ptr;
	}


	void IsProviderDisabled();
};


// Class Engine.WaterVolume
// 0x0014 (0x02AC - 0x0298)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                               // 0x0298(0x0004)
	class USoundCue*                                   ExitSound;                                                // 0x029C(0x0004)
	class UClass*                                      EntryActor;                                               // 0x02A0(0x0004)
	class UClass*                                      ExitActor;                                                // 0x02A4(0x0004)
	class UClass*                                      PawnEntryActor;                                           // 0x02A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaterVolume");
		return ptr;
	}


	void PlayExitSplash();
	void UnTouch();
	void PlayEntrySplash();
	void Touch();
};


// Class Engine.WindDirectionalSource
// 0x0004 (0x0220 - 0x021C)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                // 0x021C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
